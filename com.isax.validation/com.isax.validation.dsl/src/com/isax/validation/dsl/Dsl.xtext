grammar com.isax.validation.dsl.Dsl with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.isax.com/validation/dsl/Dsl"

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	imports = XImportSection?
	('refers' referred+=[ecore::EPackage|STRING])*	
	validators += Validator*;

Validator:
	'validator'
	name = QualifiedName
	startOn = StartOnSentence
	body = BodySentences
	predicates += PredicateDefinitionSentence*
	errors += ErrorDefinition*;

ErrorDefinition:
	'[' name=ID ']'
	text = STRING;

BodySentences:
	{BodySentences}
	(sentences += DefinitionSentence | sentences += ConstraintSentence)*;

Sentence:
	StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence;

StartOnSentence:
	'start on' definition=NodeDefinition ('where' '{' where=BodySentences '}')?;

DefinitionSentence:
	(quantification=Quantification | node=[NodeDefinition]) 
	qualifier=RelationQualifier
	quantifier=RelationQuantifier
	kind=RelationKind?
	axis=RelationAxis
	target=TargetDefinition;

ConstraintSentence:
	('it' | 'for' quantifications=QuantificationList) 
	'holds' ':'
	predicate=PredicateExpression;

PredicateDefinitionSentence:
	'define' name=ID parameters=ParameterList? 'as' '{' body = BodySentences '}';

NodeDefinition:
	name=ID collection?='*'? selectors=SelectorList?;
	
NodeReferenceList:
	nodes+=[NodeDefinition] (',' nodes+=[NodeDefinition])*;


TargetDefinition:
	(local=NodeDefinition ':')? definition=NodeDefinition ('where' '{' body=BodySentences '}')? ('then' then=XBlockExpression)?;


SelectorList:
	('being' selectors=SelectorListDef) | ('(' selectors=SelectorListDef ')');

SelectorListDef:
	selectors+=Selector ('or' selectors+=Selector)*;

Selector:
	IDSelector | EClassSelector;

IDSelector:
	id=STRING;

EClassSelector:
	class=[ecore::EClass|ID];

PredicateExpression:
	AndExpression;

AndExpression returns PredicateExpression:
	OrExpression ({AndExpression.lhs=current} ('and' | ',') rhs=OrExpression)*;

OrExpression returns PredicateExpression:
	ImpliesExpression ({OrExpression.lhs=current} 'or' rhs=ImpliesExpression)*;

ImpliesExpression returns PredicateExpression:
	NotExpression ({ImpliesExpression.lhs=current} ('implies' | '=>') rhs=NotExpression)?;

NotExpression returns PredicateExpression:
	(=>negated?='not')? inner=PrimaryExpression;

PrimaryExpression returns PredicateExpression:
	(call=PredicateCall | ('(' inner=PredicateExpression ')'));

PredicateCall:
	(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference | PredicateXExpression) ('[' error=[ErrorDefinition] ']')?;
	
PredicateXExpression:
	expression = XBlockExpression;	
	
PropertyRelationPredicate:
	lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression;

DefinitionSentencePredicate:
	sentence=DefinitionSentence;

PredicateReference:
	reference=[PredicateDefinitionSentence]
	arguments=ArgumentList;


Parameter:
	node=NodeDefinition;
	
ParameterList:
	parameters+=Parameter (',' parameters+=Parameter)*;

Argument:
	node=[NodeDefinition];

ArgumentList:
	arguments+=Argument (',' arguments+=Argument)*;

XXAssignment returns xbase::XExpression:
	{XXAssignment}
	'set' node=[NodeDefinition] '.' property=ID 'to' expression=XPrimaryExpression;

XPrimaryExpression returns xbase::XExpression:
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XSynchronizedExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XBasicForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression |
	XXPropertyExpression |
	XXAssignment;

XXPropertyExpression returns xbase::XExpression:
	{XXPropertyExpression}
	'[[' node=[NodeDefinition] '~>' name=ID ']]';

Quantification:
	quantor=Quantor node=NodeDefinition 'in' nodeSet=[NodeDefinition];

QuantificationList:
	quantifications+=Quantification (',' quantifications+=Quantification)*;

// Fix this
PropertyExpression:
	PropertyValueExpression | PropertyReferenceExpression;
	
PropertyValueExpression:
	value=STRING;

PropertyReferenceExpression:
	node=[NodeDefinition] '.' property=PropertyReference;
	
PropertyReference:
	NamedPropertyReference | EAttributePropertyReference;

NamedPropertyReference:
	name=STRING;
	
EAttributePropertyReference:
	attribute=[ecore::EAttribute|ID];

RelationQualifier:
	MustHave | MustNotHave | CanHave;

MustHave returns RelationQualifier:
	{MustHave}
	'must have';

MustNotHave returns RelationQualifier:
	{MustNotHave}
	'must not have';

CanHave returns RelationQualifier:
	{CanHave}
	'can have';

RelationQuantifier:
	One | Multiple | AtLeast | AtMost | Exactly;

One returns RelationQuantifier:
	{One}
	('one')?;

Multiple returns RelationQuantifier:
	{Multiple}
	'multiple';
	
AtLeast returns RelationQuantifier:
	{AtLeast}
	'at least'
	quantity = INT;

AtMost returns RelationQuantifier:
	{AtMost}
	'at most'
	quantity = INT;

Exactly returns RelationQuantifier:
	{Exactly}
	'exactly'
	quantity = INT;

RelationAxis:
	Parent | Child | Ancestor | Descendant;

Parent returns RelationAxis:
	{Parent}
	('parent' | 'parents');

Child returns RelationAxis:
	{Parent}
	('child' | 'children');
	
Ancestor returns RelationAxis:
	{Ancestor}
	('ancestor' | 'ancestors');

Descendant returns RelationAxis:
	{Descendant}
	('descendant' | 'descendants');

enum Quantor:
	Each='each' | Any='any';
	
enum PropertyRelation:
	Equals='equals' | NotEquals='not equals' | 
	Greater='greater than' | Lesser='lesser than' | GreaterEquals='greater or equals than' | LesserEquals='lesser or equals than' |
	Contains = 'contains' | NotContains='not contains' | 
	Intersects='intersects' | SubsetOf='subset of';
	
enum RelationKind:
	Primary='primary' | Secondary='secondary'
;
	