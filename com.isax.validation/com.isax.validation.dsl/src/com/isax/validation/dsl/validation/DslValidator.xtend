/*
 * generated by Xtext
 */
package com.isax.validation.dsl.validation

import com.isax.validation.dsl.dsl.DefinitionSentence
import com.isax.validation.dsl.dsl.DslPackage
import com.isax.validation.dsl.dsl.Quantification
import com.isax.validation.dsl.dsl.RelationQualifier
import com.isax.validation.dsl.dsl.StartOnSentence
import com.isax.validation.dsl.dsl.TargetDefinition
import com.isax.validation.dsl.dsl.Validator
import java.util.ArrayList
import org.eclipse.xtext.validation.Check

import static extension com.isax.validation.dsl.util.DslUtil.collectionAxis

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DslValidator extends AbstractDslValidator {

	@Check
	def hasOnlyOneStartOnSentence(Validator validator) {
		val sentences = new ArrayList<StartOnSentence>();
		for (sentence : validator.sentences) {
			if (sentence instanceof StartOnSentence) {
				sentences.add(sentence);
			}
		}
		
		if (sentences.size > 1) {
			for (sentence : sentences) {
				error("Validator may have only one 'start on' sentence!", sentence, null)	
			}
		}
	}
	
	@Check
	def refersSet(Quantification quantification) {
		if (!quantification.nodeSet.collection) {
			error("Quantification node set (" + quantification.nodeSet.name + ") is not a set!", quantification, DslPackage.eINSTANCE.quantification_NodeSet)
		}
	}
	
	
	@Check
	def definitionConformsAxisKind(TargetDefinition target) {
		if (!target.definition.collection && target.axis.collectionAxis) {
			error("Usage of 'multiple' implies node-set target!", target.definition, DslPackage.eINSTANCE.nodeDefinition_Name)
		}
		if (target.definition.collection && !(target.axis.collectionAxis)) {
			error("Usage of 'non-multiple' qualifier implies single node target!", target.definition, DslPackage.eINSTANCE.nodeDefinition_Name)
		}
	}
	
	@Check
	def mustNotExcludesMultiple(DefinitionSentence sentence) {
		if (sentence.qualifier == RelationQualifier.MUST_NOT && sentence.target.axis.collectionAxis) {
			error("Combination of 'must not' and 'multiple' is not allowed!", sentence, DslPackage.eINSTANCE.definitionSentence_Qualifier)
			error("Combination of 'must not' and 'multiple' is not allowed!", sentence.target, DslPackage.eINSTANCE.targetDefinition_Axis)
		}
	}
}
