/*
 * generated by Xtext
 */
package com.isax.validation.dsl.validation

import com.google.common.collect.Iterables
import com.isax.validation.dsl.dsl.DefinitionSentence
import com.isax.validation.dsl.dsl.DslPackage
import com.isax.validation.dsl.dsl.StartOnSentence
import com.isax.validation.dsl.dsl.Validator
import com.isax.validation.dsl.util.DslUtil
import java.util.ArrayList
import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DslValidator extends AbstractDslValidator {

	@Check
	def checkHasOnlyOneStartOnSentence(Validator validator) {
		val sentences = new ArrayList<StartOnSentence>();
		for (sentence : validator.sentences) {
			if (sentence instanceof StartOnSentence) {
				sentences.add(sentence);
			}
		}
		
		if (sentences.size > 1) {
			for (sentence : sentences) {
				error("Validator may have only one 'start on' sentence!", sentence, null)	
			}
		}
	}
	
//	@Check
//	def checkNodeIsNotReferencedBeforeDeclaration(DefinitionSentence sentence) {
//		val node = if (sentence.node != null) sentence.node else sentence.quantification.nodeSet
//		val definedNodes = DslUtil.findPreviouslyDefinedNodes(sentence)
//		
//		if (!Iterables.contains(definedNodes, node)) {
//			error("Nodes must be declared before they can be used!", node, DslPackage.Literals.NODE_DEFINITION__NAME)
//		}
//	}
}
