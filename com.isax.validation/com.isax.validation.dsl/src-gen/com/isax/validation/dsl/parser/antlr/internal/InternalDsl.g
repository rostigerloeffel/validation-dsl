/*
 * generated by Xtext
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.isax.validation.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.isax.validation.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.isax.validation.dsl.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;
 	
    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Validator";	
   	}
   	
   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleValidator
entryRuleValidator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidatorRule()); }
	 iv_ruleValidator=ruleValidator 
	 { $current=$iv_ruleValidator.current; } 
	 EOF 
;

// Rule Validator
ruleValidator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getValidatorAccess().getSentencesSentenceParserRuleCall_0()); 
	    }
		lv_sentences_0_0=ruleSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidatorRule());
	        }
       		add(
       			$current, 
       			"sentences",
        		lv_sentences_0_0, 
        		"Sentence");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleSentence
entryRuleSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	 iv_ruleSentence=ruleSentence 
	 { $current=$iv_ruleSentence.current; } 
	 EOF 
;

// Rule Sentence
ruleSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getStartOnSentenceParserRuleCall_0()); 
    }
    this_StartOnSentence_0=ruleStartOnSentence
    { 
        $current = $this_StartOnSentence_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getDefinitionSentenceParserRuleCall_1()); 
    }
    this_DefinitionSentence_1=ruleDefinitionSentence
    { 
        $current = $this_DefinitionSentence_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getConstraintSentenceParserRuleCall_2()); 
    }
    this_ConstraintSentence_2=ruleConstraintSentence
    { 
        $current = $this_ConstraintSentence_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getPredicateDefinitionSentenceParserRuleCall_3()); 
    }
    this_PredicateDefinitionSentence_3=rulePredicateDefinitionSentence
    { 
        $current = $this_PredicateDefinitionSentence_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStartOnSentence
entryRuleStartOnSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStartOnSentenceRule()); }
	 iv_ruleStartOnSentence=ruleStartOnSentence 
	 { $current=$iv_ruleStartOnSentence.current; } 
	 EOF 
;

// Rule StartOnSentence
ruleStartOnSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='start on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStartOnSentenceAccess().getStartOnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStartOnSentenceAccess().getDefinitionNodeDefinitionParserRuleCall_1_0()); 
	    }
		lv_definition_1_0=ruleNodeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStartOnSentenceRule());
	        }
       		set(
       			$current, 
       			"definition",
        		lv_definition_1_0, 
        		"NodeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefinitionSentence
entryRuleDefinitionSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionSentenceRule()); }
	 iv_ruleDefinitionSentence=ruleDefinitionSentence 
	 { $current=$iv_ruleDefinitionSentence.current; } 
	 EOF 
;

// Rule DefinitionSentence
ruleDefinitionSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSentenceAccess().getQuantificationQuantificationParserRuleCall_0_0_0()); 
	    }
		lv_quantification_0_0=ruleQuantification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSentenceRule());
	        }
       		set(
       			$current, 
       			"quantification",
        		lv_quantification_0_0, 
        		"Quantification");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionSentenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getDefinitionSentenceAccess().getNodeNodeDefinitionCrossReference_0_1_0()); 
	}

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSentenceAccess().getQualifierRelationQualifierEnumRuleCall_1_0()); 
	    }
		lv_qualifier_2_0=ruleRelationQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSentenceRule());
	        }
       		set(
       			$current, 
       			"qualifier",
        		lv_qualifier_2_0, 
        		"RelationQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSentenceAccess().getTargetTargetDefinitionParserRuleCall_2_0()); 
	    }
		lv_target_3_0=ruleTargetDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSentenceRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_3_0, 
        		"TargetDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstraintSentence
entryRuleConstraintSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintSentenceRule()); }
	 iv_ruleConstraintSentence=ruleConstraintSentence 
	 { $current=$iv_ruleConstraintSentence.current; } 
	 EOF 
;

// Rule ConstraintSentence
ruleConstraintSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstraintSentenceAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintSentenceAccess().getQuantificationsQuantificationListParserRuleCall_1_0()); 
	    }
		lv_quantifications_1_0=ruleQuantificationList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintSentenceRule());
	        }
       		set(
       			$current, 
       			"quantifications",
        		lv_quantifications_1_0, 
        		"QuantificationList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintSentenceAccess().getNodesNodeReferenceListParserRuleCall_2_0()); 
	    }
		lv_nodes_2_0=ruleNodeReferenceList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintSentenceRule());
	        }
       		set(
       			$current, 
       			"nodes",
        		lv_nodes_2_0, 
        		"NodeReferenceList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='holds that' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintSentenceAccess().getHoldsThatKeyword_3_0());
    }

    |	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstraintSentenceAccess().getColonKeyword_3_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintSentenceAccess().getPredicatePredicateExpressionParserRuleCall_4_0()); 
	    }
		lv_predicate_5_0=rulePredicateExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintSentenceRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_5_0, 
        		"PredicateExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePredicateDefinitionSentence
entryRulePredicateDefinitionSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateDefinitionSentenceRule()); }
	 iv_rulePredicateDefinitionSentence=rulePredicateDefinitionSentence 
	 { $current=$iv_rulePredicateDefinitionSentence.current; } 
	 EOF 
;

// Rule PredicateDefinitionSentence
rulePredicateDefinitionSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPredicateDefinitionSentenceAccess().getDefineKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPredicateDefinitionSentenceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateDefinitionSentenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateDefinitionSentenceAccess().getParametersParameterListParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateDefinitionSentenceRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='as' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredicateDefinitionSentenceAccess().getAsKeyword_3_0());
    }

    |	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPredicateDefinitionSentenceAccess().getColonKeyword_3_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateDefinitionSentenceAccess().getPredicatePredicateExpressionParserRuleCall_4_0()); 
	    }
		lv_predicate_5_0=rulePredicateExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateDefinitionSentenceRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_5_0, 
        		"PredicateExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNodeDefinition
entryRuleNodeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeDefinitionRule()); }
	 iv_ruleNodeDefinition=ruleNodeDefinition 
	 { $current=$iv_ruleNodeDefinition.current; } 
	 EOF 
;

// Rule NodeDefinition
ruleNodeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNodeDefinitionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		lv_collection_1_0=	'*' 
    {
        newLeafNode(lv_collection_1_0, grammarAccess.getNodeDefinitionAccess().getCollectionAsteriskKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeDefinitionRule());
	        }
       		setWithLastConsumed($current, "collection", true, "*");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefinitionAccess().getSelectorsSelectorListParserRuleCall_2_0()); 
	    }
		lv_selectors_2_0=ruleSelectorList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefinitionRule());
	        }
       		set(
       			$current, 
       			"selectors",
        		lv_selectors_2_0, 
        		"SelectorList");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleNodeReferenceList
entryRuleNodeReferenceList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeReferenceListRule()); }
	 iv_ruleNodeReferenceList=ruleNodeReferenceList 
	 { $current=$iv_ruleNodeReferenceList.current; } 
	 EOF 
;

// Rule NodeReferenceList
ruleNodeReferenceList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeReferenceListRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionCrossReference_0_0()); 
	}

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNodeReferenceListAccess().getCommaKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeReferenceListRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionCrossReference_1_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleTargetDefinition
entryRuleTargetDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTargetDefinitionRule()); }
	 iv_ruleTargetDefinition=ruleTargetDefinition 
	 { $current=$iv_ruleTargetDefinition.current; } 
	 EOF 
;

// Rule TargetDefinition
ruleTargetDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTargetDefinitionAccess().getAxisAxisEnumRuleCall_0_0()); 
	    }
		lv_axis_0_0=ruleAxis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTargetDefinitionRule());
	        }
       		set(
       			$current, 
       			"axis",
        		lv_axis_0_0, 
        		"Axis");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTargetDefinitionAccess().getDefinitionNodeDefinitionParserRuleCall_1_0()); 
	    }
		lv_definition_1_0=ruleNodeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTargetDefinitionRule());
	        }
       		set(
       			$current, 
       			"definition",
        		lv_definition_1_0, 
        		"NodeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='where holds' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTargetDefinitionAccess().getWhereHoldsKeyword_2_0());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTargetDefinitionAccess().getLeftCurlyBracketKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTargetDefinitionAccess().getPredicatePredicateExpressionParserRuleCall_2_2_0()); 
	    }
		lv_predicate_4_0=rulePredicateExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTargetDefinitionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_4_0, 
        		"PredicateExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTargetDefinitionAccess().getRightCurlyBracketKeyword_2_3());
    }
)?(	otherlv_6='with property' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTargetDefinitionAccess().getWithPropertyKeyword_3_0());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTargetDefinitionAccess().getLeftCurlyBracketKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTargetDefinitionAccess().getAssignmentsAssignmentListParserRuleCall_3_2_0()); 
	    }
		lv_assignments_8_0=ruleAssignmentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTargetDefinitionRule());
	        }
       		set(
       			$current, 
       			"assignments",
        		lv_assignments_8_0, 
        		"AssignmentList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTargetDefinitionAccess().getRightCurlyBracketKeyword_3_3());
    }
)?)
;





// Entry rule entryRuleSelectorList
entryRuleSelectorList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectorListRule()); }
	 iv_ruleSelectorList=ruleSelectorList 
	 { $current=$iv_ruleSelectorList.current; } 
	 EOF 
;

// Rule SelectorList
ruleSelectorList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='being' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectorListAccess().getBeingKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorListAccess().getSelectorsSelectorListDefParserRuleCall_0_1_0()); 
	    }
		lv_selectors_1_0=ruleSelectorListDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorListRule());
	        }
       		set(
       			$current, 
       			"selectors",
        		lv_selectors_1_0, 
        		"SelectorListDef");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectorListAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorListAccess().getSelectorsSelectorListDefParserRuleCall_1_1_0()); 
	    }
		lv_selectors_3_0=ruleSelectorListDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorListRule());
	        }
       		set(
       			$current, 
       			"selectors",
        		lv_selectors_3_0, 
        		"SelectorListDef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectorListAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleSelectorListDef
entryRuleSelectorListDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectorListDefRule()); }
	 iv_ruleSelectorListDef=ruleSelectorListDef 
	 { $current=$iv_ruleSelectorListDef.current; } 
	 EOF 
;

// Rule SelectorListDef
ruleSelectorListDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorListDefAccess().getSelectorsSelectorParserRuleCall_0_0()); 
	    }
		lv_selectors_0_0=ruleSelector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorListDefRule());
	        }
       		add(
       			$current, 
       			"selectors",
        		lv_selectors_0_0, 
        		"Selector");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectorListDefAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorListDefAccess().getSelectorsSelectorParserRuleCall_1_1_0()); 
	    }
		lv_selectors_2_0=ruleSelector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorListDefRule());
	        }
       		add(
       			$current, 
       			"selectors",
        		lv_selectors_2_0, 
        		"Selector");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	 iv_ruleSelector=ruleSelector 
	 { $current=$iv_ruleSelector.current; } 
	 EOF 
;

// Rule Selector
ruleSelector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_type_0_0=RULE_ID
		{
			newLeafNode(lv_type_0_0, grammarAccess.getSelectorAccess().getTypeIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRulePredicateExpression
entryRulePredicateExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateExpressionRule()); }
	 iv_rulePredicateExpression=rulePredicateExpression 
	 { $current=$iv_rulePredicateExpression.current; } 
	 EOF 
;

// Rule PredicateExpression
rulePredicateExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getPredicateExpressionAccess().getAndExpressionParserRuleCall()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getOrExpressionParserRuleCall_0()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpressionLhsAction_1_0(),
            $current);
    }
)(	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getAndKeyword_1_1_0());
    }

    |	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAndExpressionAccess().getCommaKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRhsOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rhs_4_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getImpliesExpressionParserRuleCall_0()); 
    }
    this_ImpliesExpression_0=ruleImpliesExpression
    { 
        $current = $this_ImpliesExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOrExpressionLhsAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRhsImpliesExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rhs_3_0=ruleImpliesExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"ImpliesExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesExpressionRule()); }
	 iv_ruleImpliesExpression=ruleImpliesExpression 
	 { $current=$iv_ruleImpliesExpression.current; } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getLhsPrimaryExpressionParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLhsAction_1_0(),
            $current);
    }
)(	otherlv_2='implies' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImpliesExpressionAccess().getImpliesKeyword_1_1_0());
    }

    |	otherlv_3='=>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImpliesExpressionAccess().getEqualsSignGreaterThanSignKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getRhsPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rhs_4_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_negated_0_0=	'not' 
    {
        newLeafNode(lv_negated_0_0, grammarAccess.getPrimaryExpressionAccess().getNegatedNotKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "negated", true, "not");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCallPredicateCallParserRuleCall_1_0_0()); 
	    }
		lv_call_1_0=rulePredicateCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_1_0, 
        		"PredicateCall");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getInnerPredicateExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_inner_3_0=rulePredicateExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"inner",
        		lv_inner_3_0, 
        		"PredicateExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_1_2());
    }
)))
;





// Entry rule entryRulePredicateCall
entryRulePredicateCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateCallRule()); }
	 iv_rulePredicateCall=rulePredicateCall 
	 { $current=$iv_rulePredicateCall.current; } 
	 EOF 
;

// Rule PredicateCall
rulePredicateCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getPredicateCallAccess().getPropertyRelationPredicateParserRuleCall_0_0()); 
    }
    this_PropertyRelationPredicate_0=rulePropertyRelationPredicate
    { 
        $current = $this_PropertyRelationPredicate_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateCallAccess().getDefinitionSentencePredicateParserRuleCall_0_1()); 
    }
    this_DefinitionSentencePredicate_1=ruleDefinitionSentencePredicate
    { 
        $current = $this_DefinitionSentencePredicate_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateCallAccess().getPredicateReferenceParserRuleCall_0_2()); 
    }
    this_PredicateReference_2=rulePredicateReference
    { 
        $current = $this_PredicateReference_2.current; 
        afterParserOrEnumRuleCall();
    }
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredicateCallAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		lv_label_4_0=RULE_ID
		{
			newLeafNode(lv_label_4_0, grammarAccess.getPredicateCallAccess().getLabelIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_4_0, 
        		"ID");
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPredicateCallAccess().getRightSquareBracketKeyword_1_2());
    }
)?)
;





// Entry rule entryRulePropertyRelationPredicate
entryRulePropertyRelationPredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRelationPredicateRule()); }
	 iv_rulePropertyRelationPredicate=rulePropertyRelationPredicate 
	 { $current=$iv_rulePropertyRelationPredicate.current; } 
	 EOF 
;

// Rule PropertyRelationPredicate
rulePropertyRelationPredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyRelationPredicateAccess().getLhsPropertyExpressionParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRelationPredicateRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyRelationPredicateAccess().getRelationPropertyRelationEnumRuleCall_1_0()); 
	    }
		lv_relation_1_0=rulePropertyRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRelationPredicateRule());
	        }
       		set(
       			$current, 
       			"relation",
        		lv_relation_1_0, 
        		"PropertyRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyRelationPredicateAccess().getRhsPropertyExpressionParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRelationPredicateRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefinitionSentencePredicate
entryRuleDefinitionSentencePredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionSentencePredicateRule()); }
	 iv_ruleDefinitionSentencePredicate=ruleDefinitionSentencePredicate 
	 { $current=$iv_ruleDefinitionSentencePredicate.current; } 
	 EOF 
;

// Rule DefinitionSentencePredicate
ruleDefinitionSentencePredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSentencePredicateAccess().getSentenceDefinitionSentenceParserRuleCall_0()); 
	    }
		lv_sentence_0_0=ruleDefinitionSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSentencePredicateRule());
	        }
       		set(
       			$current, 
       			"sentence",
        		lv_sentence_0_0, 
        		"DefinitionSentence");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePredicateReference
entryRulePredicateReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateReferenceRule()); }
	 iv_rulePredicateReference=rulePredicateReference 
	 { $current=$iv_rulePredicateReference.current; } 
	 EOF 
;

// Rule PredicateReference
rulePredicateReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getPredicateReferenceAccess().getReferencePredicateDefinitionSentenceCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateReferenceAccess().getArgumentsArgumentListParserRuleCall_1_0()); 
	    }
		lv_arguments_1_0=ruleArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateReferenceRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_1_0, 
        		"ArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getNodeNodeDefinitionParserRuleCall_0()); 
	    }
		lv_node_0_0=ruleNodeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"node",
        		lv_node_0_0, 
        		"NodeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_0_0()); 
	    }
		lv_parameters_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_1_0()); 
	    }
		lv_parameters_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getArgumentAccess().getNodeNodeDefinitionCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleArgumentList
entryRuleArgumentList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); }
	 iv_ruleArgumentList=ruleArgumentList 
	 { $current=$iv_ruleArgumentList.current; } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_0_0()); 
	    }
		lv_arguments_0_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentListRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_0_0, 
        		"Argument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentListRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"Argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getReferencePropertyReferenceExpressionParserRuleCall_0_0()); 
	    }
		lv_reference_0_0=rulePropertyReferenceExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_0_0, 
        		"PropertyReferenceExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='becomes' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getBecomesKeyword_1_0());
    }

    |	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionPropertyExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_3_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssignmentList
entryRuleAssignmentList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentListRule()); }
	 iv_ruleAssignmentList=ruleAssignmentList 
	 { $current=$iv_ruleAssignmentList.current; } 
	 EOF 
;

// Rule AssignmentList
ruleAssignmentList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentListAccess().getAssignmentsAssignmentParserRuleCall_0_0()); 
	    }
		lv_assignments_0_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentListRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_0_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentListAccess().getAssignmentsAssignmentParserRuleCall_1_1_0()); 
	    }
		lv_assignments_2_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentListRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_2_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleQuantification
entryRuleQuantification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantificationRule()); }
	 iv_ruleQuantification=ruleQuantification 
	 { $current=$iv_ruleQuantification.current; } 
	 EOF 
;

// Rule Quantification
ruleQuantification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQuantificationAccess().getQuantorQuantorEnumRuleCall_0_0()); 
	    }
		lv_quantor_0_0=ruleQuantor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantificationRule());
	        }
       		set(
       			$current, 
       			"quantor",
        		lv_quantor_0_0, 
        		"Quantor");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantificationAccess().getNodeNodeDefinitionParserRuleCall_1_0()); 
	    }
		lv_node_1_0=ruleNodeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantificationRule());
	        }
       		set(
       			$current, 
       			"node",
        		lv_node_1_0, 
        		"NodeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuantificationAccess().getInKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuantificationRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getQuantificationAccess().getNodeSetNodeDefinitionCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleQuantificationList
entryRuleQuantificationList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantificationListRule()); }
	 iv_ruleQuantificationList=ruleQuantificationList 
	 { $current=$iv_ruleQuantificationList.current; } 
	 EOF 
;

// Rule QuantificationList
ruleQuantificationList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQuantificationListAccess().getQuantificationsQuantificationParserRuleCall_0_0()); 
	    }
		lv_quantifications_0_0=ruleQuantification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantificationListRule());
	        }
       		add(
       			$current, 
       			"quantifications",
        		lv_quantifications_0_0, 
        		"Quantification");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuantificationListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantificationListAccess().getQuantificationsQuantificationParserRuleCall_1_1_0()); 
	    }
		lv_quantifications_2_0=ruleQuantification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantificationListRule());
	        }
       		add(
       			$current, 
       			"quantifications",
        		lv_quantifications_2_0, 
        		"Quantification");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePropertyExpression
entryRulePropertyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyExpressionRule()); }
	 iv_rulePropertyExpression=rulePropertyExpression 
	 { $current=$iv_rulePropertyExpression.current; } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getPropertyValueExpressionParserRuleCall_0()); 
    }
    this_PropertyValueExpression_0=rulePropertyValueExpression
    { 
        $current = $this_PropertyValueExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getPropertyReferenceExpressionParserRuleCall_1()); 
    }
    this_PropertyReferenceExpression_1=rulePropertyReferenceExpression
    { 
        $current = $this_PropertyReferenceExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePropertyValueExpression
entryRulePropertyValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyValueExpressionRule()); }
	 iv_rulePropertyValueExpression=rulePropertyValueExpression 
	 { $current=$iv_rulePropertyValueExpression.current; } 
	 EOF 
;

// Rule PropertyValueExpression
rulePropertyValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='v' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyValueExpressionAccess().getVKeyword_0());
    }
(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getPropertyValueExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyValueExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRulePropertyReferenceExpression
entryRulePropertyReferenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyReferenceExpressionRule()); }
	 iv_rulePropertyReferenceExpression=rulePropertyReferenceExpression 
	 { $current=$iv_rulePropertyReferenceExpression.current; } 
	 EOF 
;

// Rule PropertyReferenceExpression
rulePropertyReferenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='n' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyReferenceExpressionAccess().getNKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyReferenceExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getPropertyReferenceExpressionAccess().getNodeNodeDefinitionCrossReference_1_0()); 
	}

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyReferenceExpressionAccess().getFullStopKeyword_2());
    }
(
(
		lv_Property_3_0=RULE_ID
		{
			newLeafNode(lv_Property_3_0, grammarAccess.getPropertyReferenceExpressionAccess().getPropertyIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyReferenceExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"Property",
        		lv_Property_3_0, 
        		"ID");
	    }

)
))
;





// Rule Quantor
ruleQuantor returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='each' 
	{
        $current = grammarAccess.getQuantorAccess().getEachEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getQuantorAccess().getEachEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='any' 
	{
        $current = grammarAccess.getQuantorAccess().getAnyEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getQuantorAccess().getAnyEnumLiteralDeclaration_1()); 
    }
));



// Rule RelationQualifier
ruleRelationQualifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='must have' 
	{
        $current = grammarAccess.getRelationQualifierAccess().getMustEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationQualifierAccess().getMustEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='must not have' 
	{
        $current = grammarAccess.getRelationQualifierAccess().getMustNotEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationQualifierAccess().getMustNotEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='can have' 
	{
        $current = grammarAccess.getRelationQualifierAccess().getCanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationQualifierAccess().getCanEnumLiteralDeclaration_2()); 
    }
));



// Rule Axis
ruleAxis returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='parent' 
	{
        $current = grammarAccess.getAxisAccess().getParentEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAxisAccess().getParentEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='child' 
	{
        $current = grammarAccess.getAxisAccess().getChildEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAxisAccess().getChildEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='ancestor' 
	{
        $current = grammarAccess.getAxisAccess().getAncestorEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAxisAccess().getAncestorEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='descendant' 
	{
        $current = grammarAccess.getAxisAccess().getDescendantEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAxisAccess().getDescendantEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='multiple parents' 
	{
        $current = grammarAccess.getAxisAccess().getParentsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAxisAccess().getParentsEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='multiple children' 
	{
        $current = grammarAccess.getAxisAccess().getChildrenEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAxisAccess().getChildrenEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='multiple ancestors' 
	{
        $current = grammarAccess.getAxisAccess().getAncestorsEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAxisAccess().getAncestorsEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='multiple descendants' 
	{
        $current = grammarAccess.getAxisAccess().getDescendantsEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getAxisAccess().getDescendantsEnumLiteralDeclaration_7()); 
    }
));



// Rule PropertyRelation
rulePropertyRelation returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='equals' 
	{
        $current = grammarAccess.getPropertyRelationAccess().getEqualsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPropertyRelationAccess().getEqualsEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='not equals' 
	{
        $current = grammarAccess.getPropertyRelationAccess().getNotEqualsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPropertyRelationAccess().getNotEqualsEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='greater than' 
	{
        $current = grammarAccess.getPropertyRelationAccess().getGreaterEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPropertyRelationAccess().getGreaterEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='lesser than' 
	{
        $current = grammarAccess.getPropertyRelationAccess().getLesserEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPropertyRelationAccess().getLesserEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='greater or equals than' 
	{
        $current = grammarAccess.getPropertyRelationAccess().getGreaterEqualsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPropertyRelationAccess().getGreaterEqualsEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='lesser or equals than' 
	{
        $current = grammarAccess.getPropertyRelationAccess().getLesserEqualsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getPropertyRelationAccess().getLesserEqualsEnumLiteralDeclaration_5()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


