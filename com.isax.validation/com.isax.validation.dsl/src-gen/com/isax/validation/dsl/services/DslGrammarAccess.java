/*
 * generated by Xtext
 */
package com.isax.validation.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validator");
		private final Assignment cSentencesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSentencesSentenceParserRuleCall_0 = (RuleCall)cSentencesAssignment.eContents().get(0);
		
		//Validator:
		//	sentences+=Sentence+;
		@Override public ParserRule getRule() { return rule; }

		//sentences+=Sentence+
		public Assignment getSentencesAssignment() { return cSentencesAssignment; }

		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_0() { return cSentencesSentenceParserRuleCall_0; }
	}

	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartOnSentenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionSentenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstraintSentenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPredicateDefinitionSentenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Sentence:
		//	StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence;
		@Override public ParserRule getRule() { return rule; }

		//StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence
		public Alternatives getAlternatives() { return cAlternatives; }

		//StartOnSentence
		public RuleCall getStartOnSentenceParserRuleCall_0() { return cStartOnSentenceParserRuleCall_0; }

		//DefinitionSentence
		public RuleCall getDefinitionSentenceParserRuleCall_1() { return cDefinitionSentenceParserRuleCall_1; }

		//ConstraintSentence
		public RuleCall getConstraintSentenceParserRuleCall_2() { return cConstraintSentenceParserRuleCall_2; }

		//PredicateDefinitionSentence
		public RuleCall getPredicateDefinitionSentenceParserRuleCall_3() { return cPredicateDefinitionSentenceParserRuleCall_3; }
	}

	public class StartOnSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartOnSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionNodeDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		
		//StartOnSentence:
		//	"start on" definition=NodeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//"start on" definition=NodeDefinition
		public Group getGroup() { return cGroup; }

		//"start on"
		public Keyword getStartOnKeyword_0() { return cStartOnKeyword_0; }

		//definition=NodeDefinition
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//NodeDefinition
		public RuleCall getDefinitionNodeDefinitionParserRuleCall_1_0() { return cDefinitionNodeDefinitionParserRuleCall_1_0; }
	}

	public class DefinitionSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cQuantificationAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cQuantificationQuantificationParserRuleCall_0_0_0 = (RuleCall)cQuantificationAssignment_0_0.eContents().get(0);
		private final Assignment cNodeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cNodeNodeDefinitionCrossReference_0_1_0 = (CrossReference)cNodeAssignment_0_1.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_0_1_0.eContents().get(1);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierRelationQualifierEnumRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetTargetDefinitionParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		
		//DefinitionSentence:
		//	(quantification=Quantification | node=[NodeDefinition]) qualifier=RelationQualifier target=TargetDefinition;
		@Override public ParserRule getRule() { return rule; }

		//(quantification=Quantification | node=[NodeDefinition]) qualifier=RelationQualifier target=TargetDefinition
		public Group getGroup() { return cGroup; }

		//quantification=Quantification | node=[NodeDefinition]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//quantification=Quantification
		public Assignment getQuantificationAssignment_0_0() { return cQuantificationAssignment_0_0; }

		//Quantification
		public RuleCall getQuantificationQuantificationParserRuleCall_0_0_0() { return cQuantificationQuantificationParserRuleCall_0_0_0; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_0_1() { return cNodeAssignment_0_1; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_0_1_0() { return cNodeNodeDefinitionCrossReference_0_1_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1; }

		//qualifier=RelationQualifier
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//RelationQualifier
		public RuleCall getQualifierRelationQualifierEnumRuleCall_1_0() { return cQualifierRelationQualifierEnumRuleCall_1_0; }

		//target=TargetDefinition
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//TargetDefinition
		public RuleCall getTargetTargetDefinitionParserRuleCall_2_0() { return cTargetTargetDefinitionParserRuleCall_2_0; }
	}

	public class ConstraintSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantificationsQuantificationListParserRuleCall_1_0 = (RuleCall)cQuantificationsAssignment_1.eContents().get(0);
		private final Assignment cNodesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodesNodeReferenceListParserRuleCall_2_0 = (RuleCall)cNodesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cHoldsThatKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicatePredicateExpressionParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//ConstraintSentence:
		//	"for" quantifications=QuantificationList? nodes=NodeReferenceList? ("holds that" | ":")
		//	predicate=PredicateExpression;
		@Override public ParserRule getRule() { return rule; }

		//"for" quantifications=QuantificationList? nodes=NodeReferenceList? ("holds that" | ":") predicate=PredicateExpression
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//quantifications=QuantificationList?
		public Assignment getQuantificationsAssignment_1() { return cQuantificationsAssignment_1; }

		//QuantificationList
		public RuleCall getQuantificationsQuantificationListParserRuleCall_1_0() { return cQuantificationsQuantificationListParserRuleCall_1_0; }

		//nodes=NodeReferenceList?
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }

		//NodeReferenceList
		public RuleCall getNodesNodeReferenceListParserRuleCall_2_0() { return cNodesNodeReferenceListParserRuleCall_2_0; }

		//"holds that" | ":"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"holds that"
		public Keyword getHoldsThatKeyword_3_0() { return cHoldsThatKeyword_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//predicate=PredicateExpression
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }

		//PredicateExpression
		public RuleCall getPredicatePredicateExpressionParserRuleCall_4_0() { return cPredicatePredicateExpressionParserRuleCall_4_0; }
	}

	public class PredicateDefinitionSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateDefinitionSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicatePredicateExpressionParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//PredicateDefinitionSentence:
		//	"define" name=ID parameters=ParameterList? ("as" | ":") predicate=PredicateExpression;
		@Override public ParserRule getRule() { return rule; }

		//"define" name=ID parameters=ParameterList? ("as" | ":") predicate=PredicateExpression
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }

		//"as" | ":"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"as"
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//predicate=PredicateExpression
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }

		//PredicateExpression
		public RuleCall getPredicatePredicateExpressionParserRuleCall_4_0() { return cPredicatePredicateExpressionParserRuleCall_4_0; }
	}

	public class NodeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cCollectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCollectionAsteriskKeyword_1_0 = (Keyword)cCollectionAssignment_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectorsSelectorListParserRuleCall_2_0 = (RuleCall)cSelectorsAssignment_2.eContents().get(0);
		
		//NodeDefinition:
		//	name=ID collection?="*"? selectors=SelectorList?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID collection?="*"? selectors=SelectorList?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//collection?="*"?
		public Assignment getCollectionAssignment_1() { return cCollectionAssignment_1; }

		//"*"
		public Keyword getCollectionAsteriskKeyword_1_0() { return cCollectionAsteriskKeyword_1_0; }

		//selectors=SelectorList?
		public Assignment getSelectorsAssignment_2() { return cSelectorsAssignment_2; }

		//SelectorList
		public RuleCall getSelectorsSelectorListParserRuleCall_2_0() { return cSelectorsSelectorListParserRuleCall_2_0; }
	}

	public class NodeReferenceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeReferenceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNodesNodeDefinitionCrossReference_0_0 = (CrossReference)cNodesAssignment_0.eContents().get(0);
		private final RuleCall cNodesNodeDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cNodesNodeDefinitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNodesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNodesNodeDefinitionCrossReference_1_1_0 = (CrossReference)cNodesAssignment_1_1.eContents().get(0);
		private final RuleCall cNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNodesNodeDefinitionCrossReference_1_1_0.eContents().get(1);
		
		//NodeReferenceList:
		//	nodes+=[NodeDefinition] ("," nodes+=[NodeDefinition])*;
		@Override public ParserRule getRule() { return rule; }

		//nodes+=[NodeDefinition] ("," nodes+=[NodeDefinition])*
		public Group getGroup() { return cGroup; }

		//nodes+=[NodeDefinition]
		public Assignment getNodesAssignment_0() { return cNodesAssignment_0; }

		//[NodeDefinition]
		public CrossReference getNodesNodeDefinitionCrossReference_0_0() { return cNodesNodeDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getNodesNodeDefinitionIDTerminalRuleCall_0_0_1() { return cNodesNodeDefinitionIDTerminalRuleCall_0_0_1; }

		//("," nodes+=[NodeDefinition])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//nodes+=[NodeDefinition]
		public Assignment getNodesAssignment_1_1() { return cNodesAssignment_1_1; }

		//[NodeDefinition]
		public CrossReference getNodesNodeDefinitionCrossReference_1_1_0() { return cNodesNodeDefinitionCrossReference_1_1_0; }

		//ID
		public RuleCall getNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1() { return cNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1; }
	}

	public class TargetDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAxisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAxisAxisEnumRuleCall_0_0 = (RuleCall)cAxisAssignment_0.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionNodeDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhereHoldsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cPredicateAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cPredicatePredicateExpressionParserRuleCall_2_2_0 = (RuleCall)cPredicateAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithPropertyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAssignmentsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAssignmentsAssignmentListParserRuleCall_3_2_0 = (RuleCall)cAssignmentsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//TargetDefinition:
		//	axis=Axis definition=NodeDefinition ("where holds" "{" predicate=PredicateExpression "}")? ("with property" "{"
		//	assignments=AssignmentList "}")?;
		@Override public ParserRule getRule() { return rule; }

		//axis=Axis definition=NodeDefinition ("where holds" "{" predicate=PredicateExpression "}")? ("with property" "{"
		//assignments=AssignmentList "}")?
		public Group getGroup() { return cGroup; }

		//axis=Axis
		public Assignment getAxisAssignment_0() { return cAxisAssignment_0; }

		//Axis
		public RuleCall getAxisAxisEnumRuleCall_0_0() { return cAxisAxisEnumRuleCall_0_0; }

		//definition=NodeDefinition
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//NodeDefinition
		public RuleCall getDefinitionNodeDefinitionParserRuleCall_1_0() { return cDefinitionNodeDefinitionParserRuleCall_1_0; }

		//("where holds" "{" predicate=PredicateExpression "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"where holds"
		public Keyword getWhereHoldsKeyword_2_0() { return cWhereHoldsKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//predicate=PredicateExpression
		public Assignment getPredicateAssignment_2_2() { return cPredicateAssignment_2_2; }

		//PredicateExpression
		public RuleCall getPredicatePredicateExpressionParserRuleCall_2_2_0() { return cPredicatePredicateExpressionParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//("with property" "{" assignments=AssignmentList "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"with property"
		public Keyword getWithPropertyKeyword_3_0() { return cWithPropertyKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//assignments=AssignmentList
		public Assignment getAssignmentsAssignment_3_2() { return cAssignmentsAssignment_3_2; }

		//AssignmentList
		public RuleCall getAssignmentsAssignmentListParserRuleCall_3_2_0() { return cAssignmentsAssignmentListParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class SelectorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectorList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBeingKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSelectorsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSelectorsSelectorListDefParserRuleCall_0_1_0 = (RuleCall)cSelectorsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorListDefParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SelectorList:
		//	"being" selectors=SelectorListDef | "(" selectors=SelectorListDef ")";
		@Override public ParserRule getRule() { return rule; }

		//"being" selectors=SelectorListDef | "(" selectors=SelectorListDef ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"being" selectors=SelectorListDef
		public Group getGroup_0() { return cGroup_0; }

		//"being"
		public Keyword getBeingKeyword_0_0() { return cBeingKeyword_0_0; }

		//selectors=SelectorListDef
		public Assignment getSelectorsAssignment_0_1() { return cSelectorsAssignment_0_1; }

		//SelectorListDef
		public RuleCall getSelectorsSelectorListDefParserRuleCall_0_1_0() { return cSelectorsSelectorListDefParserRuleCall_0_1_0; }

		//"(" selectors=SelectorListDef ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//selectors=SelectorListDef
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//SelectorListDef
		public RuleCall getSelectorsSelectorListDefParserRuleCall_1_1_0() { return cSelectorsSelectorListDefParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class SelectorListDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectorListDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorsSelectorParserRuleCall_0_0 = (RuleCall)cSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		
		//SelectorListDef:
		//	selectors+=Selector ("or" selectors+=Selector)*;
		@Override public ParserRule getRule() { return rule; }

		//selectors+=Selector ("or" selectors+=Selector)*
		public Group getGroup() { return cGroup; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_0() { return cSelectorsAssignment_0; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_0_0() { return cSelectorsSelectorParserRuleCall_0_0; }

		//("or" selectors+=Selector)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_1_0() { return cSelectorsSelectorParserRuleCall_1_1_0; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selector");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//Selector:
		//	type=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=ID
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0() { return cTypeIDTerminalRuleCall_0; }
	}

	public class PredicateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateExpression");
		private final RuleCall cAndExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PredicateExpression:
		//	AndExpression;
		@Override public ParserRule getRule() { return rule; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall() { return cAndExpressionParserRuleCall; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//AndExpression returns PredicateExpression:
		//	OrExpression ({AndExpression.lhs=current} ("and" | ",") rhs=OrExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//OrExpression ({AndExpression.lhs=current} ("and" | ",") rhs=OrExpression)*
		public Group getGroup() { return cGroup; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }

		//({AndExpression.lhs=current} ("and" | ",") rhs=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.lhs=current}
		public Action getAndExpressionLhsAction_1_0() { return cAndExpressionLhsAction_1_0; }

		//"and" | ","
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"and"
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//rhs=OrExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//OrExpression
		public RuleCall getRhsOrExpressionParserRuleCall_1_2_0() { return cRhsOrExpressionParserRuleCall_1_2_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsImpliesExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//OrExpression returns PredicateExpression:
		//	ImpliesExpression ({OrExpression.lhs=current} "or" rhs=ImpliesExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//ImpliesExpression ({OrExpression.lhs=current} "or" rhs=ImpliesExpression)*
		public Group getGroup() { return cGroup; }

		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_0() { return cImpliesExpressionParserRuleCall_0; }

		//({OrExpression.lhs=current} "or" rhs=ImpliesExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.lhs=current}
		public Action getOrExpressionLhsAction_1_0() { return cOrExpressionLhsAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//rhs=ImpliesExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//ImpliesExpression
		public RuleCall getRhsImpliesExpressionParserRuleCall_1_2_0() { return cRhsImpliesExpressionParserRuleCall_1_2_0; }
	}

	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPrimaryExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImpliesExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cImpliesKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//ImpliesExpression returns PredicateExpression:
		//	lhs=PrimaryExpression ({ImpliesExpression.lhs=current} ("implies" | "=>") rhs=PrimaryExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//lhs=PrimaryExpression ({ImpliesExpression.lhs=current} ("implies" | "=>") rhs=PrimaryExpression)?
		public Group getGroup() { return cGroup; }

		//lhs=PrimaryExpression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//PrimaryExpression
		public RuleCall getLhsPrimaryExpressionParserRuleCall_0_0() { return cLhsPrimaryExpressionParserRuleCall_0_0; }

		//({ImpliesExpression.lhs=current} ("implies" | "=>") rhs=PrimaryExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ImpliesExpression.lhs=current}
		public Action getImpliesExpressionLhsAction_1_0() { return cImpliesExpressionLhsAction_1_0; }

		//"implies" | "=>"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"implies"
		public Keyword getImpliesKeyword_1_1_0() { return cImpliesKeyword_1_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1_1; }

		//rhs=PrimaryExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getRhsPrimaryExpressionParserRuleCall_1_2_0() { return cRhsPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedNotKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCallAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCallPredicateCallParserRuleCall_1_0_0 = (RuleCall)cCallAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cInnerAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInnerPredicateExpressionParserRuleCall_1_1_1_0 = (RuleCall)cInnerAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//PrimaryExpression returns PredicateExpression:
		//	negated?="not"? (call=PredicateCall | "(" inner=PredicateExpression ")");
		@Override public ParserRule getRule() { return rule; }

		//negated?="not"? (call=PredicateCall | "(" inner=PredicateExpression ")")
		public Group getGroup() { return cGroup; }

		//negated?="not"?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }

		//"not"
		public Keyword getNegatedNotKeyword_0_0() { return cNegatedNotKeyword_0_0; }

		//call=PredicateCall | "(" inner=PredicateExpression ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//call=PredicateCall
		public Assignment getCallAssignment_1_0() { return cCallAssignment_1_0; }

		//PredicateCall
		public RuleCall getCallPredicateCallParserRuleCall_1_0_0() { return cCallPredicateCallParserRuleCall_1_0_0; }

		//"(" inner=PredicateExpression ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//inner=PredicateExpression
		public Assignment getInnerAssignment_1_1_1() { return cInnerAssignment_1_1_1; }

		//PredicateExpression
		public RuleCall getInnerPredicateExpressionParserRuleCall_1_1_1_0() { return cInnerPredicateExpressionParserRuleCall_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class PredicateCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPropertyRelationPredicateParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDefinitionSentencePredicateParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cPredicateReferenceParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLabelAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_1_0 = (RuleCall)cLabelAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PredicateCall:
		//	(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference) ("[" label=ID "]")?;
		@Override public ParserRule getRule() { return rule; }

		//(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference) ("[" label=ID "]")?
		public Group getGroup() { return cGroup; }

		//PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//PropertyRelationPredicate
		public RuleCall getPropertyRelationPredicateParserRuleCall_0_0() { return cPropertyRelationPredicateParserRuleCall_0_0; }

		//DefinitionSentencePredicate
		public RuleCall getDefinitionSentencePredicateParserRuleCall_0_1() { return cDefinitionSentencePredicateParserRuleCall_0_1; }

		//PredicateReference
		public RuleCall getPredicateReferenceParserRuleCall_0_2() { return cPredicateReferenceParserRuleCall_0_2; }

		//("[" label=ID "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//label=ID
		public Assignment getLabelAssignment_1_1() { return cLabelAssignment_1_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_1_0() { return cLabelIDTerminalRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class PropertyRelationPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyRelationPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPropertyExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationPropertyRelationEnumRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsPropertyExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//PropertyRelationPredicate:
		//	lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression;
		@Override public ParserRule getRule() { return rule; }

		//lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression
		public Group getGroup() { return cGroup; }

		//lhs=PropertyExpression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//PropertyExpression
		public RuleCall getLhsPropertyExpressionParserRuleCall_0_0() { return cLhsPropertyExpressionParserRuleCall_0_0; }

		//relation=PropertyRelation
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }

		//PropertyRelation
		public RuleCall getRelationPropertyRelationEnumRuleCall_1_0() { return cRelationPropertyRelationEnumRuleCall_1_0; }

		//rhs=PropertyExpression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//PropertyExpression
		public RuleCall getRhsPropertyExpressionParserRuleCall_2_0() { return cRhsPropertyExpressionParserRuleCall_2_0; }
	}

	public class DefinitionSentencePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionSentencePredicate");
		private final Assignment cSentenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSentenceDefinitionSentenceParserRuleCall_0 = (RuleCall)cSentenceAssignment.eContents().get(0);
		
		//DefinitionSentencePredicate:
		//	sentence=DefinitionSentence;
		@Override public ParserRule getRule() { return rule; }

		//sentence=DefinitionSentence
		public Assignment getSentenceAssignment() { return cSentenceAssignment; }

		//DefinitionSentence
		public RuleCall getSentenceDefinitionSentenceParserRuleCall_0() { return cSentenceDefinitionSentenceParserRuleCall_0; }
	}

	public class PredicateReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferencePredicateDefinitionSentenceCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1 = (RuleCall)cReferencePredicateDefinitionSentenceCrossReference_0_0.eContents().get(1);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsArgumentListParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		
		//// Don't handle function-like calls manually, use Xbase instead
		//PredicateReference:
		//	reference=[PredicateDefinitionSentence] arguments=ArgumentList;
		@Override public ParserRule getRule() { return rule; }

		//reference=[PredicateDefinitionSentence] arguments=ArgumentList
		public Group getGroup() { return cGroup; }

		//reference=[PredicateDefinitionSentence]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//[PredicateDefinitionSentence]
		public CrossReference getReferencePredicateDefinitionSentenceCrossReference_0_0() { return cReferencePredicateDefinitionSentenceCrossReference_0_0; }

		//ID
		public RuleCall getReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1() { return cReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1; }

		//arguments=ArgumentList
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//ArgumentList
		public RuleCall getArgumentsArgumentListParserRuleCall_1_0() { return cArgumentsArgumentListParserRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNodeNodeDefinitionParserRuleCall_0 = (RuleCall)cNodeAssignment.eContents().get(0);
		
		//Parameter:
		//	node=NodeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//node=NodeDefinition
		public Assignment getNodeAssignment() { return cNodeAssignment; }

		//NodeDefinition
		public RuleCall getNodeNodeDefinitionParserRuleCall_0() { return cNodeNodeDefinitionParserRuleCall_0; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	parameters+=Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameters+=Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_0() { return cParametersParameterParserRuleCall_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNodeNodeDefinitionCrossReference_0 = (CrossReference)cNodeAssignment.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_0.eContents().get(1);
		
		//Argument:
		//	node=[NodeDefinition];
		@Override public ParserRule getRule() { return rule; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment() { return cNodeAssignment; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_0() { return cNodeNodeDefinitionCrossReference_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_0_1; }
	}

	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		
		//ArgumentList:
		//	arguments+=Argument ("," arguments+=Argument)*;
		@Override public ParserRule getRule() { return rule; }

		//arguments+=Argument ("," arguments+=Argument)*
		public Group getGroup() { return cGroup; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_0_0() { return cArgumentsArgumentParserRuleCall_0_0; }

		//("," arguments+=Argument)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_1_0() { return cArgumentsArgumentParserRuleCall_1_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferencePropertyReferenceExpressionParserRuleCall_0_0 = (RuleCall)cReferenceAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cBecomesKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionPropertyExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//	reference=PropertyReferenceExpression ("becomes" | ":=") expression=PropertyExpression;
		@Override public ParserRule getRule() { return rule; }

		//reference=PropertyReferenceExpression ("becomes" | ":=") expression=PropertyExpression
		public Group getGroup() { return cGroup; }

		//reference=PropertyReferenceExpression
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//PropertyReferenceExpression
		public RuleCall getReferencePropertyReferenceExpressionParserRuleCall_0_0() { return cReferencePropertyReferenceExpressionParserRuleCall_0_0; }

		//"becomes" | ":="
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"becomes"
		public Keyword getBecomesKeyword_1_0() { return cBecomesKeyword_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }

		//expression=PropertyExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//PropertyExpression
		public RuleCall getExpressionPropertyExpressionParserRuleCall_2_0() { return cExpressionPropertyExpressionParserRuleCall_2_0; }
	}

	public class AssignmentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignmentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_0_0 = (RuleCall)cAssignmentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_1_1_0 = (RuleCall)cAssignmentsAssignment_1_1.eContents().get(0);
		
		//AssignmentList:
		//	assignments+=Assignment ("," assignments+=Assignment)*;
		@Override public ParserRule getRule() { return rule; }

		//assignments+=Assignment ("," assignments+=Assignment)*
		public Group getGroup() { return cGroup; }

		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_0() { return cAssignmentsAssignment_0; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_0_0() { return cAssignmentsAssignmentParserRuleCall_0_0; }

		//("," assignments+=Assignment)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_1_1() { return cAssignmentsAssignment_1_1; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_1_1_0() { return cAssignmentsAssignmentParserRuleCall_1_1_0; }
	}

	public class QuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantorQuantorEnumRuleCall_0_0 = (RuleCall)cQuantorAssignment_0.eContents().get(0);
		private final Assignment cNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeNodeDefinitionParserRuleCall_1_0 = (RuleCall)cNodeAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNodeSetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNodeSetNodeDefinitionCrossReference_3_0 = (CrossReference)cNodeSetAssignment_3.eContents().get(0);
		private final RuleCall cNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cNodeSetNodeDefinitionCrossReference_3_0.eContents().get(1);
		
		//Quantification:
		//	quantor=Quantor node=NodeDefinition "in" nodeSet=[NodeDefinition];
		@Override public ParserRule getRule() { return rule; }

		//quantor=Quantor node=NodeDefinition "in" nodeSet=[NodeDefinition]
		public Group getGroup() { return cGroup; }

		//quantor=Quantor
		public Assignment getQuantorAssignment_0() { return cQuantorAssignment_0; }

		//Quantor
		public RuleCall getQuantorQuantorEnumRuleCall_0_0() { return cQuantorQuantorEnumRuleCall_0_0; }

		//node=NodeDefinition
		public Assignment getNodeAssignment_1() { return cNodeAssignment_1; }

		//NodeDefinition
		public RuleCall getNodeNodeDefinitionParserRuleCall_1_0() { return cNodeNodeDefinitionParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//nodeSet=[NodeDefinition]
		public Assignment getNodeSetAssignment_3() { return cNodeSetAssignment_3; }

		//[NodeDefinition]
		public CrossReference getNodeSetNodeDefinitionCrossReference_3_0() { return cNodeSetNodeDefinitionCrossReference_3_0; }

		//ID
		public RuleCall getNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1() { return cNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1; }
	}

	public class QuantificationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuantificationList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantificationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantificationsQuantificationParserRuleCall_0_0 = (RuleCall)cQuantificationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cQuantificationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQuantificationsQuantificationParserRuleCall_1_1_0 = (RuleCall)cQuantificationsAssignment_1_1.eContents().get(0);
		
		//QuantificationList:
		//	quantifications+=Quantification ("," quantifications+=Quantification)*;
		@Override public ParserRule getRule() { return rule; }

		//quantifications+=Quantification ("," quantifications+=Quantification)*
		public Group getGroup() { return cGroup; }

		//quantifications+=Quantification
		public Assignment getQuantificationsAssignment_0() { return cQuantificationsAssignment_0; }

		//Quantification
		public RuleCall getQuantificationsQuantificationParserRuleCall_0_0() { return cQuantificationsQuantificationParserRuleCall_0_0; }

		//("," quantifications+=Quantification)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//quantifications+=Quantification
		public Assignment getQuantificationsAssignment_1_1() { return cQuantificationsAssignment_1_1; }

		//Quantification
		public RuleCall getQuantificationsQuantificationParserRuleCall_1_1_0() { return cQuantificationsQuantificationParserRuleCall_1_1_0; }
	}

	public class PropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PropertyExpression:
		//	PropertyValueExpression | PropertyReferenceExpression;
		@Override public ParserRule getRule() { return rule; }

		//PropertyValueExpression | PropertyReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyValueExpression
		public RuleCall getPropertyValueExpressionParserRuleCall_0() { return cPropertyValueExpressionParserRuleCall_0; }

		//PropertyReferenceExpression
		public RuleCall getPropertyReferenceExpressionParserRuleCall_1() { return cPropertyReferenceExpressionParserRuleCall_1; }
	}

	public class PropertyValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PropertyValueExpression:
		//	"v" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"v" value=STRING
		public Group getGroup() { return cGroup; }

		//"v"
		public Keyword getVKeyword_0() { return cVKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class PropertyReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNodeNodeDefinitionCrossReference_1_0 = (CrossReference)cNodeAssignment_1.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyIDTerminalRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		
		//PropertyReferenceExpression:
		//	"n" node=[NodeDefinition] "." Property=ID;
		@Override public ParserRule getRule() { return rule; }

		//"n" node=[NodeDefinition] "." Property=ID
		public Group getGroup() { return cGroup; }

		//"n"
		public Keyword getNKeyword_0() { return cNKeyword_0; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_1() { return cNodeAssignment_1; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_1_0() { return cNodeNodeDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_1_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//Property=ID
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }

		//ID
		public RuleCall getPropertyIDTerminalRuleCall_3_0() { return cPropertyIDTerminalRuleCall_3_0; }
	}
	
	
	public class QuantorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Quantor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEachEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEachEachKeyword_0_0 = (Keyword)cEachEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyAnyKeyword_1_0 = (Keyword)cAnyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Quantor:
		//	Each="each" | Any="any";
		public EnumRule getRule() { return rule; }

		//Each="each" | Any="any"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Each="each"
		public EnumLiteralDeclaration getEachEnumLiteralDeclaration_0() { return cEachEnumLiteralDeclaration_0; }

		//"each"
		public Keyword getEachEachKeyword_0_0() { return cEachEachKeyword_0_0; }

		//Any="any"
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_1() { return cAnyEnumLiteralDeclaration_1; }

		//"any"
		public Keyword getAnyAnyKeyword_1_0() { return cAnyAnyKeyword_1_0; }
	}

	public class RelationQualifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMustEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMustMustHaveKeyword_0_0 = (Keyword)cMustEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMustNotEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMustNotMustNotHaveKeyword_1_0 = (Keyword)cMustNotEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCanCanHaveKeyword_2_0 = (Keyword)cCanEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RelationQualifier:
		//	Must="must have" | MustNot="must not have" | Can="can have";
		public EnumRule getRule() { return rule; }

		//Must="must have" | MustNot="must not have" | Can="can have"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Must="must have"
		public EnumLiteralDeclaration getMustEnumLiteralDeclaration_0() { return cMustEnumLiteralDeclaration_0; }

		//"must have"
		public Keyword getMustMustHaveKeyword_0_0() { return cMustMustHaveKeyword_0_0; }

		//MustNot="must not have"
		public EnumLiteralDeclaration getMustNotEnumLiteralDeclaration_1() { return cMustNotEnumLiteralDeclaration_1; }

		//"must not have"
		public Keyword getMustNotMustNotHaveKeyword_1_0() { return cMustNotMustNotHaveKeyword_1_0; }

		//Can="can have"
		public EnumLiteralDeclaration getCanEnumLiteralDeclaration_2() { return cCanEnumLiteralDeclaration_2; }

		//"can have"
		public Keyword getCanCanHaveKeyword_2_0() { return cCanCanHaveKeyword_2_0; }
	}

	public class AxisElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Axis");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cParentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cParentParentKeyword_0_0 = (Keyword)cParentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cChildEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cChildChildKeyword_1_0 = (Keyword)cChildEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAncestorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAncestorAncestorKeyword_2_0 = (Keyword)cAncestorEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDescendantEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDescendantDescendantKeyword_3_0 = (Keyword)cDescendantEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cParentsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cParentsMultipleParentsKeyword_4_0 = (Keyword)cParentsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cChildrenEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cChildrenMultipleChildrenKeyword_5_0 = (Keyword)cChildrenEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAncestorsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAncestorsMultipleAncestorsKeyword_6_0 = (Keyword)cAncestorsEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDescendantsEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDescendantsMultipleDescendantsKeyword_7_0 = (Keyword)cDescendantsEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Axis:
		//	Parent="parent" | Child="child" | Ancestor="ancestor" | Descendant="descendant" | Parents="multiple parents" |
		//	Children="multiple children" | Ancestors="multiple ancestors" | Descendants="multiple descendants";
		public EnumRule getRule() { return rule; }

		//Parent="parent" | Child="child" | Ancestor="ancestor" | Descendant="descendant" | Parents="multiple parents" |
		//Children="multiple children" | Ancestors="multiple ancestors" | Descendants="multiple descendants"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Parent="parent"
		public EnumLiteralDeclaration getParentEnumLiteralDeclaration_0() { return cParentEnumLiteralDeclaration_0; }

		//"parent"
		public Keyword getParentParentKeyword_0_0() { return cParentParentKeyword_0_0; }

		//Child="child"
		public EnumLiteralDeclaration getChildEnumLiteralDeclaration_1() { return cChildEnumLiteralDeclaration_1; }

		//"child"
		public Keyword getChildChildKeyword_1_0() { return cChildChildKeyword_1_0; }

		//Ancestor="ancestor"
		public EnumLiteralDeclaration getAncestorEnumLiteralDeclaration_2() { return cAncestorEnumLiteralDeclaration_2; }

		//"ancestor"
		public Keyword getAncestorAncestorKeyword_2_0() { return cAncestorAncestorKeyword_2_0; }

		//Descendant="descendant"
		public EnumLiteralDeclaration getDescendantEnumLiteralDeclaration_3() { return cDescendantEnumLiteralDeclaration_3; }

		//"descendant"
		public Keyword getDescendantDescendantKeyword_3_0() { return cDescendantDescendantKeyword_3_0; }

		//Parents="multiple parents"
		public EnumLiteralDeclaration getParentsEnumLiteralDeclaration_4() { return cParentsEnumLiteralDeclaration_4; }

		//"multiple parents"
		public Keyword getParentsMultipleParentsKeyword_4_0() { return cParentsMultipleParentsKeyword_4_0; }

		//Children="multiple children"
		public EnumLiteralDeclaration getChildrenEnumLiteralDeclaration_5() { return cChildrenEnumLiteralDeclaration_5; }

		//"multiple children"
		public Keyword getChildrenMultipleChildrenKeyword_5_0() { return cChildrenMultipleChildrenKeyword_5_0; }

		//Ancestors="multiple ancestors"
		public EnumLiteralDeclaration getAncestorsEnumLiteralDeclaration_6() { return cAncestorsEnumLiteralDeclaration_6; }

		//"multiple ancestors"
		public Keyword getAncestorsMultipleAncestorsKeyword_6_0() { return cAncestorsMultipleAncestorsKeyword_6_0; }

		//Descendants="multiple descendants"
		public EnumLiteralDeclaration getDescendantsEnumLiteralDeclaration_7() { return cDescendantsEnumLiteralDeclaration_7; }

		//"multiple descendants"
		public Keyword getDescendantsMultipleDescendantsKeyword_7_0() { return cDescendantsMultipleDescendantsKeyword_7_0; }
	}

	public class PropertyRelationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyRelation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualsEqualsKeyword_0_0 = (Keyword)cEqualsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualsNotEqualsKeyword_1_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLesserEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLesserLesserThanKeyword_3_0 = (Keyword)cLesserEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterEqualsGreaterOrEqualsThanKeyword_4_0 = (Keyword)cGreaterEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLesserEqualsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLesserEqualsLesserOrEqualsThanKeyword_5_0 = (Keyword)cLesserEqualsEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum PropertyRelation:
		//	Equals="equals" | NotEquals="not equals" | Greater="greater than" | Lesser="lesser than" |
		//	GreaterEquals="greater or equals than" | LesserEquals="lesser or equals than";
		public EnumRule getRule() { return rule; }

		//Equals="equals" | NotEquals="not equals" | Greater="greater than" | Lesser="lesser than" |
		//GreaterEquals="greater or equals than" | LesserEquals="lesser or equals than"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Equals="equals"
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_0() { return cEqualsEnumLiteralDeclaration_0; }

		//"equals"
		public Keyword getEqualsEqualsKeyword_0_0() { return cEqualsEqualsKeyword_0_0; }

		//NotEquals="not equals"
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_1() { return cNotEqualsEnumLiteralDeclaration_1; }

		//"not equals"
		public Keyword getNotEqualsNotEqualsKeyword_1_0() { return cNotEqualsNotEqualsKeyword_1_0; }

		//Greater="greater than"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//"greater than"
		public Keyword getGreaterGreaterThanKeyword_2_0() { return cGreaterGreaterThanKeyword_2_0; }

		//Lesser="lesser than"
		public EnumLiteralDeclaration getLesserEnumLiteralDeclaration_3() { return cLesserEnumLiteralDeclaration_3; }

		//"lesser than"
		public Keyword getLesserLesserThanKeyword_3_0() { return cLesserLesserThanKeyword_3_0; }

		//GreaterEquals="greater or equals than"
		public EnumLiteralDeclaration getGreaterEqualsEnumLiteralDeclaration_4() { return cGreaterEqualsEnumLiteralDeclaration_4; }

		//"greater or equals than"
		public Keyword getGreaterEqualsGreaterOrEqualsThanKeyword_4_0() { return cGreaterEqualsGreaterOrEqualsThanKeyword_4_0; }

		//LesserEquals="lesser or equals than"
		public EnumLiteralDeclaration getLesserEqualsEnumLiteralDeclaration_5() { return cLesserEqualsEnumLiteralDeclaration_5; }

		//"lesser or equals than"
		public Keyword getLesserEqualsLesserOrEqualsThanKeyword_5_0() { return cLesserEqualsLesserOrEqualsThanKeyword_5_0; }
	}
	
	private final ValidatorElements pValidator;
	private final SentenceElements pSentence;
	private final StartOnSentenceElements pStartOnSentence;
	private final DefinitionSentenceElements pDefinitionSentence;
	private final ConstraintSentenceElements pConstraintSentence;
	private final PredicateDefinitionSentenceElements pPredicateDefinitionSentence;
	private final NodeDefinitionElements pNodeDefinition;
	private final NodeReferenceListElements pNodeReferenceList;
	private final TargetDefinitionElements pTargetDefinition;
	private final SelectorListElements pSelectorList;
	private final SelectorListDefElements pSelectorListDef;
	private final SelectorElements pSelector;
	private final PredicateExpressionElements pPredicateExpression;
	private final AndExpressionElements pAndExpression;
	private final OrExpressionElements pOrExpression;
	private final ImpliesExpressionElements pImpliesExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final PredicateCallElements pPredicateCall;
	private final PropertyRelationPredicateElements pPropertyRelationPredicate;
	private final DefinitionSentencePredicateElements pDefinitionSentencePredicate;
	private final PredicateReferenceElements pPredicateReference;
	private final ParameterElements pParameter;
	private final ParameterListElements pParameterList;
	private final ArgumentElements pArgument;
	private final ArgumentListElements pArgumentList;
	private final AssignmentElements pAssignment;
	private final AssignmentListElements pAssignmentList;
	private final QuantificationElements pQuantification;
	private final QuantificationListElements pQuantificationList;
	private final PropertyExpressionElements pPropertyExpression;
	private final PropertyValueExpressionElements pPropertyValueExpression;
	private final PropertyReferenceExpressionElements pPropertyReferenceExpression;
	private final QuantorElements unknownRuleQuantor;
	private final RelationQualifierElements unknownRuleRelationQualifier;
	private final AxisElements unknownRuleAxis;
	private final PropertyRelationElements unknownRulePropertyRelation;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pValidator = new ValidatorElements();
		this.pSentence = new SentenceElements();
		this.pStartOnSentence = new StartOnSentenceElements();
		this.pDefinitionSentence = new DefinitionSentenceElements();
		this.pConstraintSentence = new ConstraintSentenceElements();
		this.pPredicateDefinitionSentence = new PredicateDefinitionSentenceElements();
		this.pNodeDefinition = new NodeDefinitionElements();
		this.pNodeReferenceList = new NodeReferenceListElements();
		this.pTargetDefinition = new TargetDefinitionElements();
		this.pSelectorList = new SelectorListElements();
		this.pSelectorListDef = new SelectorListDefElements();
		this.pSelector = new SelectorElements();
		this.pPredicateExpression = new PredicateExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pPredicateCall = new PredicateCallElements();
		this.pPropertyRelationPredicate = new PropertyRelationPredicateElements();
		this.pDefinitionSentencePredicate = new DefinitionSentencePredicateElements();
		this.pPredicateReference = new PredicateReferenceElements();
		this.pParameter = new ParameterElements();
		this.pParameterList = new ParameterListElements();
		this.pArgument = new ArgumentElements();
		this.pArgumentList = new ArgumentListElements();
		this.pAssignment = new AssignmentElements();
		this.pAssignmentList = new AssignmentListElements();
		this.pQuantification = new QuantificationElements();
		this.pQuantificationList = new QuantificationListElements();
		this.pPropertyExpression = new PropertyExpressionElements();
		this.pPropertyValueExpression = new PropertyValueExpressionElements();
		this.pPropertyReferenceExpression = new PropertyReferenceExpressionElements();
		this.unknownRuleQuantor = new QuantorElements();
		this.unknownRuleRelationQualifier = new RelationQualifierElements();
		this.unknownRuleAxis = new AxisElements();
		this.unknownRulePropertyRelation = new PropertyRelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.isax.validation.dsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Validator:
	//	sentences+=Sentence+;
	public ValidatorElements getValidatorAccess() {
		return pValidator;
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}

	//Sentence:
	//	StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}

	//StartOnSentence:
	//	"start on" definition=NodeDefinition;
	public StartOnSentenceElements getStartOnSentenceAccess() {
		return pStartOnSentence;
	}
	
	public ParserRule getStartOnSentenceRule() {
		return getStartOnSentenceAccess().getRule();
	}

	//DefinitionSentence:
	//	(quantification=Quantification | node=[NodeDefinition]) qualifier=RelationQualifier target=TargetDefinition;
	public DefinitionSentenceElements getDefinitionSentenceAccess() {
		return pDefinitionSentence;
	}
	
	public ParserRule getDefinitionSentenceRule() {
		return getDefinitionSentenceAccess().getRule();
	}

	//ConstraintSentence:
	//	"for" quantifications=QuantificationList? nodes=NodeReferenceList? ("holds that" | ":")
	//	predicate=PredicateExpression;
	public ConstraintSentenceElements getConstraintSentenceAccess() {
		return pConstraintSentence;
	}
	
	public ParserRule getConstraintSentenceRule() {
		return getConstraintSentenceAccess().getRule();
	}

	//PredicateDefinitionSentence:
	//	"define" name=ID parameters=ParameterList? ("as" | ":") predicate=PredicateExpression;
	public PredicateDefinitionSentenceElements getPredicateDefinitionSentenceAccess() {
		return pPredicateDefinitionSentence;
	}
	
	public ParserRule getPredicateDefinitionSentenceRule() {
		return getPredicateDefinitionSentenceAccess().getRule();
	}

	//NodeDefinition:
	//	name=ID collection?="*"? selectors=SelectorList?;
	public NodeDefinitionElements getNodeDefinitionAccess() {
		return pNodeDefinition;
	}
	
	public ParserRule getNodeDefinitionRule() {
		return getNodeDefinitionAccess().getRule();
	}

	//NodeReferenceList:
	//	nodes+=[NodeDefinition] ("," nodes+=[NodeDefinition])*;
	public NodeReferenceListElements getNodeReferenceListAccess() {
		return pNodeReferenceList;
	}
	
	public ParserRule getNodeReferenceListRule() {
		return getNodeReferenceListAccess().getRule();
	}

	//TargetDefinition:
	//	axis=Axis definition=NodeDefinition ("where holds" "{" predicate=PredicateExpression "}")? ("with property" "{"
	//	assignments=AssignmentList "}")?;
	public TargetDefinitionElements getTargetDefinitionAccess() {
		return pTargetDefinition;
	}
	
	public ParserRule getTargetDefinitionRule() {
		return getTargetDefinitionAccess().getRule();
	}

	//SelectorList:
	//	"being" selectors=SelectorListDef | "(" selectors=SelectorListDef ")";
	public SelectorListElements getSelectorListAccess() {
		return pSelectorList;
	}
	
	public ParserRule getSelectorListRule() {
		return getSelectorListAccess().getRule();
	}

	//SelectorListDef:
	//	selectors+=Selector ("or" selectors+=Selector)*;
	public SelectorListDefElements getSelectorListDefAccess() {
		return pSelectorListDef;
	}
	
	public ParserRule getSelectorListDefRule() {
		return getSelectorListDefAccess().getRule();
	}

	//Selector:
	//	type=ID;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//PredicateExpression:
	//	AndExpression;
	public PredicateExpressionElements getPredicateExpressionAccess() {
		return pPredicateExpression;
	}
	
	public ParserRule getPredicateExpressionRule() {
		return getPredicateExpressionAccess().getRule();
	}

	//AndExpression returns PredicateExpression:
	//	OrExpression ({AndExpression.lhs=current} ("and" | ",") rhs=OrExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OrExpression returns PredicateExpression:
	//	ImpliesExpression ({OrExpression.lhs=current} "or" rhs=ImpliesExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//ImpliesExpression returns PredicateExpression:
	//	lhs=PrimaryExpression ({ImpliesExpression.lhs=current} ("implies" | "=>") rhs=PrimaryExpression)?;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	//PrimaryExpression returns PredicateExpression:
	//	negated?="not"? (call=PredicateCall | "(" inner=PredicateExpression ")");
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//PredicateCall:
	//	(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference) ("[" label=ID "]")?;
	public PredicateCallElements getPredicateCallAccess() {
		return pPredicateCall;
	}
	
	public ParserRule getPredicateCallRule() {
		return getPredicateCallAccess().getRule();
	}

	//PropertyRelationPredicate:
	//	lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression;
	public PropertyRelationPredicateElements getPropertyRelationPredicateAccess() {
		return pPropertyRelationPredicate;
	}
	
	public ParserRule getPropertyRelationPredicateRule() {
		return getPropertyRelationPredicateAccess().getRule();
	}

	//DefinitionSentencePredicate:
	//	sentence=DefinitionSentence;
	public DefinitionSentencePredicateElements getDefinitionSentencePredicateAccess() {
		return pDefinitionSentencePredicate;
	}
	
	public ParserRule getDefinitionSentencePredicateRule() {
		return getDefinitionSentencePredicateAccess().getRule();
	}

	//// Don't handle function-like calls manually, use Xbase instead
	//PredicateReference:
	//	reference=[PredicateDefinitionSentence] arguments=ArgumentList;
	public PredicateReferenceElements getPredicateReferenceAccess() {
		return pPredicateReference;
	}
	
	public ParserRule getPredicateReferenceRule() {
		return getPredicateReferenceAccess().getRule();
	}

	//Parameter:
	//	node=NodeDefinition;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterList:
	//	parameters+=Parameter ("," parameters+=Parameter)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Argument:
	//	node=[NodeDefinition];
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//ArgumentList:
	//	arguments+=Argument ("," arguments+=Argument)*;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//Assignment:
	//	reference=PropertyReferenceExpression ("becomes" | ":=") expression=PropertyExpression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//AssignmentList:
	//	assignments+=Assignment ("," assignments+=Assignment)*;
	public AssignmentListElements getAssignmentListAccess() {
		return pAssignmentList;
	}
	
	public ParserRule getAssignmentListRule() {
		return getAssignmentListAccess().getRule();
	}

	//Quantification:
	//	quantor=Quantor node=NodeDefinition "in" nodeSet=[NodeDefinition];
	public QuantificationElements getQuantificationAccess() {
		return pQuantification;
	}
	
	public ParserRule getQuantificationRule() {
		return getQuantificationAccess().getRule();
	}

	//QuantificationList:
	//	quantifications+=Quantification ("," quantifications+=Quantification)*;
	public QuantificationListElements getQuantificationListAccess() {
		return pQuantificationList;
	}
	
	public ParserRule getQuantificationListRule() {
		return getQuantificationListAccess().getRule();
	}

	//PropertyExpression:
	//	PropertyValueExpression | PropertyReferenceExpression;
	public PropertyExpressionElements getPropertyExpressionAccess() {
		return pPropertyExpression;
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//PropertyValueExpression:
	//	"v" value=STRING;
	public PropertyValueExpressionElements getPropertyValueExpressionAccess() {
		return pPropertyValueExpression;
	}
	
	public ParserRule getPropertyValueExpressionRule() {
		return getPropertyValueExpressionAccess().getRule();
	}

	//PropertyReferenceExpression:
	//	"n" node=[NodeDefinition] "." Property=ID;
	public PropertyReferenceExpressionElements getPropertyReferenceExpressionAccess() {
		return pPropertyReferenceExpression;
	}
	
	public ParserRule getPropertyReferenceExpressionRule() {
		return getPropertyReferenceExpressionAccess().getRule();
	}

	//enum Quantor:
	//	Each="each" | Any="any";
	public QuantorElements getQuantorAccess() {
		return unknownRuleQuantor;
	}
	
	public EnumRule getQuantorRule() {
		return getQuantorAccess().getRule();
	}

	//enum RelationQualifier:
	//	Must="must have" | MustNot="must not have" | Can="can have";
	public RelationQualifierElements getRelationQualifierAccess() {
		return unknownRuleRelationQualifier;
	}
	
	public EnumRule getRelationQualifierRule() {
		return getRelationQualifierAccess().getRule();
	}

	//enum Axis:
	//	Parent="parent" | Child="child" | Ancestor="ancestor" | Descendant="descendant" | Parents="multiple parents" |
	//	Children="multiple children" | Ancestors="multiple ancestors" | Descendants="multiple descendants";
	public AxisElements getAxisAccess() {
		return unknownRuleAxis;
	}
	
	public EnumRule getAxisRule() {
		return getAxisAccess().getRule();
	}

	//enum PropertyRelation:
	//	Equals="equals" | NotEquals="not equals" | Greater="greater than" | Lesser="lesser than" |
	//	GreaterEquals="greater or equals than" | LesserEquals="lesser or equals than";
	public PropertyRelationElements getPropertyRelationAccess() {
		return unknownRulePropertyRelation;
	}
	
	public EnumRule getPropertyRelationRule() {
		return getPropertyRelationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
