/*
 * generated by Xtext
 */
package com.isax.validation.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartOnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartOnStartOnSentenceParserRuleCall_0_0 = (RuleCall)cStartOnAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBodySentencesParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Assignment cPredicatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicatesPredicateDefinitionSentenceParserRuleCall_2_0 = (RuleCall)cPredicatesAssignment_2.eContents().get(0);
		
		//Validator:
		//	startOn=StartOnSentence body=BodySentences predicates+=PredicateDefinitionSentence*;
		@Override public ParserRule getRule() { return rule; }

		//startOn=StartOnSentence body=BodySentences predicates+=PredicateDefinitionSentence*
		public Group getGroup() { return cGroup; }

		//startOn=StartOnSentence
		public Assignment getStartOnAssignment_0() { return cStartOnAssignment_0; }

		//StartOnSentence
		public RuleCall getStartOnStartOnSentenceParserRuleCall_0_0() { return cStartOnStartOnSentenceParserRuleCall_0_0; }

		//body=BodySentences
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//BodySentences
		public RuleCall getBodyBodySentencesParserRuleCall_1_0() { return cBodyBodySentencesParserRuleCall_1_0; }

		//predicates+=PredicateDefinitionSentence*
		public Assignment getPredicatesAssignment_2() { return cPredicatesAssignment_2; }

		//PredicateDefinitionSentence
		public RuleCall getPredicatesPredicateDefinitionSentenceParserRuleCall_2_0() { return cPredicatesPredicateDefinitionSentenceParserRuleCall_2_0; }
	}

	public class BodySentencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodySentences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodySentencesAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSentencesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSentencesDefinitionSentenceParserRuleCall_1_0_0 = (RuleCall)cSentencesAssignment_1_0.eContents().get(0);
		private final Assignment cSentencesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSentencesConstraintSentenceParserRuleCall_1_1_0 = (RuleCall)cSentencesAssignment_1_1.eContents().get(0);
		
		//BodySentences:
		//	{BodySentences} (sentences+=DefinitionSentence | sentences+=ConstraintSentence)*;
		@Override public ParserRule getRule() { return rule; }

		//{BodySentences} (sentences+=DefinitionSentence | sentences+=ConstraintSentence)*
		public Group getGroup() { return cGroup; }

		//{BodySentences}
		public Action getBodySentencesAction_0() { return cBodySentencesAction_0; }

		//(sentences+=DefinitionSentence | sentences+=ConstraintSentence)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//sentences+=DefinitionSentence
		public Assignment getSentencesAssignment_1_0() { return cSentencesAssignment_1_0; }

		//DefinitionSentence
		public RuleCall getSentencesDefinitionSentenceParserRuleCall_1_0_0() { return cSentencesDefinitionSentenceParserRuleCall_1_0_0; }

		//sentences+=ConstraintSentence
		public Assignment getSentencesAssignment_1_1() { return cSentencesAssignment_1_1; }

		//ConstraintSentence
		public RuleCall getSentencesConstraintSentenceParserRuleCall_1_1_0() { return cSentencesConstraintSentenceParserRuleCall_1_1_0; }
	}

	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartOnSentenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionSentenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstraintSentenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPredicateDefinitionSentenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Sentence:
		//	StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence;
		@Override public ParserRule getRule() { return rule; }

		//StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence
		public Alternatives getAlternatives() { return cAlternatives; }

		//StartOnSentence
		public RuleCall getStartOnSentenceParserRuleCall_0() { return cStartOnSentenceParserRuleCall_0; }

		//DefinitionSentence
		public RuleCall getDefinitionSentenceParserRuleCall_1() { return cDefinitionSentenceParserRuleCall_1; }

		//ConstraintSentence
		public RuleCall getConstraintSentenceParserRuleCall_2() { return cConstraintSentenceParserRuleCall_2; }

		//PredicateDefinitionSentence
		public RuleCall getPredicateDefinitionSentenceParserRuleCall_3() { return cPredicateDefinitionSentenceParserRuleCall_3; }
	}

	public class StartOnSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartOnSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionNodeDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionAssignment_2.eContents().get(0);
		
		//StartOnSentence:
		//	"start" "on" definition=NodeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//"start" "on" definition=NodeDefinition
		public Group getGroup() { return cGroup; }

		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }

		//"on"
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }

		//definition=NodeDefinition
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//NodeDefinition
		public RuleCall getDefinitionNodeDefinitionParserRuleCall_2_0() { return cDefinitionNodeDefinitionParserRuleCall_2_0; }
	}

	public class DefinitionSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cQuantificationAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cQuantificationQuantificationParserRuleCall_0_0_0 = (RuleCall)cQuantificationAssignment_0_0.eContents().get(0);
		private final Assignment cNodeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cNodeNodeDefinitionCrossReference_0_1_0 = (CrossReference)cNodeAssignment_0_1.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_0_1_0.eContents().get(1);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierRelationQualifierEnumRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetTargetDefinitionParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		
		//DefinitionSentence:
		//	(quantification=Quantification | node=[NodeDefinition]) qualifier=RelationQualifier target=TargetDefinition;
		@Override public ParserRule getRule() { return rule; }

		//(quantification=Quantification | node=[NodeDefinition]) qualifier=RelationQualifier target=TargetDefinition
		public Group getGroup() { return cGroup; }

		//quantification=Quantification | node=[NodeDefinition]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//quantification=Quantification
		public Assignment getQuantificationAssignment_0_0() { return cQuantificationAssignment_0_0; }

		//Quantification
		public RuleCall getQuantificationQuantificationParserRuleCall_0_0_0() { return cQuantificationQuantificationParserRuleCall_0_0_0; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_0_1() { return cNodeAssignment_0_1; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_0_1_0() { return cNodeNodeDefinitionCrossReference_0_1_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1; }

		//qualifier=RelationQualifier
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//RelationQualifier
		public RuleCall getQualifierRelationQualifierEnumRuleCall_1_0() { return cQualifierRelationQualifierEnumRuleCall_1_0; }

		//target=TargetDefinition
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//TargetDefinition
		public RuleCall getTargetTargetDefinitionParserRuleCall_2_0() { return cTargetTargetDefinitionParserRuleCall_2_0; }
	}

	public class ConstraintSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantificationsQuantificationListParserRuleCall_1_0 = (RuleCall)cQuantificationsAssignment_1.eContents().get(0);
		private final Assignment cNodesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodesNodeReferenceListParserRuleCall_2_0 = (RuleCall)cNodesAssignment_2.eContents().get(0);
		private final Keyword cHoldsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicatePredicateExpressionParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//ConstraintSentence:
		//	"for" quantifications=QuantificationList? nodes=NodeReferenceList? "holds" predicate=PredicateExpression;
		@Override public ParserRule getRule() { return rule; }

		//"for" quantifications=QuantificationList? nodes=NodeReferenceList? "holds" predicate=PredicateExpression
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//quantifications=QuantificationList?
		public Assignment getQuantificationsAssignment_1() { return cQuantificationsAssignment_1; }

		//QuantificationList
		public RuleCall getQuantificationsQuantificationListParserRuleCall_1_0() { return cQuantificationsQuantificationListParserRuleCall_1_0; }

		//nodes=NodeReferenceList?
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }

		//NodeReferenceList
		public RuleCall getNodesNodeReferenceListParserRuleCall_2_0() { return cNodesNodeReferenceListParserRuleCall_2_0; }

		//"holds"
		public Keyword getHoldsKeyword_3() { return cHoldsKeyword_3; }

		//predicate=PredicateExpression
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }

		//PredicateExpression
		public RuleCall getPredicatePredicateExpressionParserRuleCall_4_0() { return cPredicatePredicateExpressionParserRuleCall_4_0; }
	}

	public class PredicateDefinitionSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateDefinitionSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBodySentencesParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PredicateDefinitionSentence:
		//	"define" name=ID parameters=ParameterList? "as" "{" body=BodySentences "}";
		@Override public ParserRule getRule() { return rule; }

		//"define" name=ID parameters=ParameterList? "as" "{" body=BodySentences "}"
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//body=BodySentences
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//BodySentences
		public RuleCall getBodyBodySentencesParserRuleCall_5_0() { return cBodyBodySentencesParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class NodeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cCollectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCollectionAsteriskKeyword_1_0 = (Keyword)cCollectionAssignment_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectorsSelectorListParserRuleCall_2_0 = (RuleCall)cSelectorsAssignment_2.eContents().get(0);
		
		//NodeDefinition:
		//	name=ID collection?="*"? selectors=SelectorList?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID collection?="*"? selectors=SelectorList?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//collection?="*"?
		public Assignment getCollectionAssignment_1() { return cCollectionAssignment_1; }

		//"*"
		public Keyword getCollectionAsteriskKeyword_1_0() { return cCollectionAsteriskKeyword_1_0; }

		//selectors=SelectorList?
		public Assignment getSelectorsAssignment_2() { return cSelectorsAssignment_2; }

		//SelectorList
		public RuleCall getSelectorsSelectorListParserRuleCall_2_0() { return cSelectorsSelectorListParserRuleCall_2_0; }
	}

	public class NodeReferenceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeReferenceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNodesNodeDefinitionCrossReference_0_0 = (CrossReference)cNodesAssignment_0.eContents().get(0);
		private final RuleCall cNodesNodeDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cNodesNodeDefinitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNodesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNodesNodeDefinitionCrossReference_1_1_0 = (CrossReference)cNodesAssignment_1_1.eContents().get(0);
		private final RuleCall cNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNodesNodeDefinitionCrossReference_1_1_0.eContents().get(1);
		
		//NodeReferenceList:
		//	nodes+=[NodeDefinition] ("," nodes+=[NodeDefinition])*;
		@Override public ParserRule getRule() { return rule; }

		//nodes+=[NodeDefinition] ("," nodes+=[NodeDefinition])*
		public Group getGroup() { return cGroup; }

		//nodes+=[NodeDefinition]
		public Assignment getNodesAssignment_0() { return cNodesAssignment_0; }

		//[NodeDefinition]
		public CrossReference getNodesNodeDefinitionCrossReference_0_0() { return cNodesNodeDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getNodesNodeDefinitionIDTerminalRuleCall_0_0_1() { return cNodesNodeDefinitionIDTerminalRuleCall_0_0_1; }

		//("," nodes+=[NodeDefinition])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//nodes+=[NodeDefinition]
		public Assignment getNodesAssignment_1_1() { return cNodesAssignment_1_1; }

		//[NodeDefinition]
		public CrossReference getNodesNodeDefinitionCrossReference_1_1_0() { return cNodesNodeDefinitionCrossReference_1_1_0; }

		//ID
		public RuleCall getNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1() { return cNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1; }
	}

	public class TargetDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAxisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAxisAxisEnumRuleCall_0_0 = (RuleCall)cAxisAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLocalAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLocalNodeDefinitionParserRuleCall_1_0_0 = (RuleCall)cLocalAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionNodeDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhereKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cBodyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBodyBodySentencesParserRuleCall_3_2_0 = (RuleCall)cBodyAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cThenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cThenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cThenXBlockExpressionParserRuleCall_4_1_0 = (RuleCall)cThenAssignment_4_1.eContents().get(0);
		
		//TargetDefinition:
		//	axis=Axis (local=NodeDefinition ":")? definition=NodeDefinition ("where" "{" body=BodySentences "}")? ("then"
		//	then=XBlockExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//axis=Axis (local=NodeDefinition ":")? definition=NodeDefinition ("where" "{" body=BodySentences "}")? ("then"
		//then=XBlockExpression)?
		public Group getGroup() { return cGroup; }

		//axis=Axis
		public Assignment getAxisAssignment_0() { return cAxisAssignment_0; }

		//Axis
		public RuleCall getAxisAxisEnumRuleCall_0_0() { return cAxisAxisEnumRuleCall_0_0; }

		//(local=NodeDefinition ":")?
		public Group getGroup_1() { return cGroup_1; }

		//local=NodeDefinition
		public Assignment getLocalAssignment_1_0() { return cLocalAssignment_1_0; }

		//NodeDefinition
		public RuleCall getLocalNodeDefinitionParserRuleCall_1_0_0() { return cLocalNodeDefinitionParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//definition=NodeDefinition
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//NodeDefinition
		public RuleCall getDefinitionNodeDefinitionParserRuleCall_2_0() { return cDefinitionNodeDefinitionParserRuleCall_2_0; }

		//("where" "{" body=BodySentences "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"where"
		public Keyword getWhereKeyword_3_0() { return cWhereKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//body=BodySentences
		public Assignment getBodyAssignment_3_2() { return cBodyAssignment_3_2; }

		//BodySentences
		public RuleCall getBodyBodySentencesParserRuleCall_3_2_0() { return cBodyBodySentencesParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//("then" then=XBlockExpression)?
		public Group getGroup_4() { return cGroup_4; }

		//"then"
		public Keyword getThenKeyword_4_0() { return cThenKeyword_4_0; }

		//then=XBlockExpression
		public Assignment getThenAssignment_4_1() { return cThenAssignment_4_1; }

		//XBlockExpression
		public RuleCall getThenXBlockExpressionParserRuleCall_4_1_0() { return cThenXBlockExpressionParserRuleCall_4_1_0; }
	}

	public class SelectorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectorList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBeingKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSelectorsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSelectorsSelectorListDefParserRuleCall_0_1_0 = (RuleCall)cSelectorsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorListDefParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SelectorList:
		//	"being" selectors=SelectorListDef | "(" selectors=SelectorListDef ")";
		@Override public ParserRule getRule() { return rule; }

		//"being" selectors=SelectorListDef | "(" selectors=SelectorListDef ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"being" selectors=SelectorListDef
		public Group getGroup_0() { return cGroup_0; }

		//"being"
		public Keyword getBeingKeyword_0_0() { return cBeingKeyword_0_0; }

		//selectors=SelectorListDef
		public Assignment getSelectorsAssignment_0_1() { return cSelectorsAssignment_0_1; }

		//SelectorListDef
		public RuleCall getSelectorsSelectorListDefParserRuleCall_0_1_0() { return cSelectorsSelectorListDefParserRuleCall_0_1_0; }

		//"(" selectors=SelectorListDef ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//selectors=SelectorListDef
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//SelectorListDef
		public RuleCall getSelectorsSelectorListDefParserRuleCall_1_1_0() { return cSelectorsSelectorListDefParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class SelectorListDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectorListDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorsSelectorParserRuleCall_0_0 = (RuleCall)cSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		
		//SelectorListDef:
		//	selectors+=Selector ("or" selectors+=Selector)*;
		@Override public ParserRule getRule() { return rule; }

		//selectors+=Selector ("or" selectors+=Selector)*
		public Group getGroup() { return cGroup; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_0() { return cSelectorsAssignment_0; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_0_0() { return cSelectorsSelectorParserRuleCall_0_0; }

		//("or" selectors+=Selector)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_1_0() { return cSelectorsSelectorParserRuleCall_1_1_0; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selector");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//Selector:
		//	type=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=ID
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0() { return cTypeIDTerminalRuleCall_0; }
	}

	public class PredicateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateExpression");
		private final RuleCall cAndExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PredicateExpression:
		//	AndExpression;
		@Override public ParserRule getRule() { return rule; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall() { return cAndExpressionParserRuleCall; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//AndExpression returns PredicateExpression:
		//	OrExpression ({AndExpression.lhs=current} ("and" | ",") rhs=OrExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//OrExpression ({AndExpression.lhs=current} ("and" | ",") rhs=OrExpression)*
		public Group getGroup() { return cGroup; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }

		//({AndExpression.lhs=current} ("and" | ",") rhs=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.lhs=current}
		public Action getAndExpressionLhsAction_1_0() { return cAndExpressionLhsAction_1_0; }

		//"and" | ","
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"and"
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//rhs=OrExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//OrExpression
		public RuleCall getRhsOrExpressionParserRuleCall_1_2_0() { return cRhsOrExpressionParserRuleCall_1_2_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsImpliesExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//OrExpression returns PredicateExpression:
		//	ImpliesExpression ({OrExpression.lhs=current} "or" rhs=ImpliesExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//ImpliesExpression ({OrExpression.lhs=current} "or" rhs=ImpliesExpression)*
		public Group getGroup() { return cGroup; }

		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_0() { return cImpliesExpressionParserRuleCall_0; }

		//({OrExpression.lhs=current} "or" rhs=ImpliesExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.lhs=current}
		public Action getOrExpressionLhsAction_1_0() { return cOrExpressionLhsAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//rhs=ImpliesExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//ImpliesExpression
		public RuleCall getRhsImpliesExpressionParserRuleCall_1_2_0() { return cRhsImpliesExpressionParserRuleCall_1_2_0; }
	}

	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPrimaryExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImpliesExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cImpliesKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//ImpliesExpression returns PredicateExpression:
		//	lhs=PrimaryExpression ({ImpliesExpression.lhs=current} ("implies" | "=>") rhs=PrimaryExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//lhs=PrimaryExpression ({ImpliesExpression.lhs=current} ("implies" | "=>") rhs=PrimaryExpression)?
		public Group getGroup() { return cGroup; }

		//lhs=PrimaryExpression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//PrimaryExpression
		public RuleCall getLhsPrimaryExpressionParserRuleCall_0_0() { return cLhsPrimaryExpressionParserRuleCall_0_0; }

		//({ImpliesExpression.lhs=current} ("implies" | "=>") rhs=PrimaryExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ImpliesExpression.lhs=current}
		public Action getImpliesExpressionLhsAction_1_0() { return cImpliesExpressionLhsAction_1_0; }

		//"implies" | "=>"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"implies"
		public Keyword getImpliesKeyword_1_1_0() { return cImpliesKeyword_1_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1_1; }

		//rhs=PrimaryExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getRhsPrimaryExpressionParserRuleCall_1_2_0() { return cRhsPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedNotKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCallAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCallPredicateCallParserRuleCall_1_0_0 = (RuleCall)cCallAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cInnerAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInnerPredicateExpressionParserRuleCall_1_1_1_0 = (RuleCall)cInnerAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//PrimaryExpression returns PredicateExpression:
		//	negated?="not"? (call=PredicateCall | "(" inner=PredicateExpression ")");
		@Override public ParserRule getRule() { return rule; }

		//negated?="not"? (call=PredicateCall | "(" inner=PredicateExpression ")")
		public Group getGroup() { return cGroup; }

		//negated?="not"?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }

		//"not"
		public Keyword getNegatedNotKeyword_0_0() { return cNegatedNotKeyword_0_0; }

		//call=PredicateCall | "(" inner=PredicateExpression ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//call=PredicateCall
		public Assignment getCallAssignment_1_0() { return cCallAssignment_1_0; }

		//PredicateCall
		public RuleCall getCallPredicateCallParserRuleCall_1_0_0() { return cCallPredicateCallParserRuleCall_1_0_0; }

		//"(" inner=PredicateExpression ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//inner=PredicateExpression
		public Assignment getInnerAssignment_1_1_1() { return cInnerAssignment_1_1_1; }

		//PredicateExpression
		public RuleCall getInnerPredicateExpressionParserRuleCall_1_1_1_0() { return cInnerPredicateExpressionParserRuleCall_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class PredicateCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPropertyRelationPredicateParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDefinitionSentencePredicateParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cPredicateReferenceParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cPredicateXExpressionParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLabelAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_1_0 = (RuleCall)cLabelAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PredicateCall:
		//	(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference | PredicateXExpression) ("[" label=ID
		//	"]")?;
		@Override public ParserRule getRule() { return rule; }

		//(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference | PredicateXExpression) ("[" label=ID
		//"]")?
		public Group getGroup() { return cGroup; }

		//PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference | PredicateXExpression
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//PropertyRelationPredicate
		public RuleCall getPropertyRelationPredicateParserRuleCall_0_0() { return cPropertyRelationPredicateParserRuleCall_0_0; }

		//DefinitionSentencePredicate
		public RuleCall getDefinitionSentencePredicateParserRuleCall_0_1() { return cDefinitionSentencePredicateParserRuleCall_0_1; }

		//PredicateReference
		public RuleCall getPredicateReferenceParserRuleCall_0_2() { return cPredicateReferenceParserRuleCall_0_2; }

		//PredicateXExpression
		public RuleCall getPredicateXExpressionParserRuleCall_0_3() { return cPredicateXExpressionParserRuleCall_0_3; }

		//("[" label=ID "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//label=ID
		public Assignment getLabelAssignment_1_1() { return cLabelAssignment_1_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_1_0() { return cLabelIDTerminalRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class PredicateXExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateXExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//PredicateXExpression:
		//	expression=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_0() { return cExpressionXBlockExpressionParserRuleCall_0; }
	}

	public class PropertyRelationPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyRelationPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPropertyExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationPropertyRelationEnumRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsPropertyExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//PropertyRelationPredicate:
		//	lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression;
		@Override public ParserRule getRule() { return rule; }

		//lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression
		public Group getGroup() { return cGroup; }

		//lhs=PropertyExpression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//PropertyExpression
		public RuleCall getLhsPropertyExpressionParserRuleCall_0_0() { return cLhsPropertyExpressionParserRuleCall_0_0; }

		//relation=PropertyRelation
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }

		//PropertyRelation
		public RuleCall getRelationPropertyRelationEnumRuleCall_1_0() { return cRelationPropertyRelationEnumRuleCall_1_0; }

		//rhs=PropertyExpression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//PropertyExpression
		public RuleCall getRhsPropertyExpressionParserRuleCall_2_0() { return cRhsPropertyExpressionParserRuleCall_2_0; }
	}

	public class DefinitionSentencePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionSentencePredicate");
		private final Assignment cSentenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSentenceDefinitionSentenceParserRuleCall_0 = (RuleCall)cSentenceAssignment.eContents().get(0);
		
		//DefinitionSentencePredicate:
		//	sentence=DefinitionSentence;
		@Override public ParserRule getRule() { return rule; }

		//sentence=DefinitionSentence
		public Assignment getSentenceAssignment() { return cSentenceAssignment; }

		//DefinitionSentence
		public RuleCall getSentenceDefinitionSentenceParserRuleCall_0() { return cSentenceDefinitionSentenceParserRuleCall_0; }
	}

	public class PredicateReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferencePredicateDefinitionSentenceCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1 = (RuleCall)cReferencePredicateDefinitionSentenceCrossReference_0_0.eContents().get(1);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsArgumentListParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		
		//PredicateReference:
		//	reference=[PredicateDefinitionSentence] arguments=ArgumentList;
		@Override public ParserRule getRule() { return rule; }

		//reference=[PredicateDefinitionSentence] arguments=ArgumentList
		public Group getGroup() { return cGroup; }

		//reference=[PredicateDefinitionSentence]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//[PredicateDefinitionSentence]
		public CrossReference getReferencePredicateDefinitionSentenceCrossReference_0_0() { return cReferencePredicateDefinitionSentenceCrossReference_0_0; }

		//ID
		public RuleCall getReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1() { return cReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1; }

		//arguments=ArgumentList
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//ArgumentList
		public RuleCall getArgumentsArgumentListParserRuleCall_1_0() { return cArgumentsArgumentListParserRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNodeNodeDefinitionParserRuleCall_0 = (RuleCall)cNodeAssignment.eContents().get(0);
		
		//Parameter:
		//	node=NodeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//node=NodeDefinition
		public Assignment getNodeAssignment() { return cNodeAssignment; }

		//NodeDefinition
		public RuleCall getNodeNodeDefinitionParserRuleCall_0() { return cNodeNodeDefinitionParserRuleCall_0; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	parameters+=Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameters+=Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_0() { return cParametersParameterParserRuleCall_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNodeNodeDefinitionCrossReference_0 = (CrossReference)cNodeAssignment.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_0.eContents().get(1);
		
		//Argument:
		//	node=[NodeDefinition];
		@Override public ParserRule getRule() { return rule; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment() { return cNodeAssignment; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_0() { return cNodeNodeDefinitionCrossReference_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_0_1; }
	}

	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		
		//ArgumentList:
		//	arguments+=Argument ("," arguments+=Argument)*;
		@Override public ParserRule getRule() { return rule; }

		//arguments+=Argument ("," arguments+=Argument)*
		public Group getGroup() { return cGroup; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_0_0() { return cArgumentsArgumentParserRuleCall_0_0; }

		//("," arguments+=Argument)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_1_0() { return cArgumentsArgumentParserRuleCall_1_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNodeNodeDefinitionCrossReference_2_0 = (CrossReference)cNodeAssignment_2.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyIDTerminalRuleCall_4_0 = (RuleCall)cPropertyAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionXPrimaryExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		
		//Assignment returns xbase::XExpression:
		//	{Assignment} "set" node=[NodeDefinition] "." property=ID "to" expression=XPrimaryExpression;
		@Override public ParserRule getRule() { return rule; }

		//{Assignment} "set" node=[NodeDefinition] "." property=ID "to" expression=XPrimaryExpression
		public Group getGroup() { return cGroup; }

		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }

		//"set"
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_2_0() { return cNodeNodeDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_2_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//property=ID
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//ID
		public RuleCall getPropertyIDTerminalRuleCall_4_0() { return cPropertyIDTerminalRuleCall_4_0; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//expression=XPrimaryExpression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }

		//XPrimaryExpression
		public RuleCall getExpressionXPrimaryExpressionParserRuleCall_6_0() { return cExpressionXPrimaryExpressionParserRuleCall_6_0; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXSynchronizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXFeatureCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXIfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXForLoopExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXBasicForLoopExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXWhileExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXDoWhileExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXThrowExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXReturnExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cXPropertyExpressionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cAssignmentParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		////Assignment:
		////	reference=PropertyReferenceExpression ('becomes' | ':=') expression=AssignmentExpression;
		////AssignmentList:
		////	assignments+=Assignment (',' assignments+=Assignment)*;
		////AssignmentExpression:
		////	PropertyExpression | AssignmentXExpression;
		////	
		////AssignmentXExpression:
		////	expression = XBlockExpression;
		//XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | XPropertyExpression |
		//	Assignment;
		@Override public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | XPropertyExpression |
		//Assignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XSynchronizedExpression
		public RuleCall getXSynchronizedExpressionParserRuleCall_3() { return cXSynchronizedExpressionParserRuleCall_3; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_4() { return cXFeatureCallParserRuleCall_4; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_5() { return cXLiteralParserRuleCall_5; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_6() { return cXIfExpressionParserRuleCall_6; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_7() { return cXForLoopExpressionParserRuleCall_7; }

		//XBasicForLoopExpression
		public RuleCall getXBasicForLoopExpressionParserRuleCall_8() { return cXBasicForLoopExpressionParserRuleCall_8; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_9() { return cXWhileExpressionParserRuleCall_9; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_10() { return cXDoWhileExpressionParserRuleCall_10; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_11() { return cXThrowExpressionParserRuleCall_11; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_12() { return cXReturnExpressionParserRuleCall_12; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_13() { return cXTryCatchFinallyExpressionParserRuleCall_13; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_14() { return cXParenthesizedExpressionParserRuleCall_14; }

		//XPropertyExpression
		public RuleCall getXPropertyExpressionParserRuleCall_15() { return cXPropertyExpressionParserRuleCall_15; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_16() { return cAssignmentParserRuleCall_16; }
	}

	public class XPropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPropertyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXPropertyExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNodeNodeDefinitionCrossReference_2_0 = (CrossReference)cNodeAssignment_2.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cTildeGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XPropertyExpression returns xbase::XExpression:
		//	{XPropertyExpression} "[[" node=[NodeDefinition] "~>" name=ID "]]";
		@Override public ParserRule getRule() { return rule; }

		//{XPropertyExpression} "[[" node=[NodeDefinition] "~>" name=ID "]]"
		public Group getGroup() { return cGroup; }

		//{XPropertyExpression}
		public Action getXPropertyExpressionAction_0() { return cXPropertyExpressionAction_0; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_1() { return cLeftSquareBracketLeftSquareBracketKeyword_1; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_2_0() { return cNodeNodeDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_2_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_2_0_1; }

		//"~>"
		public Keyword getTildeGreaterThanSignKeyword_3() { return cTildeGreaterThanSignKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_5() { return cRightSquareBracketRightSquareBracketKeyword_5; }
	}

	public class QuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantorQuantorEnumRuleCall_0_0 = (RuleCall)cQuantorAssignment_0.eContents().get(0);
		private final Assignment cNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeNodeDefinitionParserRuleCall_1_0 = (RuleCall)cNodeAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNodeSetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNodeSetNodeDefinitionCrossReference_3_0 = (CrossReference)cNodeSetAssignment_3.eContents().get(0);
		private final RuleCall cNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cNodeSetNodeDefinitionCrossReference_3_0.eContents().get(1);
		
		//Quantification:
		//	quantor=Quantor node=NodeDefinition "in" nodeSet=[NodeDefinition];
		@Override public ParserRule getRule() { return rule; }

		//quantor=Quantor node=NodeDefinition "in" nodeSet=[NodeDefinition]
		public Group getGroup() { return cGroup; }

		//quantor=Quantor
		public Assignment getQuantorAssignment_0() { return cQuantorAssignment_0; }

		//Quantor
		public RuleCall getQuantorQuantorEnumRuleCall_0_0() { return cQuantorQuantorEnumRuleCall_0_0; }

		//node=NodeDefinition
		public Assignment getNodeAssignment_1() { return cNodeAssignment_1; }

		//NodeDefinition
		public RuleCall getNodeNodeDefinitionParserRuleCall_1_0() { return cNodeNodeDefinitionParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//nodeSet=[NodeDefinition]
		public Assignment getNodeSetAssignment_3() { return cNodeSetAssignment_3; }

		//[NodeDefinition]
		public CrossReference getNodeSetNodeDefinitionCrossReference_3_0() { return cNodeSetNodeDefinitionCrossReference_3_0; }

		//ID
		public RuleCall getNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1() { return cNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1; }
	}

	public class QuantificationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuantificationList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantificationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantificationsQuantificationParserRuleCall_0_0 = (RuleCall)cQuantificationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cQuantificationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQuantificationsQuantificationParserRuleCall_1_1_0 = (RuleCall)cQuantificationsAssignment_1_1.eContents().get(0);
		
		//QuantificationList:
		//	quantifications+=Quantification ("," quantifications+=Quantification)*;
		@Override public ParserRule getRule() { return rule; }

		//quantifications+=Quantification ("," quantifications+=Quantification)*
		public Group getGroup() { return cGroup; }

		//quantifications+=Quantification
		public Assignment getQuantificationsAssignment_0() { return cQuantificationsAssignment_0; }

		//Quantification
		public RuleCall getQuantificationsQuantificationParserRuleCall_0_0() { return cQuantificationsQuantificationParserRuleCall_0_0; }

		//("," quantifications+=Quantification)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//quantifications+=Quantification
		public Assignment getQuantificationsAssignment_1_1() { return cQuantificationsAssignment_1_1; }

		//Quantification
		public RuleCall getQuantificationsQuantificationParserRuleCall_1_1_0() { return cQuantificationsQuantificationParserRuleCall_1_1_0; }
	}

	public class PropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PropertyExpression:
		//	PropertyValueExpression | PropertyReferenceExpression;
		@Override public ParserRule getRule() { return rule; }

		//PropertyValueExpression | PropertyReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyValueExpression
		public RuleCall getPropertyValueExpressionParserRuleCall_0() { return cPropertyValueExpressionParserRuleCall_0; }

		//PropertyReferenceExpression
		public RuleCall getPropertyReferenceExpressionParserRuleCall_1() { return cPropertyReferenceExpressionParserRuleCall_1; }
	}

	public class PropertyValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValueExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//PropertyValueExpression:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class PropertyReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNodeNodeDefinitionCrossReference_0_0 = (CrossReference)cNodeAssignment_0.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		
		//PropertyReferenceExpression:
		//	node=[NodeDefinition] "." Property=ID;
		@Override public ParserRule getRule() { return rule; }

		//node=[NodeDefinition] "." Property=ID
		public Group getGroup() { return cGroup; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_0_0() { return cNodeNodeDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_0_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//Property=ID
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }

		//ID
		public RuleCall getPropertyIDTerminalRuleCall_2_0() { return cPropertyIDTerminalRuleCall_2_0; }
	}
	
	
	public class QuantorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Quantor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEachEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEachEachKeyword_0_0 = (Keyword)cEachEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyAnyKeyword_1_0 = (Keyword)cAnyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Quantor:
		//	Each="each" | Any="any";
		public EnumRule getRule() { return rule; }

		//Each="each" | Any="any"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Each="each"
		public EnumLiteralDeclaration getEachEnumLiteralDeclaration_0() { return cEachEnumLiteralDeclaration_0; }

		//"each"
		public Keyword getEachEachKeyword_0_0() { return cEachEachKeyword_0_0; }

		//Any="any"
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_1() { return cAnyEnumLiteralDeclaration_1; }

		//"any"
		public Keyword getAnyAnyKeyword_1_0() { return cAnyAnyKeyword_1_0; }
	}

	public class RelationQualifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMustEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMustMustHaveKeyword_0_0 = (Keyword)cMustEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMustNotEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMustNotMustNotHaveKeyword_1_0 = (Keyword)cMustNotEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCanCanHaveKeyword_2_0 = (Keyword)cCanEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RelationQualifier:
		//	Must="must have" | MustNot="must not have" | Can="can have";
		public EnumRule getRule() { return rule; }

		//Must="must have" | MustNot="must not have" | Can="can have"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Must="must have"
		public EnumLiteralDeclaration getMustEnumLiteralDeclaration_0() { return cMustEnumLiteralDeclaration_0; }

		//"must have"
		public Keyword getMustMustHaveKeyword_0_0() { return cMustMustHaveKeyword_0_0; }

		//MustNot="must not have"
		public EnumLiteralDeclaration getMustNotEnumLiteralDeclaration_1() { return cMustNotEnumLiteralDeclaration_1; }

		//"must not have"
		public Keyword getMustNotMustNotHaveKeyword_1_0() { return cMustNotMustNotHaveKeyword_1_0; }

		//Can="can have"
		public EnumLiteralDeclaration getCanEnumLiteralDeclaration_2() { return cCanEnumLiteralDeclaration_2; }

		//"can have"
		public Keyword getCanCanHaveKeyword_2_0() { return cCanCanHaveKeyword_2_0; }
	}

	public class AxisElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Axis");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cParentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cParentParentKeyword_0_0 = (Keyword)cParentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cChildEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cChildChildKeyword_1_0 = (Keyword)cChildEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAncestorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAncestorAncestorKeyword_2_0 = (Keyword)cAncestorEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDescendantEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDescendantDescendantKeyword_3_0 = (Keyword)cDescendantEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cParentsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cParentsMultipleParentsKeyword_4_0 = (Keyword)cParentsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cChildrenEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cChildrenMultipleChildrenKeyword_5_0 = (Keyword)cChildrenEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAncestorsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAncestorsMultipleAncestorsKeyword_6_0 = (Keyword)cAncestorsEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDescendantsEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDescendantsMultipleDescendantsKeyword_7_0 = (Keyword)cDescendantsEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Axis:
		//	Parent="parent" | Child="child" | Ancestor="ancestor" | Descendant="descendant" | Parents="multiple parents" |
		//	Children="multiple children" | Ancestors="multiple ancestors" | Descendants="multiple descendants";
		public EnumRule getRule() { return rule; }

		//Parent="parent" | Child="child" | Ancestor="ancestor" | Descendant="descendant" | Parents="multiple parents" |
		//Children="multiple children" | Ancestors="multiple ancestors" | Descendants="multiple descendants"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Parent="parent"
		public EnumLiteralDeclaration getParentEnumLiteralDeclaration_0() { return cParentEnumLiteralDeclaration_0; }

		//"parent"
		public Keyword getParentParentKeyword_0_0() { return cParentParentKeyword_0_0; }

		//Child="child"
		public EnumLiteralDeclaration getChildEnumLiteralDeclaration_1() { return cChildEnumLiteralDeclaration_1; }

		//"child"
		public Keyword getChildChildKeyword_1_0() { return cChildChildKeyword_1_0; }

		//Ancestor="ancestor"
		public EnumLiteralDeclaration getAncestorEnumLiteralDeclaration_2() { return cAncestorEnumLiteralDeclaration_2; }

		//"ancestor"
		public Keyword getAncestorAncestorKeyword_2_0() { return cAncestorAncestorKeyword_2_0; }

		//Descendant="descendant"
		public EnumLiteralDeclaration getDescendantEnumLiteralDeclaration_3() { return cDescendantEnumLiteralDeclaration_3; }

		//"descendant"
		public Keyword getDescendantDescendantKeyword_3_0() { return cDescendantDescendantKeyword_3_0; }

		//Parents="multiple parents"
		public EnumLiteralDeclaration getParentsEnumLiteralDeclaration_4() { return cParentsEnumLiteralDeclaration_4; }

		//"multiple parents"
		public Keyword getParentsMultipleParentsKeyword_4_0() { return cParentsMultipleParentsKeyword_4_0; }

		//Children="multiple children"
		public EnumLiteralDeclaration getChildrenEnumLiteralDeclaration_5() { return cChildrenEnumLiteralDeclaration_5; }

		//"multiple children"
		public Keyword getChildrenMultipleChildrenKeyword_5_0() { return cChildrenMultipleChildrenKeyword_5_0; }

		//Ancestors="multiple ancestors"
		public EnumLiteralDeclaration getAncestorsEnumLiteralDeclaration_6() { return cAncestorsEnumLiteralDeclaration_6; }

		//"multiple ancestors"
		public Keyword getAncestorsMultipleAncestorsKeyword_6_0() { return cAncestorsMultipleAncestorsKeyword_6_0; }

		//Descendants="multiple descendants"
		public EnumLiteralDeclaration getDescendantsEnumLiteralDeclaration_7() { return cDescendantsEnumLiteralDeclaration_7; }

		//"multiple descendants"
		public Keyword getDescendantsMultipleDescendantsKeyword_7_0() { return cDescendantsMultipleDescendantsKeyword_7_0; }
	}

	public class PropertyRelationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyRelation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualsEqualsKeyword_0_0 = (Keyword)cEqualsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualsNotEqualsKeyword_1_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLesserEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLesserLesserThanKeyword_3_0 = (Keyword)cLesserEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterEqualsGreaterOrEqualsThanKeyword_4_0 = (Keyword)cGreaterEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLesserEqualsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLesserEqualsLesserOrEqualsThanKeyword_5_0 = (Keyword)cLesserEqualsEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum PropertyRelation:
		//	Equals="equals" | NotEquals="not equals" | Greater="greater than" | Lesser="lesser than" |
		//	GreaterEquals="greater or equals than" | LesserEquals="lesser or equals than";
		public EnumRule getRule() { return rule; }

		//Equals="equals" | NotEquals="not equals" | Greater="greater than" | Lesser="lesser than" |
		//GreaterEquals="greater or equals than" | LesserEquals="lesser or equals than"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Equals="equals"
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_0() { return cEqualsEnumLiteralDeclaration_0; }

		//"equals"
		public Keyword getEqualsEqualsKeyword_0_0() { return cEqualsEqualsKeyword_0_0; }

		//NotEquals="not equals"
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_1() { return cNotEqualsEnumLiteralDeclaration_1; }

		//"not equals"
		public Keyword getNotEqualsNotEqualsKeyword_1_0() { return cNotEqualsNotEqualsKeyword_1_0; }

		//Greater="greater than"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//"greater than"
		public Keyword getGreaterGreaterThanKeyword_2_0() { return cGreaterGreaterThanKeyword_2_0; }

		//Lesser="lesser than"
		public EnumLiteralDeclaration getLesserEnumLiteralDeclaration_3() { return cLesserEnumLiteralDeclaration_3; }

		//"lesser than"
		public Keyword getLesserLesserThanKeyword_3_0() { return cLesserLesserThanKeyword_3_0; }

		//GreaterEquals="greater or equals than"
		public EnumLiteralDeclaration getGreaterEqualsEnumLiteralDeclaration_4() { return cGreaterEqualsEnumLiteralDeclaration_4; }

		//"greater or equals than"
		public Keyword getGreaterEqualsGreaterOrEqualsThanKeyword_4_0() { return cGreaterEqualsGreaterOrEqualsThanKeyword_4_0; }

		//LesserEquals="lesser or equals than"
		public EnumLiteralDeclaration getLesserEqualsEnumLiteralDeclaration_5() { return cLesserEqualsEnumLiteralDeclaration_5; }

		//"lesser or equals than"
		public Keyword getLesserEqualsLesserOrEqualsThanKeyword_5_0() { return cLesserEqualsLesserOrEqualsThanKeyword_5_0; }
	}
	
	private final ValidatorElements pValidator;
	private final BodySentencesElements pBodySentences;
	private final SentenceElements pSentence;
	private final StartOnSentenceElements pStartOnSentence;
	private final DefinitionSentenceElements pDefinitionSentence;
	private final ConstraintSentenceElements pConstraintSentence;
	private final PredicateDefinitionSentenceElements pPredicateDefinitionSentence;
	private final NodeDefinitionElements pNodeDefinition;
	private final NodeReferenceListElements pNodeReferenceList;
	private final TargetDefinitionElements pTargetDefinition;
	private final SelectorListElements pSelectorList;
	private final SelectorListDefElements pSelectorListDef;
	private final SelectorElements pSelector;
	private final PredicateExpressionElements pPredicateExpression;
	private final AndExpressionElements pAndExpression;
	private final OrExpressionElements pOrExpression;
	private final ImpliesExpressionElements pImpliesExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final PredicateCallElements pPredicateCall;
	private final PredicateXExpressionElements pPredicateXExpression;
	private final PropertyRelationPredicateElements pPropertyRelationPredicate;
	private final DefinitionSentencePredicateElements pDefinitionSentencePredicate;
	private final PredicateReferenceElements pPredicateReference;
	private final ParameterElements pParameter;
	private final ParameterListElements pParameterList;
	private final ArgumentElements pArgument;
	private final ArgumentListElements pArgumentList;
	private final AssignmentElements pAssignment;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final XPropertyExpressionElements pXPropertyExpression;
	private final QuantificationElements pQuantification;
	private final QuantificationListElements pQuantificationList;
	private final PropertyExpressionElements pPropertyExpression;
	private final PropertyValueExpressionElements pPropertyValueExpression;
	private final PropertyReferenceExpressionElements pPropertyReferenceExpression;
	private final QuantorElements unknownRuleQuantor;
	private final RelationQualifierElements unknownRuleRelationQualifier;
	private final AxisElements unknownRuleAxis;
	private final PropertyRelationElements unknownRulePropertyRelation;
	
	private final Grammar grammar;

	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.pValidator = new ValidatorElements();
		this.pBodySentences = new BodySentencesElements();
		this.pSentence = new SentenceElements();
		this.pStartOnSentence = new StartOnSentenceElements();
		this.pDefinitionSentence = new DefinitionSentenceElements();
		this.pConstraintSentence = new ConstraintSentenceElements();
		this.pPredicateDefinitionSentence = new PredicateDefinitionSentenceElements();
		this.pNodeDefinition = new NodeDefinitionElements();
		this.pNodeReferenceList = new NodeReferenceListElements();
		this.pTargetDefinition = new TargetDefinitionElements();
		this.pSelectorList = new SelectorListElements();
		this.pSelectorListDef = new SelectorListDefElements();
		this.pSelector = new SelectorElements();
		this.pPredicateExpression = new PredicateExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pPredicateCall = new PredicateCallElements();
		this.pPredicateXExpression = new PredicateXExpressionElements();
		this.pPropertyRelationPredicate = new PropertyRelationPredicateElements();
		this.pDefinitionSentencePredicate = new DefinitionSentencePredicateElements();
		this.pPredicateReference = new PredicateReferenceElements();
		this.pParameter = new ParameterElements();
		this.pParameterList = new ParameterListElements();
		this.pArgument = new ArgumentElements();
		this.pArgumentList = new ArgumentListElements();
		this.pAssignment = new AssignmentElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pXPropertyExpression = new XPropertyExpressionElements();
		this.pQuantification = new QuantificationElements();
		this.pQuantificationList = new QuantificationListElements();
		this.pPropertyExpression = new PropertyExpressionElements();
		this.pPropertyValueExpression = new PropertyValueExpressionElements();
		this.pPropertyReferenceExpression = new PropertyReferenceExpressionElements();
		this.unknownRuleQuantor = new QuantorElements();
		this.unknownRuleRelationQualifier = new RelationQualifierElements();
		this.unknownRuleAxis = new AxisElements();
		this.unknownRulePropertyRelation = new PropertyRelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.isax.validation.dsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	
	//Validator:
	//	startOn=StartOnSentence body=BodySentences predicates+=PredicateDefinitionSentence*;
	public ValidatorElements getValidatorAccess() {
		return pValidator;
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}

	//BodySentences:
	//	{BodySentences} (sentences+=DefinitionSentence | sentences+=ConstraintSentence)*;
	public BodySentencesElements getBodySentencesAccess() {
		return pBodySentences;
	}
	
	public ParserRule getBodySentencesRule() {
		return getBodySentencesAccess().getRule();
	}

	//Sentence:
	//	StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}

	//StartOnSentence:
	//	"start" "on" definition=NodeDefinition;
	public StartOnSentenceElements getStartOnSentenceAccess() {
		return pStartOnSentence;
	}
	
	public ParserRule getStartOnSentenceRule() {
		return getStartOnSentenceAccess().getRule();
	}

	//DefinitionSentence:
	//	(quantification=Quantification | node=[NodeDefinition]) qualifier=RelationQualifier target=TargetDefinition;
	public DefinitionSentenceElements getDefinitionSentenceAccess() {
		return pDefinitionSentence;
	}
	
	public ParserRule getDefinitionSentenceRule() {
		return getDefinitionSentenceAccess().getRule();
	}

	//ConstraintSentence:
	//	"for" quantifications=QuantificationList? nodes=NodeReferenceList? "holds" predicate=PredicateExpression;
	public ConstraintSentenceElements getConstraintSentenceAccess() {
		return pConstraintSentence;
	}
	
	public ParserRule getConstraintSentenceRule() {
		return getConstraintSentenceAccess().getRule();
	}

	//PredicateDefinitionSentence:
	//	"define" name=ID parameters=ParameterList? "as" "{" body=BodySentences "}";
	public PredicateDefinitionSentenceElements getPredicateDefinitionSentenceAccess() {
		return pPredicateDefinitionSentence;
	}
	
	public ParserRule getPredicateDefinitionSentenceRule() {
		return getPredicateDefinitionSentenceAccess().getRule();
	}

	//NodeDefinition:
	//	name=ID collection?="*"? selectors=SelectorList?;
	public NodeDefinitionElements getNodeDefinitionAccess() {
		return pNodeDefinition;
	}
	
	public ParserRule getNodeDefinitionRule() {
		return getNodeDefinitionAccess().getRule();
	}

	//NodeReferenceList:
	//	nodes+=[NodeDefinition] ("," nodes+=[NodeDefinition])*;
	public NodeReferenceListElements getNodeReferenceListAccess() {
		return pNodeReferenceList;
	}
	
	public ParserRule getNodeReferenceListRule() {
		return getNodeReferenceListAccess().getRule();
	}

	//TargetDefinition:
	//	axis=Axis (local=NodeDefinition ":")? definition=NodeDefinition ("where" "{" body=BodySentences "}")? ("then"
	//	then=XBlockExpression)?;
	public TargetDefinitionElements getTargetDefinitionAccess() {
		return pTargetDefinition;
	}
	
	public ParserRule getTargetDefinitionRule() {
		return getTargetDefinitionAccess().getRule();
	}

	//SelectorList:
	//	"being" selectors=SelectorListDef | "(" selectors=SelectorListDef ")";
	public SelectorListElements getSelectorListAccess() {
		return pSelectorList;
	}
	
	public ParserRule getSelectorListRule() {
		return getSelectorListAccess().getRule();
	}

	//SelectorListDef:
	//	selectors+=Selector ("or" selectors+=Selector)*;
	public SelectorListDefElements getSelectorListDefAccess() {
		return pSelectorListDef;
	}
	
	public ParserRule getSelectorListDefRule() {
		return getSelectorListDefAccess().getRule();
	}

	//Selector:
	//	type=ID;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//PredicateExpression:
	//	AndExpression;
	public PredicateExpressionElements getPredicateExpressionAccess() {
		return pPredicateExpression;
	}
	
	public ParserRule getPredicateExpressionRule() {
		return getPredicateExpressionAccess().getRule();
	}

	//AndExpression returns PredicateExpression:
	//	OrExpression ({AndExpression.lhs=current} ("and" | ",") rhs=OrExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OrExpression returns PredicateExpression:
	//	ImpliesExpression ({OrExpression.lhs=current} "or" rhs=ImpliesExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//ImpliesExpression returns PredicateExpression:
	//	lhs=PrimaryExpression ({ImpliesExpression.lhs=current} ("implies" | "=>") rhs=PrimaryExpression)?;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	//PrimaryExpression returns PredicateExpression:
	//	negated?="not"? (call=PredicateCall | "(" inner=PredicateExpression ")");
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//PredicateCall:
	//	(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference | PredicateXExpression) ("[" label=ID
	//	"]")?;
	public PredicateCallElements getPredicateCallAccess() {
		return pPredicateCall;
	}
	
	public ParserRule getPredicateCallRule() {
		return getPredicateCallAccess().getRule();
	}

	//PredicateXExpression:
	//	expression=XBlockExpression;
	public PredicateXExpressionElements getPredicateXExpressionAccess() {
		return pPredicateXExpression;
	}
	
	public ParserRule getPredicateXExpressionRule() {
		return getPredicateXExpressionAccess().getRule();
	}

	//PropertyRelationPredicate:
	//	lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression;
	public PropertyRelationPredicateElements getPropertyRelationPredicateAccess() {
		return pPropertyRelationPredicate;
	}
	
	public ParserRule getPropertyRelationPredicateRule() {
		return getPropertyRelationPredicateAccess().getRule();
	}

	//DefinitionSentencePredicate:
	//	sentence=DefinitionSentence;
	public DefinitionSentencePredicateElements getDefinitionSentencePredicateAccess() {
		return pDefinitionSentencePredicate;
	}
	
	public ParserRule getDefinitionSentencePredicateRule() {
		return getDefinitionSentencePredicateAccess().getRule();
	}

	//PredicateReference:
	//	reference=[PredicateDefinitionSentence] arguments=ArgumentList;
	public PredicateReferenceElements getPredicateReferenceAccess() {
		return pPredicateReference;
	}
	
	public ParserRule getPredicateReferenceRule() {
		return getPredicateReferenceAccess().getRule();
	}

	//Parameter:
	//	node=NodeDefinition;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterList:
	//	parameters+=Parameter ("," parameters+=Parameter)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Argument:
	//	node=[NodeDefinition];
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//ArgumentList:
	//	arguments+=Argument ("," arguments+=Argument)*;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//Assignment returns xbase::XExpression:
	//	{Assignment} "set" node=[NodeDefinition] "." property=ID "to" expression=XPrimaryExpression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	////Assignment:
	////	reference=PropertyReferenceExpression ('becomes' | ':=') expression=AssignmentExpression;
	////AssignmentList:
	////	assignments+=Assignment (',' assignments+=Assignment)*;
	////AssignmentExpression:
	////	PropertyExpression | AssignmentXExpression;
	////	
	////AssignmentXExpression:
	////	expression = XBlockExpression;
	//XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | XPropertyExpression |
	//	Assignment;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XPropertyExpression returns xbase::XExpression:
	//	{XPropertyExpression} "[[" node=[NodeDefinition] "~>" name=ID "]]";
	public XPropertyExpressionElements getXPropertyExpressionAccess() {
		return pXPropertyExpression;
	}
	
	public ParserRule getXPropertyExpressionRule() {
		return getXPropertyExpressionAccess().getRule();
	}

	//Quantification:
	//	quantor=Quantor node=NodeDefinition "in" nodeSet=[NodeDefinition];
	public QuantificationElements getQuantificationAccess() {
		return pQuantification;
	}
	
	public ParserRule getQuantificationRule() {
		return getQuantificationAccess().getRule();
	}

	//QuantificationList:
	//	quantifications+=Quantification ("," quantifications+=Quantification)*;
	public QuantificationListElements getQuantificationListAccess() {
		return pQuantificationList;
	}
	
	public ParserRule getQuantificationListRule() {
		return getQuantificationListAccess().getRule();
	}

	//PropertyExpression:
	//	PropertyValueExpression | PropertyReferenceExpression;
	public PropertyExpressionElements getPropertyExpressionAccess() {
		return pPropertyExpression;
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//PropertyValueExpression:
	//	value=STRING;
	public PropertyValueExpressionElements getPropertyValueExpressionAccess() {
		return pPropertyValueExpression;
	}
	
	public ParserRule getPropertyValueExpressionRule() {
		return getPropertyValueExpressionAccess().getRule();
	}

	//PropertyReferenceExpression:
	//	node=[NodeDefinition] "." Property=ID;
	public PropertyReferenceExpressionElements getPropertyReferenceExpressionAccess() {
		return pPropertyReferenceExpression;
	}
	
	public ParserRule getPropertyReferenceExpressionRule() {
		return getPropertyReferenceExpressionAccess().getRule();
	}

	//enum Quantor:
	//	Each="each" | Any="any";
	public QuantorElements getQuantorAccess() {
		return unknownRuleQuantor;
	}
	
	public EnumRule getQuantorRule() {
		return getQuantorAccess().getRule();
	}

	//enum RelationQualifier:
	//	Must="must have" | MustNot="must not have" | Can="can have";
	public RelationQualifierElements getRelationQualifierAccess() {
		return unknownRuleRelationQualifier;
	}
	
	public EnumRule getRelationQualifierRule() {
		return getRelationQualifierAccess().getRule();
	}

	//enum Axis:
	//	Parent="parent" | Child="child" | Ancestor="ancestor" | Descendant="descendant" | Parents="multiple parents" |
	//	Children="multiple children" | Ancestors="multiple ancestors" | Descendants="multiple descendants";
	public AxisElements getAxisAccess() {
		return unknownRuleAxis;
	}
	
	public EnumRule getAxisRule() {
		return getAxisAccess().getRule();
	}

	//enum PropertyRelation:
	//	Equals="equals" | NotEquals="not equals" | Greater="greater than" | Lesser="lesser than" |
	//	GreaterEquals="greater or equals than" | LesserEquals="lesser or equals than";
	public PropertyRelationElements getPropertyRelationAccess() {
		return unknownRulePropertyRelation;
	}
	
	public EnumRule getPropertyRelationRule() {
		return getPropertyRelationAccess().getRule();
	}

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] "=") value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueOrCommaList returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]"
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} ("," elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]"
	//	| XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationOrExpression returns xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbaseWithAnnotations.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbaseWithAnnotations.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbaseWithAnnotations.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbaseWithAnnotations.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbaseWithAnnotations.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbaseWithAnnotations.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbaseWithAnnotations.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbaseWithAnnotations.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbaseWithAnnotations.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbaseWithAnnotations.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbaseWithAnnotations.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbaseWithAnnotations.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbaseWithAnnotations.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbaseWithAnnotations.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbaseWithAnnotations.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbaseWithAnnotations.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbaseWithAnnotations.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbaseWithAnnotations.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbaseWithAnnotations.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbaseWithAnnotations.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbaseWithAnnotations.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbaseWithAnnotations.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbaseWithAnnotations.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbaseWithAnnotations.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbaseWithAnnotations.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbaseWithAnnotations.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbaseWithAnnotations.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbaseWithAnnotations.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbaseWithAnnotations.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbaseWithAnnotations.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbaseWithAnnotations.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbaseWithAnnotations.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbaseWithAnnotations.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbaseWithAnnotations.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbaseWithAnnotations.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbaseWithAnnotations.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbaseWithAnnotations.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbaseWithAnnotations.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbaseWithAnnotations.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbaseWithAnnotations.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbaseWithAnnotations.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbaseWithAnnotations.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbaseWithAnnotations.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbaseWithAnnotations.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbaseWithAnnotations.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbaseWithAnnotations.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbaseWithAnnotations.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbaseWithAnnotations.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbaseWithAnnotations.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbaseWithAnnotations.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbaseWithAnnotations.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbaseWithAnnotations.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbaseWithAnnotations.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbaseWithAnnotations.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbaseWithAnnotations.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbaseWithAnnotations.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbaseWithAnnotations.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbaseWithAnnotations.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbaseWithAnnotations.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbaseWithAnnotations.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbaseWithAnnotations.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbaseWithAnnotations.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbaseWithAnnotations.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbaseWithAnnotations.getANY_OTHERRule();
	} 
}
