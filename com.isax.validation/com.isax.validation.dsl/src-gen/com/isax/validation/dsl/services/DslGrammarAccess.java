/*
 * generated by Xtext
 */
package com.isax.validation.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Validator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsXImportSectionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cStartOnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartOnStartOnSentenceParserRuleCall_1_0 = (RuleCall)cStartOnAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBodySentencesParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Assignment cPredicatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicatesPredicateDefinitionSentenceParserRuleCall_3_0 = (RuleCall)cPredicatesAssignment_3.eContents().get(0);
		private final Assignment cErrorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cErrorsErrorDefinitionParserRuleCall_4_0 = (RuleCall)cErrorsAssignment_4.eContents().get(0);
		
		//Validator:
		//	imports=XImportSection?
		//	startOn=StartOnSentence
		//	body=BodySentences
		//	predicates+=PredicateDefinitionSentence*
		//	errors+=ErrorDefinition*;
		@Override public ParserRule getRule() { return rule; }

		//imports=XImportSection? startOn=StartOnSentence body=BodySentences predicates+=PredicateDefinitionSentence*
		//errors+=ErrorDefinition*
		public Group getGroup() { return cGroup; }

		//imports=XImportSection?
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//XImportSection
		public RuleCall getImportsXImportSectionParserRuleCall_0_0() { return cImportsXImportSectionParserRuleCall_0_0; }

		//startOn=StartOnSentence
		public Assignment getStartOnAssignment_1() { return cStartOnAssignment_1; }

		//StartOnSentence
		public RuleCall getStartOnStartOnSentenceParserRuleCall_1_0() { return cStartOnStartOnSentenceParserRuleCall_1_0; }

		//body=BodySentences
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//BodySentences
		public RuleCall getBodyBodySentencesParserRuleCall_2_0() { return cBodyBodySentencesParserRuleCall_2_0; }

		//predicates+=PredicateDefinitionSentence*
		public Assignment getPredicatesAssignment_3() { return cPredicatesAssignment_3; }

		//PredicateDefinitionSentence
		public RuleCall getPredicatesPredicateDefinitionSentenceParserRuleCall_3_0() { return cPredicatesPredicateDefinitionSentenceParserRuleCall_3_0; }

		//errors+=ErrorDefinition*
		public Assignment getErrorsAssignment_4() { return cErrorsAssignment_4; }

		//ErrorDefinition
		public RuleCall getErrorsErrorDefinitionParserRuleCall_4_0() { return cErrorsErrorDefinitionParserRuleCall_4_0; }
	}

	public class ErrorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.ErrorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		
		//ErrorDefinition:
		//	'[' name=ID ']'
		//	text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'[' name=ID ']' text=STRING
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//text=STRING
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0() { return cTextSTRINGTerminalRuleCall_3_0; }
	}

	public class BodySentencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.BodySentences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodySentencesAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSentencesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSentencesDefinitionSentenceParserRuleCall_1_0_0 = (RuleCall)cSentencesAssignment_1_0.eContents().get(0);
		private final Assignment cSentencesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSentencesConstraintSentenceParserRuleCall_1_1_0 = (RuleCall)cSentencesAssignment_1_1.eContents().get(0);
		
		//BodySentences:
		//	{BodySentences} (sentences+=DefinitionSentence | sentences+=ConstraintSentence)*;
		@Override public ParserRule getRule() { return rule; }

		//{BodySentences} (sentences+=DefinitionSentence | sentences+=ConstraintSentence)*
		public Group getGroup() { return cGroup; }

		//{BodySentences}
		public Action getBodySentencesAction_0() { return cBodySentencesAction_0; }

		//(sentences+=DefinitionSentence | sentences+=ConstraintSentence)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//sentences+=DefinitionSentence
		public Assignment getSentencesAssignment_1_0() { return cSentencesAssignment_1_0; }

		//DefinitionSentence
		public RuleCall getSentencesDefinitionSentenceParserRuleCall_1_0_0() { return cSentencesDefinitionSentenceParserRuleCall_1_0_0; }

		//sentences+=ConstraintSentence
		public Assignment getSentencesAssignment_1_1() { return cSentencesAssignment_1_1; }

		//ConstraintSentence
		public RuleCall getSentencesConstraintSentenceParserRuleCall_1_1_0() { return cSentencesConstraintSentenceParserRuleCall_1_1_0; }
	}

	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Sentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartOnSentenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionSentenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstraintSentenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPredicateDefinitionSentenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Sentence:
		//	StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence;
		@Override public ParserRule getRule() { return rule; }

		//StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence
		public Alternatives getAlternatives() { return cAlternatives; }

		//StartOnSentence
		public RuleCall getStartOnSentenceParserRuleCall_0() { return cStartOnSentenceParserRuleCall_0; }

		//DefinitionSentence
		public RuleCall getDefinitionSentenceParserRuleCall_1() { return cDefinitionSentenceParserRuleCall_1; }

		//ConstraintSentence
		public RuleCall getConstraintSentenceParserRuleCall_2() { return cConstraintSentenceParserRuleCall_2; }

		//PredicateDefinitionSentence
		public RuleCall getPredicateDefinitionSentenceParserRuleCall_3() { return cPredicateDefinitionSentenceParserRuleCall_3; }
	}

	public class StartOnSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.StartOnSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionNodeDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionAssignment_2.eContents().get(0);
		
		//StartOnSentence:
		//	'start' 'on' definition=NodeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//'start' 'on' definition=NodeDefinition
		public Group getGroup() { return cGroup; }

		//'start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }

		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }

		//definition=NodeDefinition
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//NodeDefinition
		public RuleCall getDefinitionNodeDefinitionParserRuleCall_2_0() { return cDefinitionNodeDefinitionParserRuleCall_2_0; }
	}

	public class DefinitionSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.DefinitionSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cQuantificationAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cQuantificationQuantificationParserRuleCall_0_0_0 = (RuleCall)cQuantificationAssignment_0_0.eContents().get(0);
		private final Assignment cNodeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cNodeNodeDefinitionCrossReference_0_1_0 = (CrossReference)cNodeAssignment_0_1.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_0_1_0.eContents().get(1);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierRelationQualifierParserRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Assignment cQuantifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuantifierRelationQuantifierParserRuleCall_2_0 = (RuleCall)cQuantifierAssignment_2.eContents().get(0);
		private final Assignment cAxisAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAxisRelationAxisParserRuleCall_3_0 = (RuleCall)cAxisAssignment_3.eContents().get(0);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetTargetDefinitionParserRuleCall_4_0 = (RuleCall)cTargetAssignment_4.eContents().get(0);
		
		//DefinitionSentence:
		//	(quantification=Quantification | node=[NodeDefinition]) qualifier=RelationQualifier
		//	quantifier=RelationQuantifier
		//	axis=RelationAxis
		//	target=TargetDefinition;
		@Override public ParserRule getRule() { return rule; }

		//(quantification=Quantification | node=[NodeDefinition]) qualifier=RelationQualifier quantifier=RelationQuantifier
		//axis=RelationAxis target=TargetDefinition
		public Group getGroup() { return cGroup; }

		//(quantification=Quantification | node=[NodeDefinition])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//quantification=Quantification
		public Assignment getQuantificationAssignment_0_0() { return cQuantificationAssignment_0_0; }

		//Quantification
		public RuleCall getQuantificationQuantificationParserRuleCall_0_0_0() { return cQuantificationQuantificationParserRuleCall_0_0_0; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_0_1() { return cNodeAssignment_0_1; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_0_1_0() { return cNodeNodeDefinitionCrossReference_0_1_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1; }

		//qualifier=RelationQualifier
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//RelationQualifier
		public RuleCall getQualifierRelationQualifierParserRuleCall_1_0() { return cQualifierRelationQualifierParserRuleCall_1_0; }

		//quantifier=RelationQuantifier
		public Assignment getQuantifierAssignment_2() { return cQuantifierAssignment_2; }

		//RelationQuantifier
		public RuleCall getQuantifierRelationQuantifierParserRuleCall_2_0() { return cQuantifierRelationQuantifierParserRuleCall_2_0; }

		//axis=RelationAxis
		public Assignment getAxisAssignment_3() { return cAxisAssignment_3; }

		//RelationAxis
		public RuleCall getAxisRelationAxisParserRuleCall_3_0() { return cAxisRelationAxisParserRuleCall_3_0; }

		//target=TargetDefinition
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//TargetDefinition
		public RuleCall getTargetTargetDefinitionParserRuleCall_4_0() { return cTargetTargetDefinitionParserRuleCall_4_0; }
	}

	public class ConstraintSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.ConstraintSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantificationsQuantificationListParserRuleCall_1_0 = (RuleCall)cQuantificationsAssignment_1.eContents().get(0);
		private final Assignment cNodesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodesNodeReferenceListParserRuleCall_2_0 = (RuleCall)cNodesAssignment_2.eContents().get(0);
		private final Keyword cHoldsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicatePredicateExpressionParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//ConstraintSentence:
		//	'for'
		//	quantifications=QuantificationList?
		//	nodes=NodeReferenceList?
		//	'holds'
		//	predicate=PredicateExpression;
		@Override public ParserRule getRule() { return rule; }

		//'for' quantifications=QuantificationList? nodes=NodeReferenceList? 'holds' predicate=PredicateExpression
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//quantifications=QuantificationList?
		public Assignment getQuantificationsAssignment_1() { return cQuantificationsAssignment_1; }

		//QuantificationList
		public RuleCall getQuantificationsQuantificationListParserRuleCall_1_0() { return cQuantificationsQuantificationListParserRuleCall_1_0; }

		//nodes=NodeReferenceList?
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }

		//NodeReferenceList
		public RuleCall getNodesNodeReferenceListParserRuleCall_2_0() { return cNodesNodeReferenceListParserRuleCall_2_0; }

		//'holds'
		public Keyword getHoldsKeyword_3() { return cHoldsKeyword_3; }

		//predicate=PredicateExpression
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }

		//PredicateExpression
		public RuleCall getPredicatePredicateExpressionParserRuleCall_4_0() { return cPredicatePredicateExpressionParserRuleCall_4_0; }
	}

	public class PredicateDefinitionSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PredicateDefinitionSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBodySentencesParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PredicateDefinitionSentence:
		//	'define' name=ID parameters=ParameterList? 'as' '{' body=BodySentences '}';
		@Override public ParserRule getRule() { return rule; }

		//'define' name=ID parameters=ParameterList? 'as' '{' body=BodySentences '}'
		public Group getGroup() { return cGroup; }

		//'define'
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }

		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//body=BodySentences
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//BodySentences
		public RuleCall getBodyBodySentencesParserRuleCall_5_0() { return cBodyBodySentencesParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class NodeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.NodeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cCollectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCollectionAsteriskKeyword_1_0 = (Keyword)cCollectionAssignment_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectorsSelectorListParserRuleCall_2_0 = (RuleCall)cSelectorsAssignment_2.eContents().get(0);
		
		//NodeDefinition:
		//	name=ID collection?='*'? selectors=SelectorList?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID collection?='*'? selectors=SelectorList?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//collection?='*'?
		public Assignment getCollectionAssignment_1() { return cCollectionAssignment_1; }

		//'*'
		public Keyword getCollectionAsteriskKeyword_1_0() { return cCollectionAsteriskKeyword_1_0; }

		//selectors=SelectorList?
		public Assignment getSelectorsAssignment_2() { return cSelectorsAssignment_2; }

		//SelectorList
		public RuleCall getSelectorsSelectorListParserRuleCall_2_0() { return cSelectorsSelectorListParserRuleCall_2_0; }
	}

	public class NodeReferenceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.NodeReferenceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNodesNodeDefinitionCrossReference_0_0 = (CrossReference)cNodesAssignment_0.eContents().get(0);
		private final RuleCall cNodesNodeDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cNodesNodeDefinitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNodesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNodesNodeDefinitionCrossReference_1_1_0 = (CrossReference)cNodesAssignment_1_1.eContents().get(0);
		private final RuleCall cNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNodesNodeDefinitionCrossReference_1_1_0.eContents().get(1);
		
		//NodeReferenceList:
		//	nodes+=[NodeDefinition] (',' nodes+=[NodeDefinition])*;
		@Override public ParserRule getRule() { return rule; }

		//nodes+=[NodeDefinition] (',' nodes+=[NodeDefinition])*
		public Group getGroup() { return cGroup; }

		//nodes+=[NodeDefinition]
		public Assignment getNodesAssignment_0() { return cNodesAssignment_0; }

		//[NodeDefinition]
		public CrossReference getNodesNodeDefinitionCrossReference_0_0() { return cNodesNodeDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getNodesNodeDefinitionIDTerminalRuleCall_0_0_1() { return cNodesNodeDefinitionIDTerminalRuleCall_0_0_1; }

		//(',' nodes+=[NodeDefinition])*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//nodes+=[NodeDefinition]
		public Assignment getNodesAssignment_1_1() { return cNodesAssignment_1_1; }

		//[NodeDefinition]
		public CrossReference getNodesNodeDefinitionCrossReference_1_1_0() { return cNodesNodeDefinitionCrossReference_1_1_0; }

		//ID
		public RuleCall getNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1() { return cNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1; }
	}

	public class TargetDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.TargetDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLocalAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLocalNodeDefinitionParserRuleCall_0_0_0 = (RuleCall)cLocalAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionNodeDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhereKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBodyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBodyBodySentencesParserRuleCall_2_2_0 = (RuleCall)cBodyAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cThenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cThenXBlockExpressionParserRuleCall_3_1_0 = (RuleCall)cThenAssignment_3_1.eContents().get(0);
		
		//TargetDefinition:
		//	(local=NodeDefinition ':')? definition=NodeDefinition ('where' '{' body=BodySentences '}')? ('then'
		//	then=XBlockExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//(local=NodeDefinition ':')? definition=NodeDefinition ('where' '{' body=BodySentences '}')? ('then'
		//then=XBlockExpression)?
		public Group getGroup() { return cGroup; }

		//(local=NodeDefinition ':')?
		public Group getGroup_0() { return cGroup_0; }

		//local=NodeDefinition
		public Assignment getLocalAssignment_0_0() { return cLocalAssignment_0_0; }

		//NodeDefinition
		public RuleCall getLocalNodeDefinitionParserRuleCall_0_0_0() { return cLocalNodeDefinitionParserRuleCall_0_0_0; }

		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//definition=NodeDefinition
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//NodeDefinition
		public RuleCall getDefinitionNodeDefinitionParserRuleCall_1_0() { return cDefinitionNodeDefinitionParserRuleCall_1_0; }

		//('where' '{' body=BodySentences '}')?
		public Group getGroup_2() { return cGroup_2; }

		//'where'
		public Keyword getWhereKeyword_2_0() { return cWhereKeyword_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//body=BodySentences
		public Assignment getBodyAssignment_2_2() { return cBodyAssignment_2_2; }

		//BodySentences
		public RuleCall getBodyBodySentencesParserRuleCall_2_2_0() { return cBodyBodySentencesParserRuleCall_2_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//('then' then=XBlockExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//'then'
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }

		//then=XBlockExpression
		public Assignment getThenAssignment_3_1() { return cThenAssignment_3_1; }

		//XBlockExpression
		public RuleCall getThenXBlockExpressionParserRuleCall_3_1_0() { return cThenXBlockExpressionParserRuleCall_3_1_0; }
	}

	public class SelectorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.SelectorList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBeingKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSelectorsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSelectorsSelectorListDefParserRuleCall_0_1_0 = (RuleCall)cSelectorsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorListDefParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SelectorList:
		//	'being' selectors=SelectorListDef | '(' selectors=SelectorListDef ')';
		@Override public ParserRule getRule() { return rule; }

		//'being' selectors=SelectorListDef | '(' selectors=SelectorListDef ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'being' selectors=SelectorListDef
		public Group getGroup_0() { return cGroup_0; }

		//'being'
		public Keyword getBeingKeyword_0_0() { return cBeingKeyword_0_0; }

		//selectors=SelectorListDef
		public Assignment getSelectorsAssignment_0_1() { return cSelectorsAssignment_0_1; }

		//SelectorListDef
		public RuleCall getSelectorsSelectorListDefParserRuleCall_0_1_0() { return cSelectorsSelectorListDefParserRuleCall_0_1_0; }

		//'(' selectors=SelectorListDef ')'
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//selectors=SelectorListDef
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//SelectorListDef
		public RuleCall getSelectorsSelectorListDefParserRuleCall_1_1_0() { return cSelectorsSelectorListDefParserRuleCall_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class SelectorListDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.SelectorListDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorsSelectorParserRuleCall_0_0 = (RuleCall)cSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		
		//SelectorListDef:
		//	selectors+=Selector ('or' selectors+=Selector)*;
		@Override public ParserRule getRule() { return rule; }

		//selectors+=Selector ('or' selectors+=Selector)*
		public Group getGroup() { return cGroup; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_0() { return cSelectorsAssignment_0; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_0_0() { return cSelectorsSelectorParserRuleCall_0_0; }

		//('or' selectors+=Selector)*
		public Group getGroup_1() { return cGroup_1; }

		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_1_0() { return cSelectorsSelectorParserRuleCall_1_1_0; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Selector");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//Selector:
		//	type=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=ID
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0() { return cTypeIDTerminalRuleCall_0; }
	}

	public class PredicateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PredicateExpression");
		private final RuleCall cAndExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PredicateExpression:
		//	AndExpression;
		@Override public ParserRule getRule() { return rule; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall() { return cAndExpressionParserRuleCall; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//AndExpression PredicateExpression:
		//	OrExpression ({AndExpression.lhs=current} ('and' | ',') rhs=OrExpression)*
		@Override public ParserRule getRule() { return rule; }

		//OrExpression ({AndExpression.lhs=current} ('and' | ',') rhs=OrExpression)*
		public Group getGroup() { return cGroup; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }

		//({AndExpression.lhs=current} ('and' | ',') rhs=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.lhs=current}
		public Action getAndExpressionLhsAction_1_0() { return cAndExpressionLhsAction_1_0; }

		//('and' | ',')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//'and'
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }

		//','
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//rhs=OrExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//OrExpression
		public RuleCall getRhsOrExpressionParserRuleCall_1_2_0() { return cRhsOrExpressionParserRuleCall_1_2_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsImpliesExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//OrExpression PredicateExpression:
		//	ImpliesExpression ({OrExpression.lhs=current} 'or' rhs=ImpliesExpression)*
		@Override public ParserRule getRule() { return rule; }

		//ImpliesExpression ({OrExpression.lhs=current} 'or' rhs=ImpliesExpression)*
		public Group getGroup() { return cGroup; }

		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_0() { return cImpliesExpressionParserRuleCall_0; }

		//({OrExpression.lhs=current} 'or' rhs=ImpliesExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.lhs=current}
		public Action getOrExpressionLhsAction_1_0() { return cOrExpressionLhsAction_1_0; }

		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//rhs=ImpliesExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//ImpliesExpression
		public RuleCall getRhsImpliesExpressionParserRuleCall_1_2_0() { return cRhsImpliesExpressionParserRuleCall_1_2_0; }
	}

	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImpliesExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cImpliesKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//ImpliesExpression PredicateExpression:
		//	NotExpression ({ImpliesExpression.lhs=current} ('implies' | '=>') rhs=NotExpression)?
		@Override public ParserRule getRule() { return rule; }

		//NotExpression ({ImpliesExpression.lhs=current} ('implies' | '=>') rhs=NotExpression)?
		public Group getGroup() { return cGroup; }

		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }

		//({ImpliesExpression.lhs=current} ('implies' | '=>') rhs=NotExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ImpliesExpression.lhs=current}
		public Action getImpliesExpressionLhsAction_1_0() { return cImpliesExpressionLhsAction_1_0; }

		//('implies' | '=>')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//'implies'
		public Keyword getImpliesKeyword_1_1_0() { return cImpliesKeyword_1_1_0; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1_1; }

		//rhs=NotExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//NotExpression
		public RuleCall getRhsNotExpressionParserRuleCall_1_2_0() { return cRhsNotExpressionParserRuleCall_1_2_0; }
	}

	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.NotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedNotKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Assignment cInnerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInnerPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cInnerAssignment_1.eContents().get(0);
		
		//NotExpression PredicateExpression:
		//	=> negated?='not'? inner=PrimaryExpression
		@Override public ParserRule getRule() { return rule; }

		//=> negated?='not'? inner=PrimaryExpression
		public Group getGroup() { return cGroup; }

		//=> negated?='not'?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }

		//'not'
		public Keyword getNegatedNotKeyword_0_0() { return cNegatedNotKeyword_0_0; }

		//inner=PrimaryExpression
		public Assignment getInnerAssignment_1() { return cInnerAssignment_1; }

		//PrimaryExpression
		public RuleCall getInnerPrimaryExpressionParserRuleCall_1_0() { return cInnerPrimaryExpressionParserRuleCall_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCallAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCallPredicateCallParserRuleCall_0_0 = (RuleCall)cCallAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInnerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInnerPredicateExpressionParserRuleCall_1_1_0 = (RuleCall)cInnerAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression PredicateExpression:
		//	call=PredicateCall | '(' inner=PredicateExpression ')'
		@Override public ParserRule getRule() { return rule; }

		//call=PredicateCall | '(' inner=PredicateExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//call=PredicateCall
		public Assignment getCallAssignment_0() { return cCallAssignment_0; }

		//PredicateCall
		public RuleCall getCallPredicateCallParserRuleCall_0_0() { return cCallPredicateCallParserRuleCall_0_0; }

		//'(' inner=PredicateExpression ')'
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//inner=PredicateExpression
		public Assignment getInnerAssignment_1_1() { return cInnerAssignment_1_1; }

		//PredicateExpression
		public RuleCall getInnerPredicateExpressionParserRuleCall_1_1_0() { return cInnerPredicateExpressionParserRuleCall_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class PredicateCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PredicateCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPropertyRelationPredicateParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDefinitionSentencePredicateParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cPredicateReferenceParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cPredicateXExpressionParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cErrorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cErrorErrorDefinitionCrossReference_1_1_0 = (CrossReference)cErrorAssignment_1_1.eContents().get(0);
		private final RuleCall cErrorErrorDefinitionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cErrorErrorDefinitionCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PredicateCall:
		//	(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference | PredicateXExpression) ('['
		//	error=[ErrorDefinition] ']')?;
		@Override public ParserRule getRule() { return rule; }

		//(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference | PredicateXExpression) ('['
		//error=[ErrorDefinition] ']')?
		public Group getGroup() { return cGroup; }

		//(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference | PredicateXExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//PropertyRelationPredicate
		public RuleCall getPropertyRelationPredicateParserRuleCall_0_0() { return cPropertyRelationPredicateParserRuleCall_0_0; }

		//DefinitionSentencePredicate
		public RuleCall getDefinitionSentencePredicateParserRuleCall_0_1() { return cDefinitionSentencePredicateParserRuleCall_0_1; }

		//PredicateReference
		public RuleCall getPredicateReferenceParserRuleCall_0_2() { return cPredicateReferenceParserRuleCall_0_2; }

		//PredicateXExpression
		public RuleCall getPredicateXExpressionParserRuleCall_0_3() { return cPredicateXExpressionParserRuleCall_0_3; }

		//('[' error=[ErrorDefinition] ']')?
		public Group getGroup_1() { return cGroup_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//error=[ErrorDefinition]
		public Assignment getErrorAssignment_1_1() { return cErrorAssignment_1_1; }

		//[ErrorDefinition]
		public CrossReference getErrorErrorDefinitionCrossReference_1_1_0() { return cErrorErrorDefinitionCrossReference_1_1_0; }

		//ID
		public RuleCall getErrorErrorDefinitionIDTerminalRuleCall_1_1_0_1() { return cErrorErrorDefinitionIDTerminalRuleCall_1_1_0_1; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class PredicateXExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PredicateXExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//PredicateXExpression:
		//	expression=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_0() { return cExpressionXBlockExpressionParserRuleCall_0; }
	}

	public class PropertyRelationPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PropertyRelationPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPropertyExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationPropertyRelationEnumRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsPropertyExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//PropertyRelationPredicate:
		//	lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression;
		@Override public ParserRule getRule() { return rule; }

		//lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression
		public Group getGroup() { return cGroup; }

		//lhs=PropertyExpression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//PropertyExpression
		public RuleCall getLhsPropertyExpressionParserRuleCall_0_0() { return cLhsPropertyExpressionParserRuleCall_0_0; }

		//relation=PropertyRelation
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }

		//PropertyRelation
		public RuleCall getRelationPropertyRelationEnumRuleCall_1_0() { return cRelationPropertyRelationEnumRuleCall_1_0; }

		//rhs=PropertyExpression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//PropertyExpression
		public RuleCall getRhsPropertyExpressionParserRuleCall_2_0() { return cRhsPropertyExpressionParserRuleCall_2_0; }
	}

	public class DefinitionSentencePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.DefinitionSentencePredicate");
		private final Assignment cSentenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSentenceDefinitionSentenceParserRuleCall_0 = (RuleCall)cSentenceAssignment.eContents().get(0);
		
		//DefinitionSentencePredicate:
		//	sentence=DefinitionSentence;
		@Override public ParserRule getRule() { return rule; }

		//sentence=DefinitionSentence
		public Assignment getSentenceAssignment() { return cSentenceAssignment; }

		//DefinitionSentence
		public RuleCall getSentenceDefinitionSentenceParserRuleCall_0() { return cSentenceDefinitionSentenceParserRuleCall_0; }
	}

	public class PredicateReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PredicateReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferencePredicateDefinitionSentenceCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1 = (RuleCall)cReferencePredicateDefinitionSentenceCrossReference_0_0.eContents().get(1);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsArgumentListParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		
		//PredicateReference:
		//	reference=[PredicateDefinitionSentence] arguments=ArgumentList;
		@Override public ParserRule getRule() { return rule; }

		//reference=[PredicateDefinitionSentence] arguments=ArgumentList
		public Group getGroup() { return cGroup; }

		//reference=[PredicateDefinitionSentence]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//[PredicateDefinitionSentence]
		public CrossReference getReferencePredicateDefinitionSentenceCrossReference_0_0() { return cReferencePredicateDefinitionSentenceCrossReference_0_0; }

		//ID
		public RuleCall getReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1() { return cReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1; }

		//arguments=ArgumentList
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//ArgumentList
		public RuleCall getArgumentsArgumentListParserRuleCall_1_0() { return cArgumentsArgumentListParserRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Parameter");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNodeNodeDefinitionParserRuleCall_0 = (RuleCall)cNodeAssignment.eContents().get(0);
		
		//Parameter:
		//	node=NodeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//node=NodeDefinition
		public Assignment getNodeAssignment() { return cNodeAssignment; }

		//NodeDefinition
		public RuleCall getNodeNodeDefinitionParserRuleCall_0() { return cNodeNodeDefinitionParserRuleCall_0; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	parameters+=Parameter (',' parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameters+=Parameter (',' parameters+=Parameter)*
		public Group getGroup() { return cGroup; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_0() { return cParametersParameterParserRuleCall_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Argument");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNodeNodeDefinitionCrossReference_0 = (CrossReference)cNodeAssignment.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_0.eContents().get(1);
		
		//Argument:
		//	node=[NodeDefinition];
		@Override public ParserRule getRule() { return rule; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment() { return cNodeAssignment; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_0() { return cNodeNodeDefinitionCrossReference_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_0_1; }
	}

	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		
		//ArgumentList:
		//	arguments+=Argument (',' arguments+=Argument)*;
		@Override public ParserRule getRule() { return rule; }

		//arguments+=Argument (',' arguments+=Argument)*
		public Group getGroup() { return cGroup; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_0_0() { return cArgumentsArgumentParserRuleCall_0_0; }

		//(',' arguments+=Argument)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_1_0() { return cArgumentsArgumentParserRuleCall_1_1_0; }
	}

	public class XXAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.XXAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXXAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNodeNodeDefinitionCrossReference_2_0 = (CrossReference)cNodeAssignment_2.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyIDTerminalRuleCall_4_0 = (RuleCall)cPropertyAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionXPrimaryExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		
		//XXAssignment xbase::XExpression:
		//	{XXAssignment}
		//	'set' node=[NodeDefinition] '.' property=ID 'to' expression=XPrimaryExpression
		@Override public ParserRule getRule() { return rule; }

		//{XXAssignment} 'set' node=[NodeDefinition] '.' property=ID 'to' expression=XPrimaryExpression
		public Group getGroup() { return cGroup; }

		//{XXAssignment}
		public Action getXXAssignmentAction_0() { return cXXAssignmentAction_0; }

		//'set'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_2_0() { return cNodeNodeDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_2_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_2_0_1; }

		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//property=ID
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//ID
		public RuleCall getPropertyIDTerminalRuleCall_4_0() { return cPropertyIDTerminalRuleCall_4_0; }

		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//expression=XPrimaryExpression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }

		//XPrimaryExpression
		public RuleCall getExpressionXPrimaryExpressionParserRuleCall_6_0() { return cExpressionXPrimaryExpressionParserRuleCall_6_0; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXSynchronizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXFeatureCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXIfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXForLoopExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXBasicForLoopExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXWhileExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXDoWhileExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXThrowExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXReturnExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cXXPropertyExpressionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cXXAssignmentParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//XPrimaryExpression xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | XXPropertyExpression |
		//	XXAssignment
		@Override public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | XXPropertyExpression |
		//XXAssignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XSynchronizedExpression
		public RuleCall getXSynchronizedExpressionParserRuleCall_3() { return cXSynchronizedExpressionParserRuleCall_3; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_4() { return cXFeatureCallParserRuleCall_4; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_5() { return cXLiteralParserRuleCall_5; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_6() { return cXIfExpressionParserRuleCall_6; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_7() { return cXForLoopExpressionParserRuleCall_7; }

		//XBasicForLoopExpression
		public RuleCall getXBasicForLoopExpressionParserRuleCall_8() { return cXBasicForLoopExpressionParserRuleCall_8; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_9() { return cXWhileExpressionParserRuleCall_9; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_10() { return cXDoWhileExpressionParserRuleCall_10; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_11() { return cXThrowExpressionParserRuleCall_11; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_12() { return cXReturnExpressionParserRuleCall_12; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_13() { return cXTryCatchFinallyExpressionParserRuleCall_13; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_14() { return cXParenthesizedExpressionParserRuleCall_14; }

		//XXPropertyExpression
		public RuleCall getXXPropertyExpressionParserRuleCall_15() { return cXXPropertyExpressionParserRuleCall_15; }

		//XXAssignment
		public RuleCall getXXAssignmentParserRuleCall_16() { return cXXAssignmentParserRuleCall_16; }
	}

	public class XXPropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.XXPropertyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXXPropertyExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNodeNodeDefinitionCrossReference_2_0 = (CrossReference)cNodeAssignment_2.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cTildeGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XXPropertyExpression xbase::XExpression:
		//	{XXPropertyExpression}
		//	'[[' node=[NodeDefinition] '~>' name=ID ']]'
		@Override public ParserRule getRule() { return rule; }

		//{XXPropertyExpression} '[[' node=[NodeDefinition] '~>' name=ID ']]'
		public Group getGroup() { return cGroup; }

		//{XXPropertyExpression}
		public Action getXXPropertyExpressionAction_0() { return cXXPropertyExpressionAction_0; }

		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_1() { return cLeftSquareBracketLeftSquareBracketKeyword_1; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_2_0() { return cNodeNodeDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_2_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_2_0_1; }

		//'~>'
		public Keyword getTildeGreaterThanSignKeyword_3() { return cTildeGreaterThanSignKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_5() { return cRightSquareBracketRightSquareBracketKeyword_5; }
	}

	public class QuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Quantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantorQuantorEnumRuleCall_0_0 = (RuleCall)cQuantorAssignment_0.eContents().get(0);
		private final Assignment cNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeNodeDefinitionParserRuleCall_1_0 = (RuleCall)cNodeAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNodeSetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNodeSetNodeDefinitionCrossReference_3_0 = (CrossReference)cNodeSetAssignment_3.eContents().get(0);
		private final RuleCall cNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cNodeSetNodeDefinitionCrossReference_3_0.eContents().get(1);
		
		//Quantification:
		//	quantor=Quantor node=NodeDefinition 'in' nodeSet=[NodeDefinition];
		@Override public ParserRule getRule() { return rule; }

		//quantor=Quantor node=NodeDefinition 'in' nodeSet=[NodeDefinition]
		public Group getGroup() { return cGroup; }

		//quantor=Quantor
		public Assignment getQuantorAssignment_0() { return cQuantorAssignment_0; }

		//Quantor
		public RuleCall getQuantorQuantorEnumRuleCall_0_0() { return cQuantorQuantorEnumRuleCall_0_0; }

		//node=NodeDefinition
		public Assignment getNodeAssignment_1() { return cNodeAssignment_1; }

		//NodeDefinition
		public RuleCall getNodeNodeDefinitionParserRuleCall_1_0() { return cNodeNodeDefinitionParserRuleCall_1_0; }

		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//nodeSet=[NodeDefinition]
		public Assignment getNodeSetAssignment_3() { return cNodeSetAssignment_3; }

		//[NodeDefinition]
		public CrossReference getNodeSetNodeDefinitionCrossReference_3_0() { return cNodeSetNodeDefinitionCrossReference_3_0; }

		//ID
		public RuleCall getNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1() { return cNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1; }
	}

	public class QuantificationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.QuantificationList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantificationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantificationsQuantificationParserRuleCall_0_0 = (RuleCall)cQuantificationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cQuantificationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQuantificationsQuantificationParserRuleCall_1_1_0 = (RuleCall)cQuantificationsAssignment_1_1.eContents().get(0);
		
		//QuantificationList:
		//	quantifications+=Quantification (',' quantifications+=Quantification)*;
		@Override public ParserRule getRule() { return rule; }

		//quantifications+=Quantification (',' quantifications+=Quantification)*
		public Group getGroup() { return cGroup; }

		//quantifications+=Quantification
		public Assignment getQuantificationsAssignment_0() { return cQuantificationsAssignment_0; }

		//Quantification
		public RuleCall getQuantificationsQuantificationParserRuleCall_0_0() { return cQuantificationsQuantificationParserRuleCall_0_0; }

		//(',' quantifications+=Quantification)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//quantifications+=Quantification
		public Assignment getQuantificationsAssignment_1_1() { return cQuantificationsAssignment_1_1; }

		//Quantification
		public RuleCall getQuantificationsQuantificationParserRuleCall_1_1_0() { return cQuantificationsQuantificationParserRuleCall_1_1_0; }
	}

	public class PropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PropertyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PropertyExpression:
		//	PropertyValueExpression | PropertyReferenceExpression;
		@Override public ParserRule getRule() { return rule; }

		//PropertyValueExpression | PropertyReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyValueExpression
		public RuleCall getPropertyValueExpressionParserRuleCall_0() { return cPropertyValueExpressionParserRuleCall_0; }

		//PropertyReferenceExpression
		public RuleCall getPropertyReferenceExpressionParserRuleCall_1() { return cPropertyReferenceExpressionParserRuleCall_1; }
	}

	public class PropertyValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PropertyValueExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//PropertyValueExpression:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class PropertyReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PropertyReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNodeNodeDefinitionCrossReference_0_0 = (CrossReference)cNodeAssignment_0.eContents().get(0);
		private final RuleCall cNodeNodeDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cNodeNodeDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		
		//PropertyReferenceExpression:
		//	node=[NodeDefinition] '.' Property=ID;
		@Override public ParserRule getRule() { return rule; }

		//node=[NodeDefinition] '.' Property=ID
		public Group getGroup() { return cGroup; }

		//node=[NodeDefinition]
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }

		//[NodeDefinition]
		public CrossReference getNodeNodeDefinitionCrossReference_0_0() { return cNodeNodeDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getNodeNodeDefinitionIDTerminalRuleCall_0_0_1() { return cNodeNodeDefinitionIDTerminalRuleCall_0_0_1; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//Property=ID
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }

		//ID
		public RuleCall getPropertyIDTerminalRuleCall_2_0() { return cPropertyIDTerminalRuleCall_2_0; }
	}

	public class RelationQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.RelationQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMustHaveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMustNotHaveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCanHaveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RelationQualifier:
		//	MustHave | MustNotHave | CanHave;
		@Override public ParserRule getRule() { return rule; }

		//MustHave | MustNotHave | CanHave
		public Alternatives getAlternatives() { return cAlternatives; }

		//MustHave
		public RuleCall getMustHaveParserRuleCall_0() { return cMustHaveParserRuleCall_0; }

		//MustNotHave
		public RuleCall getMustNotHaveParserRuleCall_1() { return cMustNotHaveParserRuleCall_1; }

		//CanHave
		public RuleCall getCanHaveParserRuleCall_2() { return cCanHaveParserRuleCall_2; }
	}

	public class MustHaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.MustHave");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMustHaveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMustHaveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MustHave RelationQualifier:
		//	{MustHave}
		//	'must have'
		@Override public ParserRule getRule() { return rule; }

		//{MustHave} 'must have'
		public Group getGroup() { return cGroup; }

		//{MustHave}
		public Action getMustHaveAction_0() { return cMustHaveAction_0; }

		//'must have'
		public Keyword getMustHaveKeyword_1() { return cMustHaveKeyword_1; }
	}

	public class MustNotHaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.MustNotHave");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMustNotHaveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMustNotHaveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MustNotHave RelationQualifier:
		//	{MustNotHave}
		//	'must not have'
		@Override public ParserRule getRule() { return rule; }

		//{MustNotHave} 'must not have'
		public Group getGroup() { return cGroup; }

		//{MustNotHave}
		public Action getMustNotHaveAction_0() { return cMustNotHaveAction_0; }

		//'must not have'
		public Keyword getMustNotHaveKeyword_1() { return cMustNotHaveKeyword_1; }
	}

	public class CanHaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.CanHave");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCanHaveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCanHaveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CanHave RelationQualifier:
		//	{CanHave}
		//	'can have'
		@Override public ParserRule getRule() { return rule; }

		//{CanHave} 'can have'
		public Group getGroup() { return cGroup; }

		//{CanHave}
		public Action getCanHaveAction_0() { return cCanHaveAction_0; }

		//'can have'
		public Keyword getCanHaveKeyword_1() { return cCanHaveKeyword_1; }
	}

	public class RelationQuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.RelationQuantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOneParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultipleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtLeastParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAtMostParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExactlyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//RelationQuantifier:
		//	One | Multiple | AtLeast | AtMost | Exactly;
		@Override public ParserRule getRule() { return rule; }

		//One | Multiple | AtLeast | AtMost | Exactly
		public Alternatives getAlternatives() { return cAlternatives; }

		//One
		public RuleCall getOneParserRuleCall_0() { return cOneParserRuleCall_0; }

		//Multiple
		public RuleCall getMultipleParserRuleCall_1() { return cMultipleParserRuleCall_1; }

		//AtLeast
		public RuleCall getAtLeastParserRuleCall_2() { return cAtLeastParserRuleCall_2; }

		//AtMost
		public RuleCall getAtMostParserRuleCall_3() { return cAtMostParserRuleCall_3; }

		//Exactly
		public RuleCall getExactlyParserRuleCall_4() { return cExactlyParserRuleCall_4; }
	}

	public class OneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.One");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOneAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//One RelationQuantifier:
		//	{One} 'one'?
		@Override public ParserRule getRule() { return rule; }

		//{One} 'one'?
		public Group getGroup() { return cGroup; }

		//{One}
		public Action getOneAction_0() { return cOneAction_0; }

		//'one'?
		public Keyword getOneKeyword_1() { return cOneKeyword_1; }
	}

	public class MultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Multiple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultipleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMultipleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Multiple RelationQuantifier:
		//	{Multiple}
		//	'multiple'
		@Override public ParserRule getRule() { return rule; }

		//{Multiple} 'multiple'
		public Group getGroup() { return cGroup; }

		//{Multiple}
		public Action getMultipleAction_0() { return cMultipleAction_0; }

		//'multiple'
		public Keyword getMultipleKeyword_1() { return cMultipleKeyword_1; }
	}

	public class AtLeastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.AtLeast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtLeastAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAtLeastKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQuantityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuantityINTTerminalRuleCall_2_0 = (RuleCall)cQuantityAssignment_2.eContents().get(0);
		
		//AtLeast RelationQuantifier:
		//	{AtLeast}
		//	'at least'
		//	quantity=INT
		@Override public ParserRule getRule() { return rule; }

		//{AtLeast} 'at least' quantity=INT
		public Group getGroup() { return cGroup; }

		//{AtLeast}
		public Action getAtLeastAction_0() { return cAtLeastAction_0; }

		//'at least'
		public Keyword getAtLeastKeyword_1() { return cAtLeastKeyword_1; }

		//quantity=INT
		public Assignment getQuantityAssignment_2() { return cQuantityAssignment_2; }

		//INT
		public RuleCall getQuantityINTTerminalRuleCall_2_0() { return cQuantityINTTerminalRuleCall_2_0; }
	}

	public class AtMostElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.AtMost");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtMostAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAtMostKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQuantityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuantityINTTerminalRuleCall_2_0 = (RuleCall)cQuantityAssignment_2.eContents().get(0);
		
		//AtMost RelationQuantifier:
		//	{AtMost}
		//	'at most'
		//	quantity=INT
		@Override public ParserRule getRule() { return rule; }

		//{AtMost} 'at most' quantity=INT
		public Group getGroup() { return cGroup; }

		//{AtMost}
		public Action getAtMostAction_0() { return cAtMostAction_0; }

		//'at most'
		public Keyword getAtMostKeyword_1() { return cAtMostKeyword_1; }

		//quantity=INT
		public Assignment getQuantityAssignment_2() { return cQuantityAssignment_2; }

		//INT
		public RuleCall getQuantityINTTerminalRuleCall_2_0() { return cQuantityINTTerminalRuleCall_2_0; }
	}

	public class ExactlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Exactly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExactlyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExactlyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQuantityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuantityINTTerminalRuleCall_2_0 = (RuleCall)cQuantityAssignment_2.eContents().get(0);
		
		//Exactly RelationQuantifier:
		//	{Exactly}
		//	'exactly'
		//	quantity=INT
		@Override public ParserRule getRule() { return rule; }

		//{Exactly} 'exactly' quantity=INT
		public Group getGroup() { return cGroup; }

		//{Exactly}
		public Action getExactlyAction_0() { return cExactlyAction_0; }

		//'exactly'
		public Keyword getExactlyKeyword_1() { return cExactlyKeyword_1; }

		//quantity=INT
		public Assignment getQuantityAssignment_2() { return cQuantityAssignment_2; }

		//INT
		public RuleCall getQuantityINTTerminalRuleCall_2_0() { return cQuantityINTTerminalRuleCall_2_0; }
	}

	public class RelationAxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.RelationAxis");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChildParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAncestorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDescendantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//RelationAxis:
		//	Parent | Child | Ancestor | Descendant;
		@Override public ParserRule getRule() { return rule; }

		//Parent | Child | Ancestor | Descendant
		public Alternatives getAlternatives() { return cAlternatives; }

		//Parent
		public RuleCall getParentParserRuleCall_0() { return cParentParserRuleCall_0; }

		//Child
		public RuleCall getChildParserRuleCall_1() { return cChildParserRuleCall_1; }

		//Ancestor
		public RuleCall getAncestorParserRuleCall_2() { return cAncestorParserRuleCall_2; }

		//Descendant
		public RuleCall getDescendantParserRuleCall_3() { return cDescendantParserRuleCall_3; }
	}

	public class ParentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Parent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cParentKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cParentsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Parent RelationAxis:
		//	{Parent} ('parent' | 'parents')
		@Override public ParserRule getRule() { return rule; }

		//{Parent} ('parent' | 'parents')
		public Group getGroup() { return cGroup; }

		//{Parent}
		public Action getParentAction_0() { return cParentAction_0; }

		//('parent' | 'parents')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'parent'
		public Keyword getParentKeyword_1_0() { return cParentKeyword_1_0; }

		//'parents'
		public Keyword getParentsKeyword_1_1() { return cParentsKeyword_1_1; }
	}

	public class ChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Child");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cChildKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cChildrenKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Child RelationAxis:
		//	{Parent} ('child' | 'children')
		@Override public ParserRule getRule() { return rule; }

		//{Parent} ('child' | 'children')
		public Group getGroup() { return cGroup; }

		//{Parent}
		public Action getParentAction_0() { return cParentAction_0; }

		//('child' | 'children')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'child'
		public Keyword getChildKeyword_1_0() { return cChildKeyword_1_0; }

		//'children'
		public Keyword getChildrenKeyword_1_1() { return cChildrenKeyword_1_1; }
	}

	public class AncestorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Ancestor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAncestorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAncestorKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAncestorsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Ancestor RelationAxis:
		//	{Ancestor} ('ancestor' | 'ancestors')
		@Override public ParserRule getRule() { return rule; }

		//{Ancestor} ('ancestor' | 'ancestors')
		public Group getGroup() { return cGroup; }

		//{Ancestor}
		public Action getAncestorAction_0() { return cAncestorAction_0; }

		//('ancestor' | 'ancestors')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'ancestor'
		public Keyword getAncestorKeyword_1_0() { return cAncestorKeyword_1_0; }

		//'ancestors'
		public Keyword getAncestorsKeyword_1_1() { return cAncestorsKeyword_1_1; }
	}

	public class DescendantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Descendant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDescendantAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cDescendantKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cDescendantsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Descendant RelationAxis:
		//	{Descendant} ('descendant' | 'descendants')
		@Override public ParserRule getRule() { return rule; }

		//{Descendant} ('descendant' | 'descendants')
		public Group getGroup() { return cGroup; }

		//{Descendant}
		public Action getDescendantAction_0() { return cDescendantAction_0; }

		//('descendant' | 'descendants')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'descendant'
		public Keyword getDescendantKeyword_1_0() { return cDescendantKeyword_1_0; }

		//'descendants'
		public Keyword getDescendantsKeyword_1_1() { return cDescendantsKeyword_1_1; }
	}
	
	
	public class QuantorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.Quantor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEachEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEachEachKeyword_0_0 = (Keyword)cEachEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyAnyKeyword_1_0 = (Keyword)cAnyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Quantor:
		//	Each='each' | Any='any';
		public EnumRule getRule() { return rule; }

		//Each='each' | Any='any'
		public Alternatives getAlternatives() { return cAlternatives; }

		//Each='each'
		public EnumLiteralDeclaration getEachEnumLiteralDeclaration_0() { return cEachEnumLiteralDeclaration_0; }

		//'each'
		public Keyword getEachEachKeyword_0_0() { return cEachEachKeyword_0_0; }

		//Any='any'
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_1() { return cAnyEnumLiteralDeclaration_1; }

		//'any'
		public Keyword getAnyAnyKeyword_1_0() { return cAnyAnyKeyword_1_0; }
	}

	public class PropertyRelationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.isax.validation.dsl.Dsl.PropertyRelation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualsEqualsKeyword_0_0 = (Keyword)cEqualsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualsNotEqualsKeyword_1_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLesserEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLesserLesserThanKeyword_3_0 = (Keyword)cLesserEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterEqualsGreaterOrEqualsThanKeyword_4_0 = (Keyword)cGreaterEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLesserEqualsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLesserEqualsLesserOrEqualsThanKeyword_5_0 = (Keyword)cLesserEqualsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cContainsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cContainsContainsKeyword_6_0 = (Keyword)cContainsEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNotContainsEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNotContainsNotContainsKeyword_7_0 = (Keyword)cNotContainsEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cIntersectsEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cIntersectsIntersectsKeyword_8_0 = (Keyword)cIntersectsEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSubsetOfEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSubsetOfSubsetOfKeyword_9_0 = (Keyword)cSubsetOfEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum PropertyRelation:
		//	Equals='equals' | NotEquals='not equals' |
		//	Greater='greater than' | Lesser='lesser than' | GreaterEquals='greater or equals than' |
		//	LesserEquals='lesser or equals than' |
		//	Contains='contains' | NotContains='not contains' |
		//	Intersects='intersects' | SubsetOf='subset of';
		public EnumRule getRule() { return rule; }

		//Equals='equals' | NotEquals='not equals' | Greater='greater than' | Lesser='lesser than' |
		//GreaterEquals='greater or equals than' | LesserEquals='lesser or equals than' | Contains='contains' |
		//NotContains='not contains' | Intersects='intersects' | SubsetOf='subset of'
		public Alternatives getAlternatives() { return cAlternatives; }

		//Equals='equals'
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_0() { return cEqualsEnumLiteralDeclaration_0; }

		//'equals'
		public Keyword getEqualsEqualsKeyword_0_0() { return cEqualsEqualsKeyword_0_0; }

		//NotEquals='not equals'
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_1() { return cNotEqualsEnumLiteralDeclaration_1; }

		//'not equals'
		public Keyword getNotEqualsNotEqualsKeyword_1_0() { return cNotEqualsNotEqualsKeyword_1_0; }

		//Greater='greater than'
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//'greater than'
		public Keyword getGreaterGreaterThanKeyword_2_0() { return cGreaterGreaterThanKeyword_2_0; }

		//Lesser='lesser than'
		public EnumLiteralDeclaration getLesserEnumLiteralDeclaration_3() { return cLesserEnumLiteralDeclaration_3; }

		//'lesser than'
		public Keyword getLesserLesserThanKeyword_3_0() { return cLesserLesserThanKeyword_3_0; }

		//GreaterEquals='greater or equals than'
		public EnumLiteralDeclaration getGreaterEqualsEnumLiteralDeclaration_4() { return cGreaterEqualsEnumLiteralDeclaration_4; }

		//'greater or equals than'
		public Keyword getGreaterEqualsGreaterOrEqualsThanKeyword_4_0() { return cGreaterEqualsGreaterOrEqualsThanKeyword_4_0; }

		//LesserEquals='lesser or equals than'
		public EnumLiteralDeclaration getLesserEqualsEnumLiteralDeclaration_5() { return cLesserEqualsEnumLiteralDeclaration_5; }

		//'lesser or equals than'
		public Keyword getLesserEqualsLesserOrEqualsThanKeyword_5_0() { return cLesserEqualsLesserOrEqualsThanKeyword_5_0; }

		//Contains='contains'
		public EnumLiteralDeclaration getContainsEnumLiteralDeclaration_6() { return cContainsEnumLiteralDeclaration_6; }

		//'contains'
		public Keyword getContainsContainsKeyword_6_0() { return cContainsContainsKeyword_6_0; }

		//NotContains='not contains'
		public EnumLiteralDeclaration getNotContainsEnumLiteralDeclaration_7() { return cNotContainsEnumLiteralDeclaration_7; }

		//'not contains'
		public Keyword getNotContainsNotContainsKeyword_7_0() { return cNotContainsNotContainsKeyword_7_0; }

		//Intersects='intersects'
		public EnumLiteralDeclaration getIntersectsEnumLiteralDeclaration_8() { return cIntersectsEnumLiteralDeclaration_8; }

		//'intersects'
		public Keyword getIntersectsIntersectsKeyword_8_0() { return cIntersectsIntersectsKeyword_8_0; }

		//SubsetOf='subset of'
		public EnumLiteralDeclaration getSubsetOfEnumLiteralDeclaration_9() { return cSubsetOfEnumLiteralDeclaration_9; }

		//'subset of'
		public Keyword getSubsetOfSubsetOfKeyword_9_0() { return cSubsetOfSubsetOfKeyword_9_0; }
	}
	
	private final ValidatorElements pValidator;
	private final ErrorDefinitionElements pErrorDefinition;
	private final BodySentencesElements pBodySentences;
	private final SentenceElements pSentence;
	private final StartOnSentenceElements pStartOnSentence;
	private final DefinitionSentenceElements pDefinitionSentence;
	private final ConstraintSentenceElements pConstraintSentence;
	private final PredicateDefinitionSentenceElements pPredicateDefinitionSentence;
	private final NodeDefinitionElements pNodeDefinition;
	private final NodeReferenceListElements pNodeReferenceList;
	private final TargetDefinitionElements pTargetDefinition;
	private final SelectorListElements pSelectorList;
	private final SelectorListDefElements pSelectorListDef;
	private final SelectorElements pSelector;
	private final PredicateExpressionElements pPredicateExpression;
	private final AndExpressionElements pAndExpression;
	private final OrExpressionElements pOrExpression;
	private final ImpliesExpressionElements pImpliesExpression;
	private final NotExpressionElements pNotExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final PredicateCallElements pPredicateCall;
	private final PredicateXExpressionElements pPredicateXExpression;
	private final PropertyRelationPredicateElements pPropertyRelationPredicate;
	private final DefinitionSentencePredicateElements pDefinitionSentencePredicate;
	private final PredicateReferenceElements pPredicateReference;
	private final ParameterElements pParameter;
	private final ParameterListElements pParameterList;
	private final ArgumentElements pArgument;
	private final ArgumentListElements pArgumentList;
	private final XXAssignmentElements pXXAssignment;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final XXPropertyExpressionElements pXXPropertyExpression;
	private final QuantificationElements pQuantification;
	private final QuantificationListElements pQuantificationList;
	private final PropertyExpressionElements pPropertyExpression;
	private final PropertyValueExpressionElements pPropertyValueExpression;
	private final PropertyReferenceExpressionElements pPropertyReferenceExpression;
	private final RelationQualifierElements pRelationQualifier;
	private final MustHaveElements pMustHave;
	private final MustNotHaveElements pMustNotHave;
	private final CanHaveElements pCanHave;
	private final RelationQuantifierElements pRelationQuantifier;
	private final OneElements pOne;
	private final MultipleElements pMultiple;
	private final AtLeastElements pAtLeast;
	private final AtMostElements pAtMost;
	private final ExactlyElements pExactly;
	private final RelationAxisElements pRelationAxis;
	private final ParentElements pParent;
	private final ChildElements pChild;
	private final AncestorElements pAncestor;
	private final DescendantElements pDescendant;
	private final QuantorElements eQuantor;
	private final PropertyRelationElements ePropertyRelation;
	
	private final Grammar grammar;

	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	private final XbaseGrammarAccess gaXbase;

	private final XtypeGrammarAccess gaXtype;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
		XbaseGrammarAccess gaXbase,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pValidator = new ValidatorElements();
		this.pErrorDefinition = new ErrorDefinitionElements();
		this.pBodySentences = new BodySentencesElements();
		this.pSentence = new SentenceElements();
		this.pStartOnSentence = new StartOnSentenceElements();
		this.pDefinitionSentence = new DefinitionSentenceElements();
		this.pConstraintSentence = new ConstraintSentenceElements();
		this.pPredicateDefinitionSentence = new PredicateDefinitionSentenceElements();
		this.pNodeDefinition = new NodeDefinitionElements();
		this.pNodeReferenceList = new NodeReferenceListElements();
		this.pTargetDefinition = new TargetDefinitionElements();
		this.pSelectorList = new SelectorListElements();
		this.pSelectorListDef = new SelectorListDefElements();
		this.pSelector = new SelectorElements();
		this.pPredicateExpression = new PredicateExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pPredicateCall = new PredicateCallElements();
		this.pPredicateXExpression = new PredicateXExpressionElements();
		this.pPropertyRelationPredicate = new PropertyRelationPredicateElements();
		this.pDefinitionSentencePredicate = new DefinitionSentencePredicateElements();
		this.pPredicateReference = new PredicateReferenceElements();
		this.pParameter = new ParameterElements();
		this.pParameterList = new ParameterListElements();
		this.pArgument = new ArgumentElements();
		this.pArgumentList = new ArgumentListElements();
		this.pXXAssignment = new XXAssignmentElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pXXPropertyExpression = new XXPropertyExpressionElements();
		this.pQuantification = new QuantificationElements();
		this.pQuantificationList = new QuantificationListElements();
		this.pPropertyExpression = new PropertyExpressionElements();
		this.pPropertyValueExpression = new PropertyValueExpressionElements();
		this.pPropertyReferenceExpression = new PropertyReferenceExpressionElements();
		this.pRelationQualifier = new RelationQualifierElements();
		this.pMustHave = new MustHaveElements();
		this.pMustNotHave = new MustNotHaveElements();
		this.pCanHave = new CanHaveElements();
		this.pRelationQuantifier = new RelationQuantifierElements();
		this.pOne = new OneElements();
		this.pMultiple = new MultipleElements();
		this.pAtLeast = new AtLeastElements();
		this.pAtMost = new AtMostElements();
		this.pExactly = new ExactlyElements();
		this.pRelationAxis = new RelationAxisElements();
		this.pParent = new ParentElements();
		this.pChild = new ChildElements();
		this.pAncestor = new AncestorElements();
		this.pDescendant = new DescendantElements();
		this.eQuantor = new QuantorElements();
		this.ePropertyRelation = new PropertyRelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.isax.validation.dsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Validator:
	//	imports=XImportSection?
	//	startOn=StartOnSentence
	//	body=BodySentences
	//	predicates+=PredicateDefinitionSentence*
	//	errors+=ErrorDefinition*;
	public ValidatorElements getValidatorAccess() {
		return pValidator;
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}

	//ErrorDefinition:
	//	'[' name=ID ']'
	//	text=STRING;
	public ErrorDefinitionElements getErrorDefinitionAccess() {
		return pErrorDefinition;
	}
	
	public ParserRule getErrorDefinitionRule() {
		return getErrorDefinitionAccess().getRule();
	}

	//BodySentences:
	//	{BodySentences} (sentences+=DefinitionSentence | sentences+=ConstraintSentence)*;
	public BodySentencesElements getBodySentencesAccess() {
		return pBodySentences;
	}
	
	public ParserRule getBodySentencesRule() {
		return getBodySentencesAccess().getRule();
	}

	//Sentence:
	//	StartOnSentence | DefinitionSentence | ConstraintSentence | PredicateDefinitionSentence;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}

	//StartOnSentence:
	//	'start' 'on' definition=NodeDefinition;
	public StartOnSentenceElements getStartOnSentenceAccess() {
		return pStartOnSentence;
	}
	
	public ParserRule getStartOnSentenceRule() {
		return getStartOnSentenceAccess().getRule();
	}

	//DefinitionSentence:
	//	(quantification=Quantification | node=[NodeDefinition]) qualifier=RelationQualifier
	//	quantifier=RelationQuantifier
	//	axis=RelationAxis
	//	target=TargetDefinition;
	public DefinitionSentenceElements getDefinitionSentenceAccess() {
		return pDefinitionSentence;
	}
	
	public ParserRule getDefinitionSentenceRule() {
		return getDefinitionSentenceAccess().getRule();
	}

	//ConstraintSentence:
	//	'for'
	//	quantifications=QuantificationList?
	//	nodes=NodeReferenceList?
	//	'holds'
	//	predicate=PredicateExpression;
	public ConstraintSentenceElements getConstraintSentenceAccess() {
		return pConstraintSentence;
	}
	
	public ParserRule getConstraintSentenceRule() {
		return getConstraintSentenceAccess().getRule();
	}

	//PredicateDefinitionSentence:
	//	'define' name=ID parameters=ParameterList? 'as' '{' body=BodySentences '}';
	public PredicateDefinitionSentenceElements getPredicateDefinitionSentenceAccess() {
		return pPredicateDefinitionSentence;
	}
	
	public ParserRule getPredicateDefinitionSentenceRule() {
		return getPredicateDefinitionSentenceAccess().getRule();
	}

	//NodeDefinition:
	//	name=ID collection?='*'? selectors=SelectorList?;
	public NodeDefinitionElements getNodeDefinitionAccess() {
		return pNodeDefinition;
	}
	
	public ParserRule getNodeDefinitionRule() {
		return getNodeDefinitionAccess().getRule();
	}

	//NodeReferenceList:
	//	nodes+=[NodeDefinition] (',' nodes+=[NodeDefinition])*;
	public NodeReferenceListElements getNodeReferenceListAccess() {
		return pNodeReferenceList;
	}
	
	public ParserRule getNodeReferenceListRule() {
		return getNodeReferenceListAccess().getRule();
	}

	//TargetDefinition:
	//	(local=NodeDefinition ':')? definition=NodeDefinition ('where' '{' body=BodySentences '}')? ('then'
	//	then=XBlockExpression)?;
	public TargetDefinitionElements getTargetDefinitionAccess() {
		return pTargetDefinition;
	}
	
	public ParserRule getTargetDefinitionRule() {
		return getTargetDefinitionAccess().getRule();
	}

	//SelectorList:
	//	'being' selectors=SelectorListDef | '(' selectors=SelectorListDef ')';
	public SelectorListElements getSelectorListAccess() {
		return pSelectorList;
	}
	
	public ParserRule getSelectorListRule() {
		return getSelectorListAccess().getRule();
	}

	//SelectorListDef:
	//	selectors+=Selector ('or' selectors+=Selector)*;
	public SelectorListDefElements getSelectorListDefAccess() {
		return pSelectorListDef;
	}
	
	public ParserRule getSelectorListDefRule() {
		return getSelectorListDefAccess().getRule();
	}

	//Selector:
	//	type=ID;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//PredicateExpression:
	//	AndExpression;
	public PredicateExpressionElements getPredicateExpressionAccess() {
		return pPredicateExpression;
	}
	
	public ParserRule getPredicateExpressionRule() {
		return getPredicateExpressionAccess().getRule();
	}

	//AndExpression PredicateExpression:
	//	OrExpression ({AndExpression.lhs=current} ('and' | ',') rhs=OrExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OrExpression PredicateExpression:
	//	ImpliesExpression ({OrExpression.lhs=current} 'or' rhs=ImpliesExpression)*
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//ImpliesExpression PredicateExpression:
	//	NotExpression ({ImpliesExpression.lhs=current} ('implies' | '=>') rhs=NotExpression)?
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	//NotExpression PredicateExpression:
	//	=> negated?='not'? inner=PrimaryExpression
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//PrimaryExpression PredicateExpression:
	//	call=PredicateCall | '(' inner=PredicateExpression ')'
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//PredicateCall:
	//	(PropertyRelationPredicate | DefinitionSentencePredicate | PredicateReference | PredicateXExpression) ('['
	//	error=[ErrorDefinition] ']')?;
	public PredicateCallElements getPredicateCallAccess() {
		return pPredicateCall;
	}
	
	public ParserRule getPredicateCallRule() {
		return getPredicateCallAccess().getRule();
	}

	//PredicateXExpression:
	//	expression=XBlockExpression;
	public PredicateXExpressionElements getPredicateXExpressionAccess() {
		return pPredicateXExpression;
	}
	
	public ParserRule getPredicateXExpressionRule() {
		return getPredicateXExpressionAccess().getRule();
	}

	//PropertyRelationPredicate:
	//	lhs=PropertyExpression relation=PropertyRelation rhs=PropertyExpression;
	public PropertyRelationPredicateElements getPropertyRelationPredicateAccess() {
		return pPropertyRelationPredicate;
	}
	
	public ParserRule getPropertyRelationPredicateRule() {
		return getPropertyRelationPredicateAccess().getRule();
	}

	//DefinitionSentencePredicate:
	//	sentence=DefinitionSentence;
	public DefinitionSentencePredicateElements getDefinitionSentencePredicateAccess() {
		return pDefinitionSentencePredicate;
	}
	
	public ParserRule getDefinitionSentencePredicateRule() {
		return getDefinitionSentencePredicateAccess().getRule();
	}

	//PredicateReference:
	//	reference=[PredicateDefinitionSentence] arguments=ArgumentList;
	public PredicateReferenceElements getPredicateReferenceAccess() {
		return pPredicateReference;
	}
	
	public ParserRule getPredicateReferenceRule() {
		return getPredicateReferenceAccess().getRule();
	}

	//Parameter:
	//	node=NodeDefinition;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterList:
	//	parameters+=Parameter (',' parameters+=Parameter)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Argument:
	//	node=[NodeDefinition];
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//ArgumentList:
	//	arguments+=Argument (',' arguments+=Argument)*;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//XXAssignment xbase::XExpression:
	//	{XXAssignment}
	//	'set' node=[NodeDefinition] '.' property=ID 'to' expression=XPrimaryExpression
	public XXAssignmentElements getXXAssignmentAccess() {
		return pXXAssignment;
	}
	
	public ParserRule getXXAssignmentRule() {
		return getXXAssignmentAccess().getRule();
	}

	//XPrimaryExpression xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | XXPropertyExpression |
	//	XXAssignment
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XXPropertyExpression xbase::XExpression:
	//	{XXPropertyExpression}
	//	'[[' node=[NodeDefinition] '~>' name=ID ']]'
	public XXPropertyExpressionElements getXXPropertyExpressionAccess() {
		return pXXPropertyExpression;
	}
	
	public ParserRule getXXPropertyExpressionRule() {
		return getXXPropertyExpressionAccess().getRule();
	}

	//Quantification:
	//	quantor=Quantor node=NodeDefinition 'in' nodeSet=[NodeDefinition];
	public QuantificationElements getQuantificationAccess() {
		return pQuantification;
	}
	
	public ParserRule getQuantificationRule() {
		return getQuantificationAccess().getRule();
	}

	//QuantificationList:
	//	quantifications+=Quantification (',' quantifications+=Quantification)*;
	public QuantificationListElements getQuantificationListAccess() {
		return pQuantificationList;
	}
	
	public ParserRule getQuantificationListRule() {
		return getQuantificationListAccess().getRule();
	}

	//PropertyExpression:
	//	PropertyValueExpression | PropertyReferenceExpression;
	public PropertyExpressionElements getPropertyExpressionAccess() {
		return pPropertyExpression;
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//PropertyValueExpression:
	//	value=STRING;
	public PropertyValueExpressionElements getPropertyValueExpressionAccess() {
		return pPropertyValueExpression;
	}
	
	public ParserRule getPropertyValueExpressionRule() {
		return getPropertyValueExpressionAccess().getRule();
	}

	//PropertyReferenceExpression:
	//	node=[NodeDefinition] '.' Property=ID;
	public PropertyReferenceExpressionElements getPropertyReferenceExpressionAccess() {
		return pPropertyReferenceExpression;
	}
	
	public ParserRule getPropertyReferenceExpressionRule() {
		return getPropertyReferenceExpressionAccess().getRule();
	}

	//RelationQualifier:
	//	MustHave | MustNotHave | CanHave;
	public RelationQualifierElements getRelationQualifierAccess() {
		return pRelationQualifier;
	}
	
	public ParserRule getRelationQualifierRule() {
		return getRelationQualifierAccess().getRule();
	}

	//MustHave RelationQualifier:
	//	{MustHave}
	//	'must have'
	public MustHaveElements getMustHaveAccess() {
		return pMustHave;
	}
	
	public ParserRule getMustHaveRule() {
		return getMustHaveAccess().getRule();
	}

	//MustNotHave RelationQualifier:
	//	{MustNotHave}
	//	'must not have'
	public MustNotHaveElements getMustNotHaveAccess() {
		return pMustNotHave;
	}
	
	public ParserRule getMustNotHaveRule() {
		return getMustNotHaveAccess().getRule();
	}

	//CanHave RelationQualifier:
	//	{CanHave}
	//	'can have'
	public CanHaveElements getCanHaveAccess() {
		return pCanHave;
	}
	
	public ParserRule getCanHaveRule() {
		return getCanHaveAccess().getRule();
	}

	//RelationQuantifier:
	//	One | Multiple | AtLeast | AtMost | Exactly;
	public RelationQuantifierElements getRelationQuantifierAccess() {
		return pRelationQuantifier;
	}
	
	public ParserRule getRelationQuantifierRule() {
		return getRelationQuantifierAccess().getRule();
	}

	//One RelationQuantifier:
	//	{One} 'one'?
	public OneElements getOneAccess() {
		return pOne;
	}
	
	public ParserRule getOneRule() {
		return getOneAccess().getRule();
	}

	//Multiple RelationQuantifier:
	//	{Multiple}
	//	'multiple'
	public MultipleElements getMultipleAccess() {
		return pMultiple;
	}
	
	public ParserRule getMultipleRule() {
		return getMultipleAccess().getRule();
	}

	//AtLeast RelationQuantifier:
	//	{AtLeast}
	//	'at least'
	//	quantity=INT
	public AtLeastElements getAtLeastAccess() {
		return pAtLeast;
	}
	
	public ParserRule getAtLeastRule() {
		return getAtLeastAccess().getRule();
	}

	//AtMost RelationQuantifier:
	//	{AtMost}
	//	'at most'
	//	quantity=INT
	public AtMostElements getAtMostAccess() {
		return pAtMost;
	}
	
	public ParserRule getAtMostRule() {
		return getAtMostAccess().getRule();
	}

	//Exactly RelationQuantifier:
	//	{Exactly}
	//	'exactly'
	//	quantity=INT
	public ExactlyElements getExactlyAccess() {
		return pExactly;
	}
	
	public ParserRule getExactlyRule() {
		return getExactlyAccess().getRule();
	}

	//RelationAxis:
	//	Parent | Child | Ancestor | Descendant;
	public RelationAxisElements getRelationAxisAccess() {
		return pRelationAxis;
	}
	
	public ParserRule getRelationAxisRule() {
		return getRelationAxisAccess().getRule();
	}

	//Parent RelationAxis:
	//	{Parent} ('parent' | 'parents')
	public ParentElements getParentAccess() {
		return pParent;
	}
	
	public ParserRule getParentRule() {
		return getParentAccess().getRule();
	}

	//Child RelationAxis:
	//	{Parent} ('child' | 'children')
	public ChildElements getChildAccess() {
		return pChild;
	}
	
	public ParserRule getChildRule() {
		return getChildAccess().getRule();
	}

	//Ancestor RelationAxis:
	//	{Ancestor} ('ancestor' | 'ancestors')
	public AncestorElements getAncestorAccess() {
		return pAncestor;
	}
	
	public ParserRule getAncestorRule() {
		return getAncestorAccess().getRule();
	}

	//Descendant RelationAxis:
	//	{Descendant} ('descendant' | 'descendants')
	public DescendantElements getDescendantAccess() {
		return pDescendant;
	}
	
	public ParserRule getDescendantRule() {
		return getDescendantAccess().getRule();
	}

	//enum Quantor:
	//	Each='each' | Any='any';
	public QuantorElements getQuantorAccess() {
		return eQuantor;
	}
	
	public EnumRule getQuantorRule() {
		return getQuantorAccess().getRule();
	}

	//enum PropertyRelation:
	//	Equals='equals' | NotEquals='not equals' |
	//	Greater='greater than' | Lesser='lesser than' | GreaterEquals='greater or equals than' |
	//	LesserEquals='lesser or equals than' |
	//	Contains='contains' | NotContains='not contains' |
	//	Intersects='intersects' | SubsetOf='subset of';
	public PropertyRelationElements getPropertyRelationAccess() {
		return ePropertyRelation;
	}
	
	public EnumRule getPropertyRelationRule() {
		return getPropertyRelationAccess().getRule();
	}

	//XAnnotation:
	//	{XAnnotation} '@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '('
	//	(elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ')')?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueOrCommaList xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}

	//XAnnotationElementValue xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationOrExpression xbase::XExpression:
	//	XAnnotation | XExpression
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall XExpression:
	//	super::XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
