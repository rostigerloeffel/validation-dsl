/**
 * generated by Xtext
 */
package com.isax.validation.dsl.scoping;

import com.isax.validation.dsl.dsl.DefinitionSentence;
import com.isax.validation.dsl.dsl.NodeDefinition;
import com.isax.validation.dsl.dsl.PredicateReference;
import com.isax.validation.dsl.dsl.PropertyReferenceExpression;
import com.isax.validation.dsl.dsl.Quantification;
import com.isax.validation.dsl.util.DslUtil;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Functions.Function1;

@SuppressWarnings("all")
public class DslScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_Quantification_nodeSet(final Quantification quantification, final EReference reference) {
    final Function1<NodeDefinition, Boolean> _function = (NodeDefinition d) -> {
      return Boolean.valueOf(d.isCollection());
    };
    return DslUtil.visibleDefinitions(quantification, _function);
  }
  
  public IScope scope_Argument_node(final PredicateReference predicate, final EReference reference) {
    final Function1<NodeDefinition, Boolean> _function = (NodeDefinition d) -> {
      boolean _isCollection = d.isCollection();
      return Boolean.valueOf((!_isCollection));
    };
    return DslUtil.visibleDefinitions(predicate, _function);
  }
  
  public IScope scope_DefinitionSentence_node(final DefinitionSentence sentence, final EReference reference) {
    final Function1<NodeDefinition, Boolean> _function = (NodeDefinition d) -> {
      boolean _isCollection = d.isCollection();
      return Boolean.valueOf((!_isCollection));
    };
    return DslUtil.visibleDefinitions(sentence, _function);
  }
  
  public IScope scope_PropertyReferenceExpression_node(final PropertyReferenceExpression expression, final EReference reference) {
    final Function1<NodeDefinition, Boolean> _function = (NodeDefinition d) -> {
      boolean _isCollection = d.isCollection();
      return Boolean.valueOf((!_isCollection));
    };
    return DslUtil.visibleDefinitions(expression, _function);
  }
}
