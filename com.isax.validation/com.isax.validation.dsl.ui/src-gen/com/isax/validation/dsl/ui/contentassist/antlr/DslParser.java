/*
 * generated by Xtext
 */
package com.isax.validation.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.isax.validation.dsl.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {
	
	@Inject
	private DslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.isax.validation.dsl.ui.contentassist.antlr.internal.InternalDslParser createParser() {
		com.isax.validation.dsl.ui.contentassist.antlr.internal.InternalDslParser result = new com.isax.validation.dsl.ui.contentassist.antlr.internal.InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSentenceAccess().getAlternatives(), "rule__Sentence__Alternatives");
					put(grammarAccess.getDefinitionSentenceAccess().getAlternatives_0(), "rule__DefinitionSentence__Alternatives_0");
					put(grammarAccess.getConstraintSentenceAccess().getAlternatives_3(), "rule__ConstraintSentence__Alternatives_3");
					put(grammarAccess.getPredicateDefinitionSentenceAccess().getAlternatives_3(), "rule__PredicateDefinitionSentence__Alternatives_3");
					put(grammarAccess.getSelectorListAccess().getAlternatives(), "rule__SelectorList__Alternatives");
					put(grammarAccess.getAndExpressionAccess().getAlternatives_1_1(), "rule__AndExpression__Alternatives_1_1");
					put(grammarAccess.getImpliesExpressionAccess().getAlternatives_1_1(), "rule__ImpliesExpression__Alternatives_1_1");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1(), "rule__PrimaryExpression__Alternatives_1");
					put(grammarAccess.getPredicateCallAccess().getAlternatives_0(), "rule__PredicateCall__Alternatives_0");
					put(grammarAccess.getAssignmentAccess().getAlternatives_1(), "rule__Assignment__Alternatives_1");
					put(grammarAccess.getPropertyExpressionAccess().getAlternatives(), "rule__PropertyExpression__Alternatives");
					put(grammarAccess.getQuantorAccess().getAlternatives(), "rule__Quantor__Alternatives");
					put(grammarAccess.getRelationQualifierAccess().getAlternatives(), "rule__RelationQualifier__Alternatives");
					put(grammarAccess.getAxisAccess().getAlternatives(), "rule__Axis__Alternatives");
					put(grammarAccess.getPropertyRelationAccess().getAlternatives(), "rule__PropertyRelation__Alternatives");
					put(grammarAccess.getStartOnSentenceAccess().getGroup(), "rule__StartOnSentence__Group__0");
					put(grammarAccess.getDefinitionSentenceAccess().getGroup(), "rule__DefinitionSentence__Group__0");
					put(grammarAccess.getConstraintSentenceAccess().getGroup(), "rule__ConstraintSentence__Group__0");
					put(grammarAccess.getPredicateDefinitionSentenceAccess().getGroup(), "rule__PredicateDefinitionSentence__Group__0");
					put(grammarAccess.getNodeDefinitionAccess().getGroup(), "rule__NodeDefinition__Group__0");
					put(grammarAccess.getNodeReferenceListAccess().getGroup(), "rule__NodeReferenceList__Group__0");
					put(grammarAccess.getNodeReferenceListAccess().getGroup_1(), "rule__NodeReferenceList__Group_1__0");
					put(grammarAccess.getTargetDefinitionAccess().getGroup(), "rule__TargetDefinition__Group__0");
					put(grammarAccess.getTargetDefinitionAccess().getGroup_2(), "rule__TargetDefinition__Group_2__0");
					put(grammarAccess.getTargetDefinitionAccess().getGroup_3(), "rule__TargetDefinition__Group_3__0");
					put(grammarAccess.getSelectorListAccess().getGroup_0(), "rule__SelectorList__Group_0__0");
					put(grammarAccess.getSelectorListAccess().getGroup_1(), "rule__SelectorList__Group_1__0");
					put(grammarAccess.getSelectorListDefAccess().getGroup(), "rule__SelectorListDef__Group__0");
					put(grammarAccess.getSelectorListDefAccess().getGroup_1(), "rule__SelectorListDef__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getImpliesExpressionAccess().getGroup(), "rule__ImpliesExpression__Group__0");
					put(grammarAccess.getImpliesExpressionAccess().getGroup_1(), "rule__ImpliesExpression__Group_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup(), "rule__PrimaryExpression__Group__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_1_1(), "rule__PrimaryExpression__Group_1_1__0");
					put(grammarAccess.getPredicateCallAccess().getGroup(), "rule__PredicateCall__Group__0");
					put(grammarAccess.getPredicateCallAccess().getGroup_1(), "rule__PredicateCall__Group_1__0");
					put(grammarAccess.getPropertyRelationPredicateAccess().getGroup(), "rule__PropertyRelationPredicate__Group__0");
					put(grammarAccess.getPredicateReferenceAccess().getGroup(), "rule__PredicateReference__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
					put(grammarAccess.getArgumentListAccess().getGroup(), "rule__ArgumentList__Group__0");
					put(grammarAccess.getArgumentListAccess().getGroup_1(), "rule__ArgumentList__Group_1__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getAssignmentListAccess().getGroup(), "rule__AssignmentList__Group__0");
					put(grammarAccess.getAssignmentListAccess().getGroup_1(), "rule__AssignmentList__Group_1__0");
					put(grammarAccess.getQuantificationAccess().getGroup(), "rule__Quantification__Group__0");
					put(grammarAccess.getQuantificationListAccess().getGroup(), "rule__QuantificationList__Group__0");
					put(grammarAccess.getQuantificationListAccess().getGroup_1(), "rule__QuantificationList__Group_1__0");
					put(grammarAccess.getPropertyReferenceExpressionAccess().getGroup(), "rule__PropertyReferenceExpression__Group__0");
					put(grammarAccess.getValidatorAccess().getSentencesAssignment(), "rule__Validator__SentencesAssignment");
					put(grammarAccess.getStartOnSentenceAccess().getDefinitionAssignment_1(), "rule__StartOnSentence__DefinitionAssignment_1");
					put(grammarAccess.getDefinitionSentenceAccess().getQuantificationAssignment_0_0(), "rule__DefinitionSentence__QuantificationAssignment_0_0");
					put(grammarAccess.getDefinitionSentenceAccess().getNodeAssignment_0_1(), "rule__DefinitionSentence__NodeAssignment_0_1");
					put(grammarAccess.getDefinitionSentenceAccess().getQualifierAssignment_1(), "rule__DefinitionSentence__QualifierAssignment_1");
					put(grammarAccess.getDefinitionSentenceAccess().getTargetAssignment_2(), "rule__DefinitionSentence__TargetAssignment_2");
					put(grammarAccess.getConstraintSentenceAccess().getQuantificationsAssignment_1(), "rule__ConstraintSentence__QuantificationsAssignment_1");
					put(grammarAccess.getConstraintSentenceAccess().getNodesAssignment_2(), "rule__ConstraintSentence__NodesAssignment_2");
					put(grammarAccess.getConstraintSentenceAccess().getPredicateAssignment_4(), "rule__ConstraintSentence__PredicateAssignment_4");
					put(grammarAccess.getPredicateDefinitionSentenceAccess().getNameAssignment_1(), "rule__PredicateDefinitionSentence__NameAssignment_1");
					put(grammarAccess.getPredicateDefinitionSentenceAccess().getParametersAssignment_2(), "rule__PredicateDefinitionSentence__ParametersAssignment_2");
					put(grammarAccess.getPredicateDefinitionSentenceAccess().getPredicateAssignment_4(), "rule__PredicateDefinitionSentence__PredicateAssignment_4");
					put(grammarAccess.getNodeDefinitionAccess().getNameAssignment_0(), "rule__NodeDefinition__NameAssignment_0");
					put(grammarAccess.getNodeDefinitionAccess().getCollectionAssignment_1(), "rule__NodeDefinition__CollectionAssignment_1");
					put(grammarAccess.getNodeDefinitionAccess().getSelectorsAssignment_2(), "rule__NodeDefinition__SelectorsAssignment_2");
					put(grammarAccess.getNodeReferenceListAccess().getNodesAssignment_0(), "rule__NodeReferenceList__NodesAssignment_0");
					put(grammarAccess.getNodeReferenceListAccess().getNodesAssignment_1_1(), "rule__NodeReferenceList__NodesAssignment_1_1");
					put(grammarAccess.getTargetDefinitionAccess().getAxisAssignment_0(), "rule__TargetDefinition__AxisAssignment_0");
					put(grammarAccess.getTargetDefinitionAccess().getDefinitionAssignment_1(), "rule__TargetDefinition__DefinitionAssignment_1");
					put(grammarAccess.getTargetDefinitionAccess().getPredicateAssignment_2_2(), "rule__TargetDefinition__PredicateAssignment_2_2");
					put(grammarAccess.getTargetDefinitionAccess().getAssignmentsAssignment_3_2(), "rule__TargetDefinition__AssignmentsAssignment_3_2");
					put(grammarAccess.getSelectorListAccess().getSelectorsAssignment_0_1(), "rule__SelectorList__SelectorsAssignment_0_1");
					put(grammarAccess.getSelectorListAccess().getSelectorsAssignment_1_1(), "rule__SelectorList__SelectorsAssignment_1_1");
					put(grammarAccess.getSelectorListDefAccess().getSelectorsAssignment_0(), "rule__SelectorListDef__SelectorsAssignment_0");
					put(grammarAccess.getSelectorListDefAccess().getSelectorsAssignment_1_1(), "rule__SelectorListDef__SelectorsAssignment_1_1");
					put(grammarAccess.getSelectorAccess().getTypeAssignment(), "rule__Selector__TypeAssignment");
					put(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_2(), "rule__AndExpression__RhsAssignment_1_2");
					put(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_2(), "rule__OrExpression__RhsAssignment_1_2");
					put(grammarAccess.getImpliesExpressionAccess().getLhsAssignment_0(), "rule__ImpliesExpression__LhsAssignment_0");
					put(grammarAccess.getImpliesExpressionAccess().getRhsAssignment_1_2(), "rule__ImpliesExpression__RhsAssignment_1_2");
					put(grammarAccess.getPrimaryExpressionAccess().getNegatedAssignment_0(), "rule__PrimaryExpression__NegatedAssignment_0");
					put(grammarAccess.getPrimaryExpressionAccess().getCallAssignment_1_0(), "rule__PrimaryExpression__CallAssignment_1_0");
					put(grammarAccess.getPrimaryExpressionAccess().getInnerAssignment_1_1_1(), "rule__PrimaryExpression__InnerAssignment_1_1_1");
					put(grammarAccess.getPredicateCallAccess().getLabelAssignment_1_1(), "rule__PredicateCall__LabelAssignment_1_1");
					put(grammarAccess.getPropertyRelationPredicateAccess().getLhsAssignment_0(), "rule__PropertyRelationPredicate__LhsAssignment_0");
					put(grammarAccess.getPropertyRelationPredicateAccess().getRelationAssignment_1(), "rule__PropertyRelationPredicate__RelationAssignment_1");
					put(grammarAccess.getPropertyRelationPredicateAccess().getRhsAssignment_2(), "rule__PropertyRelationPredicate__RhsAssignment_2");
					put(grammarAccess.getDefinitionSentencePredicateAccess().getSentenceAssignment(), "rule__DefinitionSentencePredicate__SentenceAssignment");
					put(grammarAccess.getPredicateReferenceAccess().getReferenceAssignment_0(), "rule__PredicateReference__ReferenceAssignment_0");
					put(grammarAccess.getPredicateReferenceAccess().getArgumentsAssignment_1(), "rule__PredicateReference__ArgumentsAssignment_1");
					put(grammarAccess.getParameterAccess().getNodeAssignment(), "rule__Parameter__NodeAssignment");
					put(grammarAccess.getParameterListAccess().getParametersAssignment_0(), "rule__ParameterList__ParametersAssignment_0");
					put(grammarAccess.getParameterListAccess().getParametersAssignment_1_1(), "rule__ParameterList__ParametersAssignment_1_1");
					put(grammarAccess.getArgumentAccess().getNodeAssignment(), "rule__Argument__NodeAssignment");
					put(grammarAccess.getArgumentListAccess().getArgumentsAssignment_0(), "rule__ArgumentList__ArgumentsAssignment_0");
					put(grammarAccess.getArgumentListAccess().getArgumentsAssignment_1_1(), "rule__ArgumentList__ArgumentsAssignment_1_1");
					put(grammarAccess.getAssignmentAccess().getReferenceAssignment_0(), "rule__Assignment__ReferenceAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
					put(grammarAccess.getAssignmentListAccess().getAssignmentsAssignment_0(), "rule__AssignmentList__AssignmentsAssignment_0");
					put(grammarAccess.getAssignmentListAccess().getAssignmentsAssignment_1_1(), "rule__AssignmentList__AssignmentsAssignment_1_1");
					put(grammarAccess.getQuantificationAccess().getQuantorAssignment_0(), "rule__Quantification__QuantorAssignment_0");
					put(grammarAccess.getQuantificationAccess().getNodeAssignment_1(), "rule__Quantification__NodeAssignment_1");
					put(grammarAccess.getQuantificationAccess().getNodeSetAssignment_3(), "rule__Quantification__NodeSetAssignment_3");
					put(grammarAccess.getQuantificationListAccess().getQuantificationsAssignment_0(), "rule__QuantificationList__QuantificationsAssignment_0");
					put(grammarAccess.getQuantificationListAccess().getQuantificationsAssignment_1_1(), "rule__QuantificationList__QuantificationsAssignment_1_1");
					put(grammarAccess.getPropertyValueExpressionAccess().getValueAssignment(), "rule__PropertyValueExpression__ValueAssignment");
					put(grammarAccess.getPropertyReferenceExpressionAccess().getNodeAssignment_0(), "rule__PropertyReferenceExpression__NodeAssignment_0");
					put(grammarAccess.getPropertyReferenceExpressionAccess().getPropertyAssignment_2(), "rule__PropertyReferenceExpression__PropertyAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.isax.validation.dsl.ui.contentassist.antlr.internal.InternalDslParser typedParser = (com.isax.validation.dsl.ui.contentassist.antlr.internal.InternalDslParser) parser;
			typedParser.entryRuleValidator();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
