/*
 * generated by Xtext
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.isax.validation.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.isax.validation.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.isax.validation.dsl.services.DslGrammarAccess;

}

@parser::members {
 
 	private DslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleValidator
entryRuleValidator 
:
{ before(grammarAccess.getValidatorRule()); }
	 ruleValidator
{ after(grammarAccess.getValidatorRule()); } 
	 EOF 
;

// Rule Validator
ruleValidator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getValidatorAccess().getSentencesAssignment()); }
(rule__Validator__SentencesAssignment)
{ after(grammarAccess.getValidatorAccess().getSentencesAssignment()); }
)
(
{ before(grammarAccess.getValidatorAccess().getSentencesAssignment()); }
(rule__Validator__SentencesAssignment)*
{ after(grammarAccess.getValidatorAccess().getSentencesAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSentence
entryRuleSentence 
:
{ before(grammarAccess.getSentenceRule()); }
	 ruleSentence
{ after(grammarAccess.getSentenceRule()); } 
	 EOF 
;

// Rule Sentence
ruleSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSentenceAccess().getAlternatives()); }
(rule__Sentence__Alternatives)
{ after(grammarAccess.getSentenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStartOnSentence
entryRuleStartOnSentence 
:
{ before(grammarAccess.getStartOnSentenceRule()); }
	 ruleStartOnSentence
{ after(grammarAccess.getStartOnSentenceRule()); } 
	 EOF 
;

// Rule StartOnSentence
ruleStartOnSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStartOnSentenceAccess().getGroup()); }
(rule__StartOnSentence__Group__0)
{ after(grammarAccess.getStartOnSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinitionSentence
entryRuleDefinitionSentence 
:
{ before(grammarAccess.getDefinitionSentenceRule()); }
	 ruleDefinitionSentence
{ after(grammarAccess.getDefinitionSentenceRule()); } 
	 EOF 
;

// Rule DefinitionSentence
ruleDefinitionSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinitionSentenceAccess().getGroup()); }
(rule__DefinitionSentence__Group__0)
{ after(grammarAccess.getDefinitionSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraintSentence
entryRuleConstraintSentence 
:
{ before(grammarAccess.getConstraintSentenceRule()); }
	 ruleConstraintSentence
{ after(grammarAccess.getConstraintSentenceRule()); } 
	 EOF 
;

// Rule ConstraintSentence
ruleConstraintSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintSentenceAccess().getGroup()); }
(rule__ConstraintSentence__Group__0)
{ after(grammarAccess.getConstraintSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePredicateDefinitionSentence
entryRulePredicateDefinitionSentence 
:
{ before(grammarAccess.getPredicateDefinitionSentenceRule()); }
	 rulePredicateDefinitionSentence
{ after(grammarAccess.getPredicateDefinitionSentenceRule()); } 
	 EOF 
;

// Rule PredicateDefinitionSentence
rulePredicateDefinitionSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getGroup()); }
(rule__PredicateDefinitionSentence__Group__0)
{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeDefinition
entryRuleNodeDefinition 
:
{ before(grammarAccess.getNodeDefinitionRule()); }
	 ruleNodeDefinition
{ after(grammarAccess.getNodeDefinitionRule()); } 
	 EOF 
;

// Rule NodeDefinition
ruleNodeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeDefinitionAccess().getGroup()); }
(rule__NodeDefinition__Group__0)
{ after(grammarAccess.getNodeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeReferenceList
entryRuleNodeReferenceList 
:
{ before(grammarAccess.getNodeReferenceListRule()); }
	 ruleNodeReferenceList
{ after(grammarAccess.getNodeReferenceListRule()); } 
	 EOF 
;

// Rule NodeReferenceList
ruleNodeReferenceList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeReferenceListAccess().getGroup()); }
(rule__NodeReferenceList__Group__0)
{ after(grammarAccess.getNodeReferenceListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTargetDefinition
entryRuleTargetDefinition 
:
{ before(grammarAccess.getTargetDefinitionRule()); }
	 ruleTargetDefinition
{ after(grammarAccess.getTargetDefinitionRule()); } 
	 EOF 
;

// Rule TargetDefinition
ruleTargetDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTargetDefinitionAccess().getGroup()); }
(rule__TargetDefinition__Group__0)
{ after(grammarAccess.getTargetDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectorList
entryRuleSelectorList 
:
{ before(grammarAccess.getSelectorListRule()); }
	 ruleSelectorList
{ after(grammarAccess.getSelectorListRule()); } 
	 EOF 
;

// Rule SelectorList
ruleSelectorList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectorListAccess().getAlternatives()); }
(rule__SelectorList__Alternatives)
{ after(grammarAccess.getSelectorListAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectorListDef
entryRuleSelectorListDef 
:
{ before(grammarAccess.getSelectorListDefRule()); }
	 ruleSelectorListDef
{ after(grammarAccess.getSelectorListDefRule()); } 
	 EOF 
;

// Rule SelectorListDef
ruleSelectorListDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectorListDefAccess().getGroup()); }
(rule__SelectorListDef__Group__0)
{ after(grammarAccess.getSelectorListDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelector
entryRuleSelector 
:
{ before(grammarAccess.getSelectorRule()); }
	 ruleSelector
{ after(grammarAccess.getSelectorRule()); } 
	 EOF 
;

// Rule Selector
ruleSelector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectorAccess().getTypeAssignment()); }
(rule__Selector__TypeAssignment)
{ after(grammarAccess.getSelectorAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePredicateExpression
entryRulePredicateExpression 
:
{ before(grammarAccess.getPredicateExpressionRule()); }
	 rulePredicateExpression
{ after(grammarAccess.getPredicateExpressionRule()); } 
	 EOF 
;

// Rule PredicateExpression
rulePredicateExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateExpressionAccess().getAndExpressionParserRuleCall()); }
	ruleAndExpression
{ after(grammarAccess.getPredicateExpressionAccess().getAndExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression 
:
{ before(grammarAccess.getImpliesExpressionRule()); }
	 ruleImpliesExpression
{ after(grammarAccess.getImpliesExpressionRule()); } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImpliesExpressionAccess().getGroup()); }
(rule__ImpliesExpression__Group__0)
{ after(grammarAccess.getImpliesExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
(rule__PrimaryExpression__Group__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePredicateCall
entryRulePredicateCall 
:
{ before(grammarAccess.getPredicateCallRule()); }
	 rulePredicateCall
{ after(grammarAccess.getPredicateCallRule()); } 
	 EOF 
;

// Rule PredicateCall
rulePredicateCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateCallAccess().getGroup()); }
(rule__PredicateCall__Group__0)
{ after(grammarAccess.getPredicateCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyRelationPredicate
entryRulePropertyRelationPredicate 
:
{ before(grammarAccess.getPropertyRelationPredicateRule()); }
	 rulePropertyRelationPredicate
{ after(grammarAccess.getPropertyRelationPredicateRule()); } 
	 EOF 
;

// Rule PropertyRelationPredicate
rulePropertyRelationPredicate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyRelationPredicateAccess().getGroup()); }
(rule__PropertyRelationPredicate__Group__0)
{ after(grammarAccess.getPropertyRelationPredicateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinitionSentencePredicate
entryRuleDefinitionSentencePredicate 
:
{ before(grammarAccess.getDefinitionSentencePredicateRule()); }
	 ruleDefinitionSentencePredicate
{ after(grammarAccess.getDefinitionSentencePredicateRule()); } 
	 EOF 
;

// Rule DefinitionSentencePredicate
ruleDefinitionSentencePredicate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinitionSentencePredicateAccess().getSentenceAssignment()); }
(rule__DefinitionSentencePredicate__SentenceAssignment)
{ after(grammarAccess.getDefinitionSentencePredicateAccess().getSentenceAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePredicateReference
entryRulePredicateReference 
:
{ before(grammarAccess.getPredicateReferenceRule()); }
	 rulePredicateReference
{ after(grammarAccess.getPredicateReferenceRule()); } 
	 EOF 
;

// Rule PredicateReference
rulePredicateReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateReferenceAccess().getGroup()); }
(rule__PredicateReference__Group__0)
{ after(grammarAccess.getPredicateReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getNodeAssignment()); }
(rule__Parameter__NodeAssignment)
{ after(grammarAccess.getParameterAccess().getNodeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterList
entryRuleParameterList 
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterListAccess().getGroup()); }
(rule__ParameterList__Group__0)
{ after(grammarAccess.getParameterListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgument
entryRuleArgument 
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentAccess().getNodeAssignment()); }
(rule__Argument__NodeAssignment)
{ after(grammarAccess.getArgumentAccess().getNodeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgumentList
entryRuleArgumentList 
:
{ before(grammarAccess.getArgumentListRule()); }
	 ruleArgumentList
{ after(grammarAccess.getArgumentListRule()); } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentListAccess().getGroup()); }
(rule__ArgumentList__Group__0)
{ after(grammarAccess.getArgumentListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentList
entryRuleAssignmentList 
:
{ before(grammarAccess.getAssignmentListRule()); }
	 ruleAssignmentList
{ after(grammarAccess.getAssignmentListRule()); } 
	 EOF 
;

// Rule AssignmentList
ruleAssignmentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentListAccess().getGroup()); }
(rule__AssignmentList__Group__0)
{ after(grammarAccess.getAssignmentListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantification
entryRuleQuantification 
:
{ before(grammarAccess.getQuantificationRule()); }
	 ruleQuantification
{ after(grammarAccess.getQuantificationRule()); } 
	 EOF 
;

// Rule Quantification
ruleQuantification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantificationAccess().getGroup()); }
(rule__Quantification__Group__0)
{ after(grammarAccess.getQuantificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantificationList
entryRuleQuantificationList 
:
{ before(grammarAccess.getQuantificationListRule()); }
	 ruleQuantificationList
{ after(grammarAccess.getQuantificationListRule()); } 
	 EOF 
;

// Rule QuantificationList
ruleQuantificationList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantificationListAccess().getGroup()); }
(rule__QuantificationList__Group__0)
{ after(grammarAccess.getQuantificationListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyExpression
entryRulePropertyExpression 
:
{ before(grammarAccess.getPropertyExpressionRule()); }
	 rulePropertyExpression
{ after(grammarAccess.getPropertyExpressionRule()); } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyExpressionAccess().getAlternatives()); }
(rule__PropertyExpression__Alternatives)
{ after(grammarAccess.getPropertyExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyValueExpression
entryRulePropertyValueExpression 
:
{ before(grammarAccess.getPropertyValueExpressionRule()); }
	 rulePropertyValueExpression
{ after(grammarAccess.getPropertyValueExpressionRule()); } 
	 EOF 
;

// Rule PropertyValueExpression
rulePropertyValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyValueExpressionAccess().getGroup()); }
(rule__PropertyValueExpression__Group__0)
{ after(grammarAccess.getPropertyValueExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyReferenceExpression
entryRulePropertyReferenceExpression 
:
{ before(grammarAccess.getPropertyReferenceExpressionRule()); }
	 rulePropertyReferenceExpression
{ after(grammarAccess.getPropertyReferenceExpressionRule()); } 
	 EOF 
;

// Rule PropertyReferenceExpression
rulePropertyReferenceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyReferenceExpressionAccess().getGroup()); }
(rule__PropertyReferenceExpression__Group__0)
{ after(grammarAccess.getPropertyReferenceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Quantor
ruleQuantor
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantorAccess().getAlternatives()); }
(rule__Quantor__Alternatives)
{ after(grammarAccess.getQuantorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RelationQualifier
ruleRelationQualifier
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationQualifierAccess().getAlternatives()); }
(rule__RelationQualifier__Alternatives)
{ after(grammarAccess.getRelationQualifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Axis
ruleAxis
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisAccess().getAlternatives()); }
(rule__Axis__Alternatives)
{ after(grammarAccess.getAxisAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PropertyRelation
rulePropertyRelation
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyRelationAccess().getAlternatives()); }
(rule__PropertyRelation__Alternatives)
{ after(grammarAccess.getPropertyRelationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Sentence__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSentenceAccess().getStartOnSentenceParserRuleCall_0()); }
	ruleStartOnSentence
{ after(grammarAccess.getSentenceAccess().getStartOnSentenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getDefinitionSentenceParserRuleCall_1()); }
	ruleDefinitionSentence
{ after(grammarAccess.getSentenceAccess().getDefinitionSentenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getConstraintSentenceParserRuleCall_2()); }
	ruleConstraintSentence
{ after(grammarAccess.getSentenceAccess().getConstraintSentenceParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getPredicateDefinitionSentenceParserRuleCall_3()); }
	rulePredicateDefinitionSentence
{ after(grammarAccess.getSentenceAccess().getPredicateDefinitionSentenceParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionSentence__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionSentenceAccess().getQuantificationAssignment_0_0()); }
(rule__DefinitionSentence__QuantificationAssignment_0_0)
{ after(grammarAccess.getDefinitionSentenceAccess().getQuantificationAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getDefinitionSentenceAccess().getNodeAssignment_0_1()); }
(rule__DefinitionSentence__NodeAssignment_0_1)
{ after(grammarAccess.getDefinitionSentenceAccess().getNodeAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintSentence__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintSentenceAccess().getHoldsThatKeyword_3_0()); }

	'holds that' 

{ after(grammarAccess.getConstraintSentenceAccess().getHoldsThatKeyword_3_0()); }
)

    |(
{ before(grammarAccess.getConstraintSentenceAccess().getColonKeyword_3_1()); }

	':' 

{ after(grammarAccess.getConstraintSentenceAccess().getColonKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateDefinitionSentence__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getAsKeyword_3_0()); }

	'as' 

{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getAsKeyword_3_0()); }
)

    |(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getColonKeyword_3_1()); }

	':' 

{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getColonKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorList__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListAccess().getGroup_0()); }
(rule__SelectorList__Group_0__0)
{ after(grammarAccess.getSelectorListAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSelectorListAccess().getGroup_1()); }
(rule__SelectorList__Group_1__0)
{ after(grammarAccess.getSelectorListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndKeyword_1_1_0()); }

	'and' 

{ after(grammarAccess.getAndExpressionAccess().getAndKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getAndExpressionAccess().getCommaKeyword_1_1_1()); }

	',' 

{ after(grammarAccess.getAndExpressionAccess().getCommaKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getImpliesKeyword_1_1_0()); }

	'implies' 

{ after(grammarAccess.getImpliesExpressionAccess().getImpliesKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getImpliesExpressionAccess().getEqualsSignGreaterThanSignKeyword_1_1_1()); }

	'=>' 

{ after(grammarAccess.getImpliesExpressionAccess().getEqualsSignGreaterThanSignKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getCallAssignment_1_0()); }
(rule__PrimaryExpression__CallAssignment_1_0)
{ after(grammarAccess.getPrimaryExpressionAccess().getCallAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_1()); }
(rule__PrimaryExpression__Group_1_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateCall__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateCallAccess().getPropertyRelationPredicateParserRuleCall_0_0()); }
	rulePropertyRelationPredicate
{ after(grammarAccess.getPredicateCallAccess().getPropertyRelationPredicateParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getPredicateCallAccess().getDefinitionSentencePredicateParserRuleCall_0_1()); }
	ruleDefinitionSentencePredicate
{ after(grammarAccess.getPredicateCallAccess().getDefinitionSentencePredicateParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getPredicateCallAccess().getPredicateReferenceParserRuleCall_0_2()); }
	rulePredicateReference
{ after(grammarAccess.getPredicateCallAccess().getPredicateReferenceParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getBecomesKeyword_1_0()); }

	'becomes' 

{ after(grammarAccess.getAssignmentAccess().getBecomesKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1_1()); }

	':=' 

{ after(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getPropertyValueExpressionParserRuleCall_0()); }
	rulePropertyValueExpression
{ after(grammarAccess.getPropertyExpressionAccess().getPropertyValueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPropertyExpressionAccess().getPropertyReferenceExpressionParserRuleCall_1()); }
	rulePropertyReferenceExpression
{ after(grammarAccess.getPropertyExpressionAccess().getPropertyReferenceExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantor__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantorAccess().getEachEnumLiteralDeclaration_0()); }
(	'each' 
)
{ after(grammarAccess.getQuantorAccess().getEachEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getQuantorAccess().getAnyEnumLiteralDeclaration_1()); }
(	'any' 
)
{ after(grammarAccess.getQuantorAccess().getAnyEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationQualifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationQualifierAccess().getMustEnumLiteralDeclaration_0()); }
(	'must have' 
)
{ after(grammarAccess.getRelationQualifierAccess().getMustEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationQualifierAccess().getMustNotEnumLiteralDeclaration_1()); }
(	'must not have' 
)
{ after(grammarAccess.getRelationQualifierAccess().getMustNotEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationQualifierAccess().getCanEnumLiteralDeclaration_2()); }
(	'can have' 
)
{ after(grammarAccess.getRelationQualifierAccess().getCanEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisAccess().getParentEnumLiteralDeclaration_0()); }
(	'parent' 
)
{ after(grammarAccess.getAxisAccess().getParentEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAxisAccess().getChildEnumLiteralDeclaration_1()); }
(	'child' 
)
{ after(grammarAccess.getAxisAccess().getChildEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAxisAccess().getAncestorEnumLiteralDeclaration_2()); }
(	'ancestor' 
)
{ after(grammarAccess.getAxisAccess().getAncestorEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAxisAccess().getDescendantEnumLiteralDeclaration_3()); }
(	'descendant' 
)
{ after(grammarAccess.getAxisAccess().getDescendantEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getAxisAccess().getParentsEnumLiteralDeclaration_4()); }
(	'multiple parents' 
)
{ after(grammarAccess.getAxisAccess().getParentsEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getAxisAccess().getChildrenEnumLiteralDeclaration_5()); }
(	'multiple children' 
)
{ after(grammarAccess.getAxisAccess().getChildrenEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getAxisAccess().getAncestorsEnumLiteralDeclaration_6()); }
(	'multiple ancestors' 
)
{ after(grammarAccess.getAxisAccess().getAncestorsEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getAxisAccess().getDescendantsEnumLiteralDeclaration_7()); }
(	'multiple descendants' 
)
{ after(grammarAccess.getAxisAccess().getDescendantsEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRelation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyRelationAccess().getEqualsEnumLiteralDeclaration_0()); }
(	'equals' 
)
{ after(grammarAccess.getPropertyRelationAccess().getEqualsEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPropertyRelationAccess().getNotEqualsEnumLiteralDeclaration_1()); }
(	'not equals' 
)
{ after(grammarAccess.getPropertyRelationAccess().getNotEqualsEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getPropertyRelationAccess().getGreaterEnumLiteralDeclaration_2()); }
(	'greater than' 
)
{ after(grammarAccess.getPropertyRelationAccess().getGreaterEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getPropertyRelationAccess().getLesserEnumLiteralDeclaration_3()); }
(	'lesser than' 
)
{ after(grammarAccess.getPropertyRelationAccess().getLesserEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getPropertyRelationAccess().getGreaterEqualsEnumLiteralDeclaration_4()); }
(	'greater or equals than' 
)
{ after(grammarAccess.getPropertyRelationAccess().getGreaterEqualsEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getPropertyRelationAccess().getLesserEqualsEnumLiteralDeclaration_5()); }
(	'lesser or equals than' 
)
{ after(grammarAccess.getPropertyRelationAccess().getLesserEqualsEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__StartOnSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StartOnSentence__Group__0__Impl
	rule__StartOnSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StartOnSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartOnSentenceAccess().getStartOnKeyword_0()); }

	'start on' 

{ after(grammarAccess.getStartOnSentenceAccess().getStartOnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StartOnSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StartOnSentence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StartOnSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartOnSentenceAccess().getDefinitionAssignment_1()); }
(rule__StartOnSentence__DefinitionAssignment_1)
{ after(grammarAccess.getStartOnSentenceAccess().getDefinitionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DefinitionSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionSentence__Group__0__Impl
	rule__DefinitionSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionSentenceAccess().getAlternatives_0()); }
(rule__DefinitionSentence__Alternatives_0)
{ after(grammarAccess.getDefinitionSentenceAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionSentence__Group__1__Impl
	rule__DefinitionSentence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionSentenceAccess().getQualifierAssignment_1()); }
(rule__DefinitionSentence__QualifierAssignment_1)
{ after(grammarAccess.getDefinitionSentenceAccess().getQualifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionSentence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionSentence__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionSentence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionSentenceAccess().getTargetAssignment_2()); }
(rule__DefinitionSentence__TargetAssignment_2)
{ after(grammarAccess.getDefinitionSentenceAccess().getTargetAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConstraintSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintSentence__Group__0__Impl
	rule__ConstraintSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintSentenceAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getConstraintSentenceAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintSentence__Group__1__Impl
	rule__ConstraintSentence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintSentenceAccess().getQuantificationsAssignment_1()); }
(rule__ConstraintSentence__QuantificationsAssignment_1)?
{ after(grammarAccess.getConstraintSentenceAccess().getQuantificationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintSentence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintSentence__Group__2__Impl
	rule__ConstraintSentence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintSentence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintSentenceAccess().getNodesAssignment_2()); }
(rule__ConstraintSentence__NodesAssignment_2)?
{ after(grammarAccess.getConstraintSentenceAccess().getNodesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintSentence__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintSentence__Group__3__Impl
	rule__ConstraintSentence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintSentence__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintSentenceAccess().getAlternatives_3()); }
(rule__ConstraintSentence__Alternatives_3)
{ after(grammarAccess.getConstraintSentenceAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintSentence__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintSentence__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintSentence__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintSentenceAccess().getPredicateAssignment_4()); }
(rule__ConstraintSentence__PredicateAssignment_4)
{ after(grammarAccess.getConstraintSentenceAccess().getPredicateAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PredicateDefinitionSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateDefinitionSentence__Group__0__Impl
	rule__PredicateDefinitionSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateDefinitionSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getDefineKeyword_0()); }

	'define' 

{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getDefineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateDefinitionSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateDefinitionSentence__Group__1__Impl
	rule__PredicateDefinitionSentence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateDefinitionSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getNameAssignment_1()); }
(rule__PredicateDefinitionSentence__NameAssignment_1)
{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateDefinitionSentence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateDefinitionSentence__Group__2__Impl
	rule__PredicateDefinitionSentence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateDefinitionSentence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getParametersAssignment_2()); }
(rule__PredicateDefinitionSentence__ParametersAssignment_2)?
{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateDefinitionSentence__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateDefinitionSentence__Group__3__Impl
	rule__PredicateDefinitionSentence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateDefinitionSentence__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getAlternatives_3()); }
(rule__PredicateDefinitionSentence__Alternatives_3)
{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateDefinitionSentence__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateDefinitionSentence__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateDefinitionSentence__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getPredicateAssignment_4()); }
(rule__PredicateDefinitionSentence__PredicateAssignment_4)
{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getPredicateAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NodeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__0__Impl
	rule__NodeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getNameAssignment_0()); }
(rule__NodeDefinition__NameAssignment_0)
{ after(grammarAccess.getNodeDefinitionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__1__Impl
	rule__NodeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getCollectionAssignment_1()); }
(rule__NodeDefinition__CollectionAssignment_1)?
{ after(grammarAccess.getNodeDefinitionAccess().getCollectionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getSelectorsAssignment_2()); }
(rule__NodeDefinition__SelectorsAssignment_2)?
{ after(grammarAccess.getNodeDefinitionAccess().getSelectorsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NodeReferenceList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeReferenceList__Group__0__Impl
	rule__NodeReferenceList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeReferenceListAccess().getNodesAssignment_0()); }
(rule__NodeReferenceList__NodesAssignment_0)
{ after(grammarAccess.getNodeReferenceListAccess().getNodesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeReferenceList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeReferenceList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeReferenceListAccess().getGroup_1()); }
(rule__NodeReferenceList__Group_1__0)*
{ after(grammarAccess.getNodeReferenceListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeReferenceList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeReferenceList__Group_1__0__Impl
	rule__NodeReferenceList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeReferenceListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getNodeReferenceListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeReferenceList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeReferenceList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeReferenceListAccess().getNodesAssignment_1_1()); }
(rule__NodeReferenceList__NodesAssignment_1_1)
{ after(grammarAccess.getNodeReferenceListAccess().getNodesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TargetDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group__0__Impl
	rule__TargetDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getAxisAssignment_0()); }
(rule__TargetDefinition__AxisAssignment_0)
{ after(grammarAccess.getTargetDefinitionAccess().getAxisAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group__1__Impl
	rule__TargetDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getDefinitionAssignment_1()); }
(rule__TargetDefinition__DefinitionAssignment_1)
{ after(grammarAccess.getTargetDefinitionAccess().getDefinitionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group__2__Impl
	rule__TargetDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getGroup_2()); }
(rule__TargetDefinition__Group_2__0)?
{ after(grammarAccess.getTargetDefinitionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getGroup_3()); }
(rule__TargetDefinition__Group_3__0)?
{ after(grammarAccess.getTargetDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TargetDefinition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group_2__0__Impl
	rule__TargetDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getWhereHoldsKeyword_2_0()); }

	'where holds' 

{ after(grammarAccess.getTargetDefinitionAccess().getWhereHoldsKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetDefinition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group_2__1__Impl
	rule__TargetDefinition__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getLeftCurlyBracketKeyword_2_1()); }

	'{' 

{ after(grammarAccess.getTargetDefinitionAccess().getLeftCurlyBracketKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetDefinition__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group_2__2__Impl
	rule__TargetDefinition__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getPredicateAssignment_2_2()); }
(rule__TargetDefinition__PredicateAssignment_2_2)
{ after(grammarAccess.getTargetDefinitionAccess().getPredicateAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetDefinition__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getRightCurlyBracketKeyword_2_3()); }

	'}' 

{ after(grammarAccess.getTargetDefinitionAccess().getRightCurlyBracketKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TargetDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group_3__0__Impl
	rule__TargetDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getWithPropertyKeyword_3_0()); }

	'with property' 

{ after(grammarAccess.getTargetDefinitionAccess().getWithPropertyKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group_3__1__Impl
	rule__TargetDefinition__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getLeftCurlyBracketKeyword_3_1()); }

	'{' 

{ after(grammarAccess.getTargetDefinitionAccess().getLeftCurlyBracketKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetDefinition__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group_3__2__Impl
	rule__TargetDefinition__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getAssignmentsAssignment_3_2()); }
(rule__TargetDefinition__AssignmentsAssignment_3_2)
{ after(grammarAccess.getTargetDefinitionAccess().getAssignmentsAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetDefinition__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetDefinition__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getRightCurlyBracketKeyword_3_3()); }

	'}' 

{ after(grammarAccess.getTargetDefinitionAccess().getRightCurlyBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SelectorList__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorList__Group_0__0__Impl
	rule__SelectorList__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorList__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListAccess().getBeingKeyword_0_0()); }

	'being' 

{ after(grammarAccess.getSelectorListAccess().getBeingKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorList__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorList__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorList__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListAccess().getSelectorsAssignment_0_1()); }
(rule__SelectorList__SelectorsAssignment_0_1)
{ after(grammarAccess.getSelectorListAccess().getSelectorsAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorList__Group_1__0__Impl
	rule__SelectorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getSelectorListAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorList__Group_1__1__Impl
	rule__SelectorList__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListAccess().getSelectorsAssignment_1_1()); }
(rule__SelectorList__SelectorsAssignment_1_1)
{ after(grammarAccess.getSelectorListAccess().getSelectorsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorList__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorList__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorList__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getSelectorListAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectorListDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorListDef__Group__0__Impl
	rule__SelectorListDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorListDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListDefAccess().getSelectorsAssignment_0()); }
(rule__SelectorListDef__SelectorsAssignment_0)
{ after(grammarAccess.getSelectorListDefAccess().getSelectorsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorListDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorListDef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorListDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListDefAccess().getGroup_1()); }
(rule__SelectorListDef__Group_1__0)*
{ after(grammarAccess.getSelectorListDefAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectorListDef__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorListDef__Group_1__0__Impl
	rule__SelectorListDef__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorListDef__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListDefAccess().getOrKeyword_1_0()); }

	'or' 

{ after(grammarAccess.getSelectorListDefAccess().getOrKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorListDef__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorListDef__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorListDef__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListDefAccess().getSelectorsAssignment_1_1()); }
(rule__SelectorListDef__SelectorsAssignment_1_1)
{ after(grammarAccess.getSelectorListDefAccess().getSelectorsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
{ after(grammarAccess.getAndExpressionAccess().getOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAlternatives_1_1()); }
(rule__AndExpression__Alternatives_1_1)
{ after(grammarAccess.getAndExpressionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_2()); }
(rule__AndExpression__RhsAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
	ruleImpliesExpression
{ after(grammarAccess.getOrExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrKeyword_1_1()); }

	'or' 

{ after(grammarAccess.getOrExpressionAccess().getOrKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_2()); }
(rule__OrExpression__RhsAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImpliesExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group__0__Impl
	rule__ImpliesExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getLhsAssignment_0()); }
(rule__ImpliesExpression__LhsAssignment_0)
{ after(grammarAccess.getImpliesExpressionAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
(rule__ImpliesExpression__Group_1__0)?
{ after(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImpliesExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__0__Impl
	rule__ImpliesExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__1__Impl
	rule__ImpliesExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getAlternatives_1_1()); }
(rule__ImpliesExpression__Alternatives_1_1)
{ after(grammarAccess.getImpliesExpressionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getRhsAssignment_1_2()); }
(rule__ImpliesExpression__RhsAssignment_1_2)
{ after(grammarAccess.getImpliesExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group__0__Impl
	rule__PrimaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNegatedAssignment_0()); }
(rule__PrimaryExpression__NegatedAssignment_0)?
{ after(grammarAccess.getPrimaryExpressionAccess().getNegatedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
(rule__PrimaryExpression__Alternatives_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_1__0__Impl
	rule__PrimaryExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_1__1__Impl
	rule__PrimaryExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getInnerAssignment_1_1_1()); }
(rule__PrimaryExpression__InnerAssignment_1_1_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getInnerAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PredicateCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateCall__Group__0__Impl
	rule__PredicateCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateCallAccess().getAlternatives_0()); }
(rule__PredicateCall__Alternatives_0)
{ after(grammarAccess.getPredicateCallAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateCallAccess().getGroup_1()); }
(rule__PredicateCall__Group_1__0)?
{ after(grammarAccess.getPredicateCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PredicateCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateCall__Group_1__0__Impl
	rule__PredicateCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateCallAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getPredicateCallAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateCall__Group_1__1__Impl
	rule__PredicateCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateCallAccess().getLabelAssignment_1_1()); }
(rule__PredicateCall__LabelAssignment_1_1)
{ after(grammarAccess.getPredicateCallAccess().getLabelAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateCallAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getPredicateCallAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyRelationPredicate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyRelationPredicate__Group__0__Impl
	rule__PropertyRelationPredicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRelationPredicate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyRelationPredicateAccess().getLhsAssignment_0()); }
(rule__PropertyRelationPredicate__LhsAssignment_0)
{ after(grammarAccess.getPropertyRelationPredicateAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyRelationPredicate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyRelationPredicate__Group__1__Impl
	rule__PropertyRelationPredicate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRelationPredicate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyRelationPredicateAccess().getRelationAssignment_1()); }
(rule__PropertyRelationPredicate__RelationAssignment_1)
{ after(grammarAccess.getPropertyRelationPredicateAccess().getRelationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyRelationPredicate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyRelationPredicate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRelationPredicate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyRelationPredicateAccess().getRhsAssignment_2()); }
(rule__PropertyRelationPredicate__RhsAssignment_2)
{ after(grammarAccess.getPropertyRelationPredicateAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PredicateReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateReference__Group__0__Impl
	rule__PredicateReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateReferenceAccess().getReferenceAssignment_0()); }
(rule__PredicateReference__ReferenceAssignment_0)
{ after(grammarAccess.getPredicateReferenceAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateReferenceAccess().getArgumentsAssignment_1()); }
(rule__PredicateReference__ArgumentsAssignment_1)
{ after(grammarAccess.getPredicateReferenceAccess().getArgumentsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParametersAssignment_0()); }
(rule__ParameterList__ParametersAssignment_0)
{ after(grammarAccess.getParameterListAccess().getParametersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getGroup_1()); }
(rule__ParameterList__Group_1__0)*
{ after(grammarAccess.getParameterListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_1__0__Impl
	rule__ParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParametersAssignment_1_1()); }
(rule__ParameterList__ParametersAssignment_1_1)
{ after(grammarAccess.getParameterListAccess().getParametersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group__0__Impl
	rule__ArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getArgumentsAssignment_0()); }
(rule__ArgumentList__ArgumentsAssignment_0)
{ after(grammarAccess.getArgumentListAccess().getArgumentsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getGroup_1()); }
(rule__ArgumentList__Group_1__0)*
{ after(grammarAccess.getArgumentListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group_1__0__Impl
	rule__ArgumentList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getArgumentListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getArgumentsAssignment_1_1()); }
(rule__ArgumentList__ArgumentsAssignment_1_1)
{ after(grammarAccess.getArgumentListAccess().getArgumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getReferenceAssignment_0()); }
(rule__Assignment__ReferenceAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAlternatives_1()); }
(rule__Assignment__Alternatives_1)
{ after(grammarAccess.getAssignmentAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
(rule__Assignment__ExpressionAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AssignmentList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentList__Group__0__Impl
	rule__AssignmentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentListAccess().getAssignmentsAssignment_0()); }
(rule__AssignmentList__AssignmentsAssignment_0)
{ after(grammarAccess.getAssignmentListAccess().getAssignmentsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentListAccess().getGroup_1()); }
(rule__AssignmentList__Group_1__0)*
{ after(grammarAccess.getAssignmentListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentList__Group_1__0__Impl
	rule__AssignmentList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getAssignmentListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentListAccess().getAssignmentsAssignment_1_1()); }
(rule__AssignmentList__AssignmentsAssignment_1_1)
{ after(grammarAccess.getAssignmentListAccess().getAssignmentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Quantification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantification__Group__0__Impl
	rule__Quantification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationAccess().getQuantorAssignment_0()); }
(rule__Quantification__QuantorAssignment_0)
{ after(grammarAccess.getQuantificationAccess().getQuantorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantification__Group__1__Impl
	rule__Quantification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationAccess().getNodeAssignment_1()); }
(rule__Quantification__NodeAssignment_1)
{ after(grammarAccess.getQuantificationAccess().getNodeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantification__Group__2__Impl
	rule__Quantification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationAccess().getInKeyword_2()); }

	'in' 

{ after(grammarAccess.getQuantificationAccess().getInKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantification__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationAccess().getNodeSetAssignment_3()); }
(rule__Quantification__NodeSetAssignment_3)
{ after(grammarAccess.getQuantificationAccess().getNodeSetAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__QuantificationList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantificationList__Group__0__Impl
	rule__QuantificationList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantificationList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationListAccess().getQuantificationsAssignment_0()); }
(rule__QuantificationList__QuantificationsAssignment_0)
{ after(grammarAccess.getQuantificationListAccess().getQuantificationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantificationList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantificationList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantificationList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationListAccess().getGroup_1()); }
(rule__QuantificationList__Group_1__0)*
{ after(grammarAccess.getQuantificationListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuantificationList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantificationList__Group_1__0__Impl
	rule__QuantificationList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantificationList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getQuantificationListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantificationList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantificationList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantificationList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationListAccess().getQuantificationsAssignment_1_1()); }
(rule__QuantificationList__QuantificationsAssignment_1_1)
{ after(grammarAccess.getQuantificationListAccess().getQuantificationsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyValueExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyValueExpression__Group__0__Impl
	rule__PropertyValueExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValueExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueExpressionAccess().getVKeyword_0()); }

	'v' 

{ after(grammarAccess.getPropertyValueExpressionAccess().getVKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValueExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyValueExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValueExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueExpressionAccess().getValueAssignment_1()); }
(rule__PropertyValueExpression__ValueAssignment_1)
{ after(grammarAccess.getPropertyValueExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyReferenceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyReferenceExpression__Group__0__Impl
	rule__PropertyReferenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyReferenceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyReferenceExpressionAccess().getNKeyword_0()); }

	'n' 

{ after(grammarAccess.getPropertyReferenceExpressionAccess().getNKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyReferenceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyReferenceExpression__Group__1__Impl
	rule__PropertyReferenceExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyReferenceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyReferenceExpressionAccess().getNodeAssignment_1()); }
(rule__PropertyReferenceExpression__NodeAssignment_1)
{ after(grammarAccess.getPropertyReferenceExpressionAccess().getNodeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyReferenceExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyReferenceExpression__Group__2__Impl
	rule__PropertyReferenceExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyReferenceExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyReferenceExpressionAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getPropertyReferenceExpressionAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyReferenceExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyReferenceExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyReferenceExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyReferenceExpressionAccess().getPropertyAssignment_3()); }
(rule__PropertyReferenceExpression__PropertyAssignment_3)
{ after(grammarAccess.getPropertyReferenceExpressionAccess().getPropertyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Validator__SentencesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidatorAccess().getSentencesSentenceParserRuleCall_0()); }
	ruleSentence{ after(grammarAccess.getValidatorAccess().getSentencesSentenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StartOnSentence__DefinitionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartOnSentenceAccess().getDefinitionNodeDefinitionParserRuleCall_1_0()); }
	ruleNodeDefinition{ after(grammarAccess.getStartOnSentenceAccess().getDefinitionNodeDefinitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionSentence__QuantificationAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionSentenceAccess().getQuantificationQuantificationParserRuleCall_0_0_0()); }
	ruleQuantification{ after(grammarAccess.getDefinitionSentenceAccess().getQuantificationQuantificationParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionSentence__NodeAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionSentenceAccess().getNodeNodeDefinitionCrossReference_0_1_0()); }
(
{ before(grammarAccess.getDefinitionSentenceAccess().getNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDefinitionSentenceAccess().getNodeNodeDefinitionIDTerminalRuleCall_0_1_0_1()); }
)
{ after(grammarAccess.getDefinitionSentenceAccess().getNodeNodeDefinitionCrossReference_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionSentence__QualifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionSentenceAccess().getQualifierRelationQualifierEnumRuleCall_1_0()); }
	ruleRelationQualifier{ after(grammarAccess.getDefinitionSentenceAccess().getQualifierRelationQualifierEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionSentence__TargetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionSentenceAccess().getTargetTargetDefinitionParserRuleCall_2_0()); }
	ruleTargetDefinition{ after(grammarAccess.getDefinitionSentenceAccess().getTargetTargetDefinitionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintSentence__QuantificationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintSentenceAccess().getQuantificationsQuantificationListParserRuleCall_1_0()); }
	ruleQuantificationList{ after(grammarAccess.getConstraintSentenceAccess().getQuantificationsQuantificationListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintSentence__NodesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintSentenceAccess().getNodesNodeReferenceListParserRuleCall_2_0()); }
	ruleNodeReferenceList{ after(grammarAccess.getConstraintSentenceAccess().getNodesNodeReferenceListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintSentence__PredicateAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintSentenceAccess().getPredicatePredicateExpressionParserRuleCall_4_0()); }
	rulePredicateExpression{ after(grammarAccess.getConstraintSentenceAccess().getPredicatePredicateExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateDefinitionSentence__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateDefinitionSentence__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getParametersParameterListParserRuleCall_2_0()); }
	ruleParameterList{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getParametersParameterListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateDefinitionSentence__PredicateAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateDefinitionSentenceAccess().getPredicatePredicateExpressionParserRuleCall_4_0()); }
	rulePredicateExpression{ after(grammarAccess.getPredicateDefinitionSentenceAccess().getPredicatePredicateExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getNodeDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__CollectionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getCollectionAsteriskKeyword_1_0()); }
(
{ before(grammarAccess.getNodeDefinitionAccess().getCollectionAsteriskKeyword_1_0()); }

	'*' 

{ after(grammarAccess.getNodeDefinitionAccess().getCollectionAsteriskKeyword_1_0()); }
)

{ after(grammarAccess.getNodeDefinitionAccess().getCollectionAsteriskKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__SelectorsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getSelectorsSelectorListParserRuleCall_2_0()); }
	ruleSelectorList{ after(grammarAccess.getNodeDefinitionAccess().getSelectorsSelectorListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceList__NodesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionCrossReference_0_0()); }
(
{ before(grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceList__NodesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionCrossReference_1_1_0()); }
(
{ before(grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getNodeReferenceListAccess().getNodesNodeDefinitionCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__AxisAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getAxisAxisEnumRuleCall_0_0()); }
	ruleAxis{ after(grammarAccess.getTargetDefinitionAccess().getAxisAxisEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__DefinitionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getDefinitionNodeDefinitionParserRuleCall_1_0()); }
	ruleNodeDefinition{ after(grammarAccess.getTargetDefinitionAccess().getDefinitionNodeDefinitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__PredicateAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getPredicatePredicateExpressionParserRuleCall_2_2_0()); }
	rulePredicateExpression{ after(grammarAccess.getTargetDefinitionAccess().getPredicatePredicateExpressionParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TargetDefinition__AssignmentsAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetDefinitionAccess().getAssignmentsAssignmentListParserRuleCall_3_2_0()); }
	ruleAssignmentList{ after(grammarAccess.getTargetDefinitionAccess().getAssignmentsAssignmentListParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorList__SelectorsAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListAccess().getSelectorsSelectorListDefParserRuleCall_0_1_0()); }
	ruleSelectorListDef{ after(grammarAccess.getSelectorListAccess().getSelectorsSelectorListDefParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorList__SelectorsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListAccess().getSelectorsSelectorListDefParserRuleCall_1_1_0()); }
	ruleSelectorListDef{ after(grammarAccess.getSelectorListAccess().getSelectorsSelectorListDefParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorListDef__SelectorsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListDefAccess().getSelectorsSelectorParserRuleCall_0_0()); }
	ruleSelector{ after(grammarAccess.getSelectorListDefAccess().getSelectorsSelectorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorListDef__SelectorsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorListDefAccess().getSelectorsSelectorParserRuleCall_1_1_0()); }
	ruleSelector{ after(grammarAccess.getSelectorListDefAccess().getSelectorsSelectorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorAccess().getTypeIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSelectorAccess().getTypeIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRhsOrExpressionParserRuleCall_1_2_0()); }
	ruleOrExpression{ after(grammarAccess.getAndExpressionAccess().getRhsOrExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRhsImpliesExpressionParserRuleCall_1_2_0()); }
	ruleImpliesExpression{ after(grammarAccess.getOrExpressionAccess().getRhsImpliesExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getLhsPrimaryExpressionParserRuleCall_0_0()); }
	rulePrimaryExpression{ after(grammarAccess.getImpliesExpressionAccess().getLhsPrimaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getRhsPrimaryExpressionParserRuleCall_1_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getImpliesExpressionAccess().getRhsPrimaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__NegatedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNegatedNotKeyword_0_0()); }
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNegatedNotKeyword_0_0()); }

	'not' 

{ after(grammarAccess.getPrimaryExpressionAccess().getNegatedNotKeyword_0_0()); }
)

{ after(grammarAccess.getPrimaryExpressionAccess().getNegatedNotKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__CallAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getCallPredicateCallParserRuleCall_1_0_0()); }
	rulePredicateCall{ after(grammarAccess.getPrimaryExpressionAccess().getCallPredicateCallParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__InnerAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getInnerPredicateExpressionParserRuleCall_1_1_1_0()); }
	rulePredicateExpression{ after(grammarAccess.getPrimaryExpressionAccess().getInnerPredicateExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateCall__LabelAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateCallAccess().getLabelIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getPredicateCallAccess().getLabelIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRelationPredicate__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyRelationPredicateAccess().getLhsPropertyExpressionParserRuleCall_0_0()); }
	rulePropertyExpression{ after(grammarAccess.getPropertyRelationPredicateAccess().getLhsPropertyExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRelationPredicate__RelationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyRelationPredicateAccess().getRelationPropertyRelationEnumRuleCall_1_0()); }
	rulePropertyRelation{ after(grammarAccess.getPropertyRelationPredicateAccess().getRelationPropertyRelationEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRelationPredicate__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyRelationPredicateAccess().getRhsPropertyExpressionParserRuleCall_2_0()); }
	rulePropertyExpression{ after(grammarAccess.getPropertyRelationPredicateAccess().getRhsPropertyExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionSentencePredicate__SentenceAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionSentencePredicateAccess().getSentenceDefinitionSentenceParserRuleCall_0()); }
	ruleDefinitionSentence{ after(grammarAccess.getDefinitionSentencePredicateAccess().getSentenceDefinitionSentenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateReference__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateReferenceAccess().getReferencePredicateDefinitionSentenceCrossReference_0_0()); }
(
{ before(grammarAccess.getPredicateReferenceAccess().getReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPredicateReferenceAccess().getReferencePredicateDefinitionSentenceIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPredicateReferenceAccess().getReferencePredicateDefinitionSentenceCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateReference__ArgumentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateReferenceAccess().getArgumentsArgumentListParserRuleCall_1_0()); }
	ruleArgumentList{ after(grammarAccess.getPredicateReferenceAccess().getArgumentsArgumentListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NodeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNodeNodeDefinitionParserRuleCall_0()); }
	ruleNodeDefinition{ after(grammarAccess.getParameterAccess().getNodeNodeDefinitionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_0_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParametersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_1_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__NodeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNodeNodeDefinitionCrossReference_0()); }
(
{ before(grammarAccess.getArgumentAccess().getNodeNodeDefinitionIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getArgumentAccess().getNodeNodeDefinitionIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getArgumentAccess().getNodeNodeDefinitionCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ArgumentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_0_0()); }
	ruleArgument{ after(grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ArgumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_1_1_0()); }
	ruleArgument{ after(grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getReferencePropertyReferenceExpressionParserRuleCall_0_0()); }
	rulePropertyReferenceExpression{ after(grammarAccess.getAssignmentAccess().getReferencePropertyReferenceExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionPropertyExpressionParserRuleCall_2_0()); }
	rulePropertyExpression{ after(grammarAccess.getAssignmentAccess().getExpressionPropertyExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentList__AssignmentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentListAccess().getAssignmentsAssignmentParserRuleCall_0_0()); }
	ruleAssignment{ after(grammarAccess.getAssignmentListAccess().getAssignmentsAssignmentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentList__AssignmentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentListAccess().getAssignmentsAssignmentParserRuleCall_1_1_0()); }
	ruleAssignment{ after(grammarAccess.getAssignmentListAccess().getAssignmentsAssignmentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__QuantorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationAccess().getQuantorQuantorEnumRuleCall_0_0()); }
	ruleQuantor{ after(grammarAccess.getQuantificationAccess().getQuantorQuantorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__NodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationAccess().getNodeNodeDefinitionParserRuleCall_1_0()); }
	ruleNodeDefinition{ after(grammarAccess.getQuantificationAccess().getNodeNodeDefinitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__NodeSetAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationAccess().getNodeSetNodeDefinitionCrossReference_3_0()); }
(
{ before(grammarAccess.getQuantificationAccess().getNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getQuantificationAccess().getNodeSetNodeDefinitionIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getQuantificationAccess().getNodeSetNodeDefinitionCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantificationList__QuantificationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationListAccess().getQuantificationsQuantificationParserRuleCall_0_0()); }
	ruleQuantification{ after(grammarAccess.getQuantificationListAccess().getQuantificationsQuantificationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantificationList__QuantificationsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantificationListAccess().getQuantificationsQuantificationParserRuleCall_1_1_0()); }
	ruleQuantification{ after(grammarAccess.getQuantificationListAccess().getQuantificationsQuantificationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValueExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getPropertyValueExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyReferenceExpression__NodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyReferenceExpressionAccess().getNodeNodeDefinitionCrossReference_1_0()); }
(
{ before(grammarAccess.getPropertyReferenceExpressionAccess().getNodeNodeDefinitionIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPropertyReferenceExpressionAccess().getNodeNodeDefinitionIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getPropertyReferenceExpressionAccess().getNodeNodeDefinitionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyReferenceExpression__PropertyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyReferenceExpressionAccess().getPropertyIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getPropertyReferenceExpressionAccess().getPropertyIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


